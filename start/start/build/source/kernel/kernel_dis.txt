
F:/Cpp/program_operator_system/source/start/start4/build/source/kernel/kernel.elf:     file format elf32-i386
F:/Cpp/program_operator_system/source/start/start4/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00009dec memsz 0x00009dec flags r-x
    LOAD off    0x0000b000 vaddr 0x0001a000 paddr 0x0001a000 align 2**12
         filesz 0x00000178 memsz 0x000460c0 flags rw-
    LOAD off    0x0000c000 vaddr 0x80000000 paddr 0x000600c0 align 2**12
         filesz 0x00000387 memsz 0x00000387 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000089c9  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000140c  000189e0  000189e0  000099e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001a000  0001a000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000450c0  0001b000  0001b000  0000b178  2**12
                  ALLOC
  4 .first_task   00000387  80000000  000600c0  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00005a64  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012ced  00000000  00000000  00011deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032a1  00000000  00000000  00024ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000340  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  000280c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e82  00000000  00000000  00028198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0002b01a  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002b84  00000000  00000000  0002b02c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000189e0 l    d  .rodata	00000000 .rodata
0001a000 l    d  .data	00000000 .data
0001b000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010323 l     F .text	00000017 up2
0001033a l     F .text	0000000d down2
00010347 l     F .text	0000000c write_cr3
00010353 l     F .text	00000014 pde_index
00010367 l     F .text	00000027 pde_paddr
0001038e l     F .text	00000010 pte_index
0001039e l     F .text	00000027 pte_paddr
000103c5 l     F .text	0000000f get_pte_perm
000103d4 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103e5 l     F .text	00000013 current_page_dir
000103f8 l     F .text	00000058 addr_alloc_init
00010450 l     F .text	00000067 addr_alloc_page
000104b7 l     F .text	00000062 addr_free_page
00010519 l     F .text	00000066 show_mem_info
0001057f l     F .text	0000003c total_mem_size
00018b5c l     O .rodata	00000012 __func__.2380
0001a000 l     O .data	00000050 kernel_map.2392
00018b70 l     O .rodata	00000013 __func__.2420
00018b84 l     O .rodata	00000011 __func__.2498
00018b98 l     O .rodata	0000000c __func__.2505
00018ba4 l     O .rodata	00000009 __func__.2513
00000000 l    df *ABS*	00000000 syscall.c
00018bc0 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fc4 l     F .text	0000000c write_cr3
00010fd0 l     F .text	00000007 hlt
00010fd7 l     F .text	0000000c write_tr
00010fe3 l     F .text	0000001b list_node_init
00010ffe l     F .text	0000000b list_node_next
00011009 l     F .text	0000000b list_count
00011014 l     F .text	0000000a list_first
0001101e l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	000005c0 task_manager
0001d5c0 l     O .bss	00001000 idle_task_stack
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
0001102f l     F .text	000001cd tss_init
00018f20 l     O .rodata	0000000a __func__.3104
00018f2c l     O .rodata	00000010 __func__.3130
0001151f l     F .text	0000000a idle_task_entry
00011669 l     F .text	00000045 task_next_run
0001194b l     F .text	00000069 alloc_task
000119b4 l     F .text	00000030 free_task
00011a48 l     F .text	00000062 copy_opened_files
00011c46 l     F .text	00000129 load_phdr
00018f3c l     O .rodata	0000000a __func__.3242
00011d6f l     F .text	00000213 load_elf_file
00011f82 l     F .text	00000130 copy_args
00018f48 l     O .rodata	0000000a __func__.3277
00000000 l    df *ABS*	00000000 cpu.c
000124ed l     F .text	00000028 lgdt
00012515 l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012767 l     F .text	0000001d inb
00012784 l     F .text	0000001f outb
000127a3 l     F .text	00000007 cli
000127aa l     F .text	00000007 sti
000127b1 l     F .text	00000011 read_cr2
000127c2 l     F .text	00000028 lidt
000127ea l     F .text	00000007 hlt
000127f1 l     F .text	00000010 read_eflags
00012801 l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
0001280c l     F .text	000000ff dump_core_regs
0001290b l     F .text	00000071 do_default_handler
00012d43 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
0001313a l     F .text	0000001d inb
00013157 l     F .text	0000001f outb
00035600 l     O .bss	00000340 console_buf
00013176 l     F .text	00000074 read_cursor_pos
000131ea l     F .text	000000c1 update_cursor_pos
0001335a l     F .text	00000091 erase_rows
000133eb l     F .text	00000088 scroll_up
00013473 l     F .text	00000010 move_to_col0
00013483 l     F .text	00000038 move_next_line
000134bb l     F .text	00000076 move_forward
00013531 l     F .text	00000094 show_char
000135c5 l     F .text	00000078 move_backword
0001363d l     F .text	00000085 clear_display
000136c2 l     F .text	00000073 move_next_tab
00013858 l     F .text	0000003a erase_backword
00013892 l     F .text	000000b8 write_normal
0001394a l     F .text	00000029 clear_esc_param
00013973 l     F .text	00000075 write_esc
000139e8 l     F .text	00000099 set_font_style
00019500 l     O .rodata	00000020 color_table.2390
00013a81 l     F .text	00000037 move_left
00013ab8 l     F .text	00000049 move_right
00013b01 l     F .text	00000033 move_cursor
00013b34 l     F .text	00000051 erase_in_display
00013b85 l     F .text	000000f7 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001a050 l     O .data	00000008 dev_desc_tbl
00035940 l     O .bss	00000a00 dev_tbl
00013d79 l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
0001406a l     F .text	0000001d inb
00014087 l     F .text	0000001f inw
000140a6 l     F .text	0000001f outb
000140c5 l     F .text	00000021 outw
00036340 l     O .bss	00000250 disk_buf
00036590 l     O .bss	00000014 mutex
000365a4 l     O .bss	00000010 op_sem
000365b4 l     O .bss	00000004 task_on_op
000140e6 l     F .text	00000130 ata_send_cmd
00014216 l     F .text	00000050 ata_read_data
00014266 l     F .text	00000050 ata_write_data
000142b6 l     F .text	0000004b ata_wait_data
00014301 l     F .text	000000fe print_disk_info
000143ff l     F .text	00000119 detect_part_info
00014518 l     F .text	00000127 identify_disk
00000000 l    df *ABS*	00000000 kbd.c
00014af4 l     F .text	0000001d inb
00014b11 l     F .text	0000001f outb
000365b8 l     O .bss	00000004 kbd_state
000196e0 l     O .rodata	00000200 map_table
00014b30 l     F .text	00000015 get_key
00014b45 l     F .text	0000001a is_make_code
00014c09 l     F .text	00000045 update_led_status
00014c4e l     F .text	0000003c do_fx_key
00014c8a l     F .text	000001d0 do_normal_key
00014e5a l     F .text	0000008a do_e0_key
000365bc l     O .bss	00000004 recv_state.2129
000365c0 l     O .bss	00000004 inited.2139
00000000 l    df *ABS*	00000000 time.c
00014fe6 l     F .text	0000001f outb
000365c4 l     O .bss	00000004 sys_tick
0001502d l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 tty.c
000365e0 l     O .bss	000022a0 tty_devs
00038880 l     O .bss	00000004 curr_tty
000151e5 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001a0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
0001580d l     F .text	00000017 up2
00015824 l     F .text	00000059 bread_sector
0001587d l     F .text	0000003e bwrite_secotr
00015c58 l     F .text	00000087 to_sfn
00015e7b l     F .text	00000080 read_dir_entry
00015efb l     F .text	000000aa write_dir_entry
00015fa5 l     F .text	00000175 expand_file
0001611a l     F .text	000000c2 move_file_pos
00016457 l     F .text	00000065 read_from_diritem
00000000 l    df *ABS*	00000000 file.c
000388a0 l     O .bss	00024000 file_table
0005c8a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016eb2 l     F .text	0000000b list_node_next
00016ebd l     F .text	0000000a list_first
0005c8c0 l     O .bss	0000000c mounted_list
0005c8cc l     O .bss	0000000c free_list
0005c8e0 l     O .bss	000017c0 fs_tbl
0005e0a0 l     O .bss	00000004 root_fs
00016ec7 l     F .text	0000001d is_fd_bad
00016ee4 l     F .text	00000026 get_fs_op
00016f0a l     F .text	000001c7 mount
000170d1 l     F .text	00000060 mount_list_init
00019c8c l     O .rodata	00000008 __func__.3075
000172c4 l     F .text	0000002b fs_protect
000172ef l     F .text	0000002b fs_unprotect
00019c94 l     O .rodata	0000000a __func__.3166
00000000 l    df *ABS*	00000000 init.c
0005e0a4 l     O .bss	00000004 init_boot_info
00019d60 l     O .rodata	00000013 __func__.3082
00000000 l    df *ABS*	00000000 mutex.c
00017bfc l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00017d8b l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00018119 l     F .text	00000007 hlt
0001a174 l     O .data	00000004 num2ch.1951
00000000 l    df *ABS*	00000000 list.c
000186d5 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0005e0a8 l     O .bss	00000014 mutex
0005e0bc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
00015e37 g     F .text	00000044 diritem_get_type
00018011 g     F .text	0000003a bitmap_get_bit
00018303 g     F .text	0000004f kernel_memcpy
000177dc g     F .text	000000fc sys_close
0001170c g     F .text	0000000a task_current
0001721c g     F .text	00000050 path_begin_with
800001d1 g     F .first_task	0000001b yield
00013106 g     F .text	0000000b irq_enable_global
0001876c g     F .text	00000064 list_insert_last
00011716 g     F .text	00000032 task_file
000102a5 g       .text	00000000 exception_handler_kbd
00010e09 g     F .text	0000010c sys_sbrk
000117c2 g     F .text	00000061 sys_yield
000119e4 g     F .text	00000064 sys_msleep
00012ab0 g     F .text	0000001c do_handler_segment_not_present
0001160a g     F .text	00000034 task_set_ready
00015b2b g     F .text	0000012d cluster_alloc_free
0001804b g     F .text	0000001b bitmap_is_set
00018352 g     F .text	00000041 kernel_memset
00013f4f g     F .text	0000004c dev_write
00017747 g     F .text	00000095 sys_lseek
00014fa6 g     F .text	00000040 kbd_init
000159a2 g     F .text	0000012f cluster_set_next
00010267 g       .text	00000000 exception_handler_virtual_exception
00014ab6 g     F .text	00000006 disk_close
00010f2f g     F .text	00000095 do_handler_syscall
00018120 g     F .text	0000002d strings_count
00012749 g     F .text	0000001e cpu_init
000188cd g     F .text	0000002f log_init
00016b93 g     F .text	000000f4 fatfs_readdir
00011aaa g     F .text	0000019c sys_fork
00017b9f g     F .text	0000005d init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00014aac g     F .text	0000000a disk_control
000125fc g     F .text	00000039 gdt_free_sel
00010f15 g     F .text	0000001a sys_print_msg
0001a140 g     O .data	00000034 fatfs_op
00018193 g     F .text	00000047 kernel_strcpy
0001a000 g       .data	00000000 s_data
800001a4 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fe9 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00015da4 g     F .text	00000093 diritem_get_name
00015cdf g     F .text	00000037 diritem_name_match
000100a4 g       .text	00000000 exception_handler_breakpoint
00012a08 g     F .text	0000001c do_handler_overflow
00012cd3 g     F .text	0000001c do_handler_alignment_check
0001066b g     F .text	0000008c memory_create_map
000175be g     F .text	000000c5 sys_read
0001726c g     F .text	00000058 path_next_child
00014bc0 g     F .text	00000035 kbd_wait_recv_ready
000167ef g     F .text	0000021e fatfs_write
000132ab g     F .text	000000af console_select
000101b3 g       .text	00000000 exception_handler_general_protection
00012ae8 g     F .text	000000d8 do_handler_general_protection
00013753 g     F .text	0000001e restore_cursor
00017eab g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
00012998 g     F .text	0000001c do_handler_divider
00017f3d g     F .text	000000d4 bitmap_set_bit
00012a78 g     F .text	0000001c do_handler_double_fault
00016c87 g     F .text	0000000a fatfs_closedir
00012bc0 g     F .text	000000f7 do_handler_page_fault
000161dc g     F .text	0000023f fatfs_mount
80000324 g     F .first_task	00000021 isatty
0001664a g     F .text	000001a5 fatfs_read
0001013f g       .text	00000000 exception_handler_double_fault
00012dd6 g     F .text	0000002b pic_send_eoi
00011515 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107b2 g     F .text	00000085 memory_create_uvm
00017db9 g     F .text	0000006e sem_wait
00010c4d g     F .text	00000025 memory_alloc_page_for
00015005 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00017923 g     F .text	00000093 sys_fstat
00013f03 g     F .text	0000004c dev_read
00016a97 g     F .text	000000df fatfs_seek
00016a0d g     F .text	0000008a fatfs_close
00012d27 g     F .text	0000001c do_handler_virtual_exception
000157e3 g     F .text	0000000a devfs_stat
000100c3 g       .text	00000000 exception_handler_overflow
000102e3 g       .text	00000000 simple_switch
000102c4 g       .text	00000000 exception_handler_ide_primary
0001641b g     F .text	0000003c fatfs_unmount
800002d0 g     F .first_task	0000002d lseek
0005e0c0 g     O .bss	00002000 stack
0001463f g     F .text	000000f8 disk_init
00017131 g     F .text	00000090 fs_init
00016e4a g     F .text	00000038 file_inc_ref
00010c8c g     F .text	00000099 memory_free_page
000600c0 g       *ABS*	00000000 s_first_task
0001179b g     F .text	00000027 task_remove_fd
0001553b g     F .text	0000005b tty_control
00013771 g     F .text	000000e7 console_init
0001541a g     F .text	00000121 tty_read
00011375 g     F .text	0000008f task_uninit
00010b64 g     F .text	000000e9 memory_alloc_for_page_dir
000157ed g     F .text	00000020 devfs_ioctl
000150dc g     F .text	0000007f tty_fifo_get
000100e2 g       .text	00000000 exception_handler_bound_range
0001559c g     F .text	0000006d tty_in
000158e4 g     F .text	000000be cluster_get_next
00017e27 g     F .text	00000084 sem_notify
00010ae1 g     F .text	00000083 memory_copy_uvm_data
00013f9b g     F .text	0000004c dev_control
00014ee4 g     F .text	000000c2 do_handler_kbd
00012a40 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00017a09 g     F .text	00000053 sys_readdir
00012cb7 g     F .text	0000001c do_handler_fpu_error
00011426 g     F .text	000000ef task_first_init
00012cef g     F .text	0000001c do_handler_machine_check
80000282 g     F .first_task	0000002d write
0001731a g     F .text	00000182 sys_open
000129b4 g     F .text	0000001c do_handler_Debug
800002fd g     F .first_task	00000027 fstat
000178d8 g     F .text	0000004b sys_isatty
0001870d g     F .text	0000005f list_insert_first
00013db7 g     F .text	0000014c dev_open
00017683 g     F .text	000000c4 sys_Write
000171c1 g     F .text	0000005b path_to_num
000116ea g     F .text	00000022 task_set_wakeup
000129d0 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
000150a5 g     F .text	00000037 tty_fifo_init
0001a060 g     O .data	00000038 dev_disk_desc
000181da g     F .text	00000070 kernel_strncpy
000130fb g     F .text	0000000b irq_disable_global
800001ec g     F .first_task	00000021 wait
00060447 g       *ABS*	00000000 mem_free_start
00014b94 g     F .text	0000002c kbd_write
00017afc g     F .text	0000003d kernel_init
00017d96 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00018554 g     F .text	0000014b kernel_vsprintf
0001814d g     F .text	00000046 get_file_name
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00013fe7 g     F .text	00000083 dev_close
00013735 g     F .text	0000001e save_cursor
000600c0 g       .bss	00000000 e_data
80000255 g     F .first_task	0000002d read
00017c35 g     F .text	00000097 mutex_lock
00017a5c g     F .text	00000050 sys_closedir
00016c91 g     F .text	000000ec fatfs_unlink
00011748 g     F .text	00000053 task_alloc_fd
000157d9 g     F .text	0000000a devfs_seek
00010229 g       .text	00000000 exception_handler_machine_check
0001532d g     F .text	000000ed tty_write
00012a94 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001515b g     F .text	0000008a tty_fifo_put
00060447 g       *ABS*	00000000 e_first_task
000116ae g     F .text	0000003c task_set_sleep
0001749c g     F .text	0000009e sys_dup
0001869f g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00012faf g     F .text	0000003a irq_install
000126ae g     F .text	00000088 init_gdt
00015632 g     F .text	00000017 devfs_mount
00015234 g     F .text	000000f9 tty_open
80000189 g     F .first_task	0000001b fork
00013111 g     F .text	00000018 irq_enter_protection
00017c07 g     F .text	0000002e mutex_init
00013074 g     F .text	00000087 irq_disable
80000345 g     F .first_task	00000021 sbrk
0001a100 g     O .data	00000034 devfs_op
0001564f g     F .text	00000127 devfs_open
00010248 g       .text	00000000 exception_handler_smd_exception
0001753a g     F .text	00000084 sys_ioctl
00010837 g     F .text	0000010f memory_destroy_uvm
00017ed4 g     F .text	00000016 bitmap_byte_count
00012a5c g     F .text	0000001c do_handler_device_unavailable
00017aac g     F .text	00000050 sys_unlink
000158bb g     F .text	00000029 cluster_is_valid
00016b80 g     F .text	00000013 fatfs_opendir
00011823 g     F .text	0000003c task_dispatch
00010946 g     F .text	00000155 memory_copy_uvm
00015596 g     F .text	00000006 tty_close
0001579a g     F .text	00000024 devfs_write
00017b39 g     F .text	00000066 move_to_first_task
00012736 g     F .text	00000013 switch_to_tss
000157be g     F .text	0000001b devfs_close
00013c7c g     F .text	000000f7 console_write
00014b5f g     F .text	00000035 kbd_wait_send_ready
80000366 g     F .first_task	00000021 dup
00018393 g     F .text	0000005e kernel_memcmp
000106f7 g     F .text	000000bb create_kernel_table
000186e8 g     F .text	00000025 list_init
00012d0b g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
0001163e g     F .text	0000002b task_set_block
0001297c g     F .text	0000001c do_handler_unknown
00010c72 g     F .text	0000001a memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00011404 g     F .text	00000022 task_switch_from_to
00012e01 g     F .text	000001ae irq_init
00017ccc g     F .text	000000bf mutex_unlock
00016e82 g     F .text	00000030 file_table_init
00013129 g     F .text	00000011 irq_leave_protection
00016e08 g     F .text	00000042 file_free
00014bf5 g     F .text	00000014 kbd_read
00015d16 g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000027 print_msg
0001824a g     F .text	0000003b kernel_strlen
0001252f g     F .text	00000086 segment_desc_set
00012a24 g     F .text	0000001c do_handler_bound_range
000102f8 g       .text	00000000 exception_handler_syscall
00014737 g     F .text	000000f5 disk_open
000164bc g     F .text	0000018e fatfs_open
000187d0 g     F .text	00000078 list_remove_first
00019dec g       .rodata	00000000 e_text
00018285 g     F .text	0000007e kernel_strncmp
000179b6 g     F .text	00000053 sys_opendir
00017eea g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00016b76 g     F .text	0000000a fatfs_stat
00018066 g     F .text	000000b3 bitmap_alloc_nbits
00016d7d g     F .text	0000008b file_alloc
00011529 g     F .text	000000e1 task_manager_init
00011348 g     F .text	0000002d task_start
00010066 g       .text	00000000 exception_handler_Debug
0001185f g     F .text	000000ec task_time_tick
00010d25 g     F .text	000000e4 memory_init
000120b2 g     F .text	000001bd sys_execve
0001496c g     F .text	00000140 disk_write
00012285 g     F .text	00000115 sys_wait
0001239a g     F .text	00000153 sys_exit
00015609 g     F .text	00000029 tty_select
00013d73 g     F .text	00000006 console_close
00010a9b g     F .text	00000046 memory_get_paddr
00012acc g     F .text	0000001c do_handler_stack_segment_fault
000129ec g     F .text	0000001c do_handler_breakpoint
00015649 g     F .text	00000006 devfs_unmount
8000020d g     F .first_task	00000021 _exit
00015776 g     F .text	00000024 devfs_read
000188fc g     F .text	000000cd log_printf
000111fc g     F .text	0000014c task_init
0001482c g     F .text	00000140 disk_read
8000022e g     F .first_task	00000027 open
00015ad1 g     F .text	0000005a cluster_free_chain
00018530 g     F .text	00000024 kernel_sprintf
0001226f g     F .text	00000016 sys_getpid
00012635 g     F .text	00000079 gdt_alloc_desc
000183f1 g     F .text	0000013f kernel_itoa
00018848 g     F .text	00000085 list_remove
000125b5 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002af g     F .first_task	00000021 close
00014abc g     F .text	00000038 do_handler_ide_primary
000105bb g     F .text	000000b0 find_pte
0001508d g     F .text	00000018 time_init
0001a0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 f3 7a 00 00       	call   17afc <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 00 06 00       	mov    $0x600c0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 77 7b 00 00       	jmp    17b9f <init_main>

00010028 <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 43 29 00 00       	call   1297c <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 40 29 00 00       	call   12998 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 3d 29 00 00       	call   129b4 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 3a 29 00 00       	call   129d0 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 37 29 00 00       	call   129ec <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 34 29 00 00       	call   12a08 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 31 29 00 00       	call   12a24 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 2e 29 00 00       	call   12a40 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 2b 29 00 00       	call   12a5c <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 2a 29 00 00       	call   12a78 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 29 29 00 00       	call   12a94 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 28 29 00 00       	call   12ab0 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 27 29 00 00       	call   12acc <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 26 29 00 00       	call   12ae8 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 e1 29 00 00       	call   12bc0 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 b9 2a 00 00       	call   12cb7 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 b8 2a 00 00       	call   12cd3 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 b5 2a 00 00       	call   12cef <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 b2 2a 00 00       	call   12d0b <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 af 2a 00 00       	call   12d27 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 6e 4d 00 00       	call   15005 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102a5:	6a 00                	push   $0x0
   102a7:	6a 21                	push   $0x21
   102a9:	60                   	pusha  
   102aa:	1e                   	push   %ds
   102ab:	06                   	push   %es
   102ac:	0f a0                	push   %fs
   102ae:	0f a8                	push   %gs
   102b0:	54                   	push   %esp
   102b1:	e8 2e 4c 00 00       	call   14ee4 <do_handler_kbd>
   102b6:	83 c4 04             	add    $0x4,%esp
   102b9:	0f a9                	pop    %gs
   102bb:	0f a1                	pop    %fs
   102bd:	07                   	pop    %es
   102be:	1f                   	pop    %ds
   102bf:	61                   	popa   
   102c0:	83 c4 08             	add    $0x8,%esp
   102c3:	cf                   	iret   

000102c4 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102c4:	6a 00                	push   $0x0
   102c6:	6a 2e                	push   $0x2e
   102c8:	60                   	pusha  
   102c9:	1e                   	push   %ds
   102ca:	06                   	push   %es
   102cb:	0f a0                	push   %fs
   102cd:	0f a8                	push   %gs
   102cf:	54                   	push   %esp
   102d0:	e8 e7 47 00 00       	call   14abc <do_handler_ide_primary>
   102d5:	83 c4 04             	add    $0x4,%esp
   102d8:	0f a9                	pop    %gs
   102da:	0f a1                	pop    %fs
   102dc:	07                   	pop    %es
   102dd:	1f                   	pop    %ds
   102de:	61                   	popa   
   102df:	83 c4 08             	add    $0x8,%esp
   102e2:	cf                   	iret   

000102e3 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   // 取from->stack
   102e3:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102e7:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102eb:	55                   	push   %ebp
	push %ebx
   102ec:	53                   	push   %ebx
	push %esi
   102ed:	56                   	push   %esi
	push %edi
   102ee:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102ef:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102f1:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102f3:	5f                   	pop    %edi
	pop %esi
   102f4:	5e                   	pop    %esi
	pop %ebx
   102f5:	5b                   	pop    %ebx
	pop %ebp
   102f6:	5d                   	pop    %ebp
  	ret
   102f7:	c3                   	ret    

000102f8 <exception_handler_syscall>:

     .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	// 保存前一任务的状态
	pusha
   102f8:	60                   	pusha  
	push %ds
   102f9:	1e                   	push   %ds
	push %es
   102fa:	06                   	push   %es
	push %fs
   102fb:	0f a0                	push   %fs
	push %gs
   102fd:	0f a8                	push   %gs
	pushf
   102ff:	9c                   	pushf  

	// 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   10300:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10305:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10307:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10309:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   1030b:	8e e8                	mov    %eax,%gs

    // 调用处理函数
    mov %esp, %eax
   1030d:	89 e0                	mov    %esp,%eax
    push %eax
   1030f:	50                   	push   %eax
	call do_handler_syscall
   10310:	e8 1a 0c 00 00       	call   10f2f <do_handler_syscall>
	//这里加4是为了跳过frame结构体的地址
	add $4, %esp
   10315:	83 c4 04             	add    $0x4,%esp

    // 再切换回来
	popf
   10318:	9d                   	popf   
	pop %gs
   10319:	0f a9                	pop    %gs
	pop %fs
   1031b:	0f a1                	pop    %fs
	pop %es
   1031d:	07                   	pop    %es
	pop %ds
   1031e:	1f                   	pop    %ds
	popa
   1031f:	61                   	popa   
	
	// 5个参数，加上5*4，不加会导致返回时ss取不出来，最后返回出现问题
   10320:	ca 14 00             	lret   $0x14

00010323 <up2>:

#include <stdarg.h>
#include "comm/types.h"

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10326:	8b 55 08             	mov    0x8(%ebp),%edx
   10329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032c:	01 d0                	add    %edx,%eax
   1032e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10331:	8b 45 0c             	mov    0xc(%ebp),%eax
   10334:	f7 d8                	neg    %eax
   10336:	21 d0                	and    %edx,%eax
}
   10338:	5d                   	pop    %ebp
   10339:	c3                   	ret    

0001033a <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1033a:	55                   	push   %ebp
   1033b:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1033d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10340:	f7 d8                	neg    %eax
   10342:	23 45 08             	and    0x8(%ebp),%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	0f 22 d8             	mov    %eax,%cr3
}
   10350:	90                   	nop
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pde_index>:
#pragma pack()

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	c1 e8 16             	shr    $0x16,%eax
   1035f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10365:	c9                   	leave  
   10366:	c3                   	ret    

00010367 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10367:	55                   	push   %ebp
   10368:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10371:	c0 ea 04             	shr    $0x4,%dl
   10374:	0f b6 d2             	movzbl %dl,%edx
   10377:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1037b:	c1 e1 04             	shl    $0x4,%ecx
   1037e:	09 ca                	or     %ecx,%edx
   10380:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10384:	c1 e0 0c             	shl    $0xc,%eax
   10387:	09 d0                	or     %edx,%eax
   10389:	c1 e0 0c             	shl    $0xc,%eax
}
   1038c:	5d                   	pop    %ebp
   1038d:	c3                   	ret    

0001038e <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index (uint32_t vaddr) {
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	c1 e8 0c             	shr    $0xc,%eax
   10397:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1039c:	5d                   	pop    %ebp
   1039d:	c3                   	ret    

0001039e <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103a8:	c0 ea 04             	shr    $0x4,%dl
   103ab:	0f b6 d2             	movzbl %dl,%edx
   103ae:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103b2:	c1 e1 04             	shl    $0x4,%ecx
   103b5:	09 ca                	or     %ecx,%edx
   103b7:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103bb:	c1 e0 0c             	shl    $0xc,%eax
   103be:	09 d0                	or     %edx,%eax
   103c0:	c1 e0 0c             	shl    $0xc,%eax
}
   103c3:	5d                   	pop    %ebp
   103c4:	c3                   	ret    

000103c5 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm (pte_t * pte) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);                   // 2023年2月19 同学发现有问题，改了下
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	8b 00                	mov    (%eax),%eax
   103cd:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103d2:	5d                   	pop    %ebp
   103d3:	c3                   	ret    

000103d4 <mmu_set_page_dir>:

/**
 * @brief 重新加载整个页表
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir (uint32_t paddr) {
   103d4:	55                   	push   %ebp
   103d5:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103d7:	ff 75 08             	pushl  0x8(%ebp)
   103da:	e8 68 ff ff ff       	call   10347 <write_cr3>
   103df:	83 c4 04             	add    $0x4,%esp
}
   103e2:	90                   	nop
   103e3:	c9                   	leave  
   103e4:	c3                   	ret    

000103e5 <current_page_dir>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); // 内核页目录表

/**
 * @brief 获取当前页表地址
 */
static pde_t * current_page_dir (void) {
   103e5:	55                   	push   %ebp
   103e6:	89 e5                	mov    %esp,%ebp
   103e8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103eb:	e8 1c 13 00 00       	call   1170c <task_current>
   103f0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
}
   103f6:	c9                   	leave  
   103f7:	c3                   	ret    

000103f8 <addr_alloc_init>:
/**
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
                    uint32_t start, uint32_t size, uint32_t page_size) {
   103f8:	55                   	push   %ebp
   103f9:	89 e5                	mov    %esp,%ebp
   103fb:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	83 ec 0c             	sub    $0xc,%esp
   10404:	50                   	push   %eax
   10405:	e8 fd 77 00 00       	call   17c07 <mutex_init>
   1040a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 10             	mov    0x10(%ebp),%edx
   10413:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 55 14             	mov    0x14(%ebp),%edx
   1041c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 55 18             	mov    0x18(%ebp),%edx
   10425:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 40 24             	mov    0x24(%eax),%eax
   1042e:	ba 00 00 00 00       	mov    $0x0,%edx
   10433:	f7 75 18             	divl   0x18(%ebp)
   10436:	89 c2                	mov    %eax,%edx
   10438:	8b 45 08             	mov    0x8(%ebp),%eax
   1043b:	83 c0 14             	add    $0x14,%eax
   1043e:	6a 00                	push   $0x0
   10440:	52                   	push   %edx
   10441:	ff 75 0c             	pushl  0xc(%ebp)
   10444:	50                   	push   %eax
   10445:	e8 a0 7a 00 00       	call   17eea <bitmap_init>
   1044a:	83 c4 10             	add    $0x10,%esp
}
   1044d:	90                   	nop
   1044e:	c9                   	leave  
   1044f:	c3                   	ret    

00010450 <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   10450:	55                   	push   %ebp
   10451:	89 e5                	mov    %esp,%ebp
   10453:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	83 ec 0c             	sub    $0xc,%esp
   10463:	50                   	push   %eax
   10464:	e8 cc 77 00 00       	call   17c35 <mutex_lock>
   10469:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	83 c0 14             	add    $0x14,%eax
   10472:	83 ec 04             	sub    $0x4,%esp
   10475:	ff 75 0c             	pushl  0xc(%ebp)
   10478:	6a 00                	push   $0x0
   1047a:	50                   	push   %eax
   1047b:	e8 e6 7b 00 00       	call   18066 <bitmap_alloc_nbits>
   10480:	83 c4 10             	add    $0x10,%esp
   10483:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1048a:	78 17                	js     104a3 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 20             	mov    0x20(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10498:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1049b:	0f af c1             	imul   %ecx,%eax
   1049e:	01 d0                	add    %edx,%eax
   104a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 ec 0c             	sub    $0xc,%esp
   104a9:	50                   	push   %eax
   104aa:	e8 1d 78 00 00       	call   17ccc <mutex_unlock>
   104af:	83 c4 10             	add    $0x10,%esp
    return addr;
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104b5:	c9                   	leave  
   104b6:	c3                   	ret    

000104b7 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	53                   	push   %ebx
   104bb:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 6b 77 00 00       	call   17c35 <mutex_lock>
   104ca:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	8b 40 20             	mov    0x20(%eax),%eax
   104d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   104d6:	89 d1                	mov    %edx,%ecx
   104d8:	29 c1                	sub    %eax,%ecx
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104e0:	89 c8                	mov    %ecx,%eax
   104e2:	ba 00 00 00 00       	mov    $0x0,%edx
   104e7:	f7 f3                	div    %ebx
   104e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ef:	8b 55 08             	mov    0x8(%ebp),%edx
   104f2:	83 c2 14             	add    $0x14,%edx
   104f5:	6a 00                	push   $0x0
   104f7:	ff 75 10             	pushl  0x10(%ebp)
   104fa:	50                   	push   %eax
   104fb:	52                   	push   %edx
   104fc:	e8 3c 7a 00 00       	call   17f3d <bitmap_set_bit>
   10501:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	50                   	push   %eax
   1050b:	e8 bc 77 00 00       	call   17ccc <mutex_unlock>
   10510:	83 c4 10             	add    $0x10,%esp
}
   10513:	90                   	nop
   10514:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <show_mem_info>:

static void show_mem_info (boot_info_t * boot_info) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1051f:	83 ec 0c             	sub    $0xc,%esp
   10522:	68 e0 89 01 00       	push   $0x189e0
   10527:	e8 d0 83 00 00       	call   188fc <log_printf>
   1052c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10536:	eb 29                	jmp    10561 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10538:	8b 45 08             	mov    0x8(%ebp),%eax
   1053b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10548:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1054b:	52                   	push   %edx
   1054c:	50                   	push   %eax
   1054d:	ff 75 f4             	pushl  -0xc(%ebp)
   10550:	68 ec 89 01 00       	push   $0x189ec
   10555:	e8 a2 83 00 00       	call   188fc <log_printf>
   1055a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	8b 40 50             	mov    0x50(%eax),%eax
   10567:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1056a:	7c cc                	jl     10538 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1056c:	83 ec 0c             	sub    $0xc,%esp
   1056f:	68 fe 89 01 00       	push   $0x189fe
   10574:	e8 83 83 00 00       	call   188fc <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
}
   1057c:	90                   	nop
   1057d:	c9                   	leave  
   1057e:	c3                   	ret    

0001057f <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1057f:	55                   	push   %ebp
   10580:	89 e5                	mov    %esp,%ebp
   10582:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1058c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10593:	eb 16                	jmp    105ab <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1059b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1059f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a2:	01 d0                	add    %edx,%eax
   105a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   105a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	8b 40 50             	mov    0x50(%eax),%eax
   105b1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105b4:	7c df                	jl     10595 <total_mem_size+0x16>
    }
    return mem_size;
   105b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105b9:	c9                   	leave  
   105ba:	c3                   	ret    

000105bb <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   105bb:	55                   	push   %ebp
   105bc:	89 e5                	mov    %esp,%ebp
   105be:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105c1:	ff 75 0c             	pushl  0xc(%ebp)
   105c4:	e8 8a fd ff ff       	call   10353 <pde_index>
   105c9:	83 c4 04             	add    $0x4,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
   105d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   105db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105de:	0f b6 00             	movzbl (%eax),%eax
   105e1:	83 e0 01             	and    $0x1,%eax
   105e4:	84 c0                	test   %al,%al
   105e6:	74 10                	je     105f8 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   105e8:	ff 75 f0             	pushl  -0x10(%ebp)
   105eb:	e8 77 fd ff ff       	call   10367 <pde_paddr>
   105f0:	83 c4 04             	add    $0x4,%esp
   105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105f6:	eb 57                	jmp    1064f <find_pte+0x94>
    } else {
        // 如果不存在，则考虑分配一个
        if (alloc == 0) {
   105f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x4a>
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 64                	jmp    10669 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	6a 01                	push   $0x1
   1060a:	68 00 b0 01 00       	push   $0x1b000
   1060f:	e8 3c fe ff ff       	call   10450 <addr_alloc_page>
   10614:	83 c4 10             	add    $0x10,%esp
   10617:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1061a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1061e:	75 07                	jne    10627 <find_pte+0x6c>
            return (pte_t *)0;
   10620:	b8 00 00 00 00       	mov    $0x0,%eax
   10625:	eb 42                	jmp    10669 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10627:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1062a:	83 c8 07             	or     $0x7,%eax
   1062d:	89 c2                	mov    %eax,%edx
   1062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10632:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        //kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1063a:	83 ec 04             	sub    $0x4,%esp
   1063d:	68 00 10 00 00       	push   $0x1000
   10642:	6a 00                	push   $0x0
   10644:	ff 75 f4             	pushl  -0xc(%ebp)
   10647:	e8 06 7d 00 00       	call   18352 <kernel_memset>
   1064c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1064f:	83 ec 0c             	sub    $0xc,%esp
   10652:	ff 75 0c             	pushl  0xc(%ebp)
   10655:	e8 34 fd ff ff       	call   1038e <pte_index>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10667:	01 d0                	add    %edx,%eax
}
   10669:	c9                   	leave  
   1066a:	c3                   	ret    

0001066b <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1066b:	55                   	push   %ebp
   1066c:	89 e5                	mov    %esp,%ebp
   1066e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10678:	eb 6e                	jmp    106e8 <memory_create_map+0x7d>
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	6a 01                	push   $0x1
   1067f:	ff 75 0c             	pushl  0xc(%ebp)
   10682:	ff 75 08             	pushl  0x8(%ebp)
   10685:	e8 31 ff ff ff       	call   105bb <find_pte>
   1068a:	83 c4 10             	add    $0x10,%esp
   1068d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   10690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10694:	75 07                	jne    1069d <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1069b:	eb 58                	jmp    106f5 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1069d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a0:	0f b6 00             	movzbl (%eax),%eax
   106a3:	83 e0 01             	and    $0x1,%eax
   106a6:	84 c0                	test   %al,%al
   106a8:	74 1c                	je     106c6 <memory_create_map+0x5b>
   106aa:	68 00 8a 01 00       	push   $0x18a00
   106af:	68 5c 8b 01 00       	push   $0x18b5c
   106b4:	68 8a 00 00 00       	push   $0x8a
   106b9:	68 14 8a 01 00       	push   $0x18a14
   106be:	e8 dc 7f 00 00       	call   1869f <panic>
   106c3:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106c6:	8b 45 10             	mov    0x10(%ebp),%eax
   106c9:	0b 45 18             	or     0x18(%ebp),%eax
   106cc:	83 c8 01             	or     $0x1,%eax
   106cf:	89 c2                	mov    %eax,%edx
   106d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d4:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106d6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106dd:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106eb:	3b 45 14             	cmp    0x14(%ebp),%eax
   106ee:	7c 8a                	jl     1067a <memory_create_map+0xf>
    }

    return 0;
   106f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106f5:	c9                   	leave  
   106f6:	c3                   	ret    

000106f7 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table (void) {
   106f7:	55                   	push   %ebp
   106f8:	89 e5                	mov    %esp,%ebp
   106fa:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106fd:	83 ec 04             	sub    $0x4,%esp
   10700:	68 00 10 00 00       	push   $0x1000
   10705:	6a 00                	push   $0x0
   10707:	68 00 c0 01 00       	push   $0x1c000
   1070c:	e8 41 7c 00 00       	call   18352 <kernel_memset>
   10711:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1071b:	e9 83 00 00 00       	jmp    107a3 <create_kernel_table+0xac>
        memory_map_t * map = kernel_map + i;
   10720:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10723:	c1 e0 04             	shl    $0x4,%eax
   10726:	05 00 a0 01 00       	add    $0x1a000,%eax
   1072b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1072e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10731:	8b 00                	mov    (%eax),%eax
   10733:	83 ec 08             	sub    $0x8,%esp
   10736:	68 00 10 00 00       	push   $0x1000
   1073b:	50                   	push   %eax
   1073c:	e8 f9 fb ff ff       	call   1033a <down2>
   10741:	83 c4 10             	add    $0x10,%esp
   10744:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 04             	mov    0x4(%eax),%eax
   1074d:	83 ec 08             	sub    $0x8,%esp
   10750:	68 00 10 00 00       	push   $0x1000
   10755:	50                   	push   %eax
   10756:	e8 c8 fb ff ff       	call   10323 <up2>
   1075b:	83 c4 10             	add    $0x10,%esp
   1075e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10761:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10764:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10767:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076d:	85 c0                	test   %eax,%eax
   1076f:	0f 48 c2             	cmovs  %edx,%eax
   10772:	c1 f8 0c             	sar    $0xc,%eax
   10775:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10778:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077b:	8b 50 0c             	mov    0xc(%eax),%edx
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 08             	mov    0x8(%eax),%eax
   10784:	89 c1                	mov    %eax,%ecx
   10786:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10789:	83 ec 0c             	sub    $0xc,%esp
   1078c:	52                   	push   %edx
   1078d:	ff 75 e4             	pushl  -0x1c(%ebp)
   10790:	51                   	push   %ecx
   10791:	50                   	push   %eax
   10792:	68 00 c0 01 00       	push   $0x1c000
   10797:	e8 cf fe ff ff       	call   1066b <memory_create_map>
   1079c:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1079f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a6:	83 f8 04             	cmp    $0x4,%eax
   107a9:	0f 86 71 ff ff ff    	jbe    10720 <create_kernel_table+0x29>
    }
}
   107af:	90                   	nop
   107b0:	c9                   	leave  
   107b1:	c3                   	ret    

000107b2 <memory_create_uvm>:

/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm (void) {
   107b2:	55                   	push   %ebp
   107b3:	89 e5                	mov    %esp,%ebp
   107b5:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107b8:	83 ec 08             	sub    $0x8,%esp
   107bb:	6a 01                	push   $0x1
   107bd:	68 00 b0 01 00       	push   $0x1b000
   107c2:	e8 89 fc ff ff       	call   10450 <addr_alloc_page>
   107c7:	83 c4 10             	add    $0x10,%esp
   107ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107d1:	75 07                	jne    107da <memory_create_uvm+0x28>
        return 0;
   107d3:	b8 00 00 00 00       	mov    $0x0,%eax
   107d8:	eb 5b                	jmp    10835 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107da:	83 ec 04             	sub    $0x4,%esp
   107dd:	68 00 10 00 00       	push   $0x1000
   107e2:	6a 00                	push   $0x0
   107e4:	ff 75 f0             	pushl  -0x10(%ebp)
   107e7:	e8 66 7b 00 00       	call   18352 <kernel_memset>
   107ec:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ef:	83 ec 0c             	sub    $0xc,%esp
   107f2:	68 00 00 00 80       	push   $0x80000000
   107f7:	e8 57 fb ff ff       	call   10353 <pde_index>
   107fc:	83 c4 10             	add    $0x10,%esp
   107ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10809:	eb 1f                	jmp    1082a <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1080b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10815:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10818:	01 c2                	add    %eax,%edx
   1081a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081d:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10824:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10826:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1082a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10830:	77 d9                	ja     1080b <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10832:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10835:	c9                   	leave  
   10836:	c3                   	ret    

00010837 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm (uint32_t page_dir) {
   10837:	55                   	push   %ebp
   10838:	89 e5                	mov    %esp,%ebp
   1083a:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083d:	68 00 00 00 80       	push   $0x80000000
   10842:	e8 0c fb ff ff       	call   10353 <pde_index>
   10847:	83 c4 04             	add    $0x4,%esp
   1084a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1084d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10850:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10857:	8b 45 08             	mov    0x8(%ebp),%eax
   1085a:	01 d0                	add    %edx,%eax
   1085c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1085f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10863:	75 1c                	jne    10881 <memory_destroy_uvm+0x4a>
   10865:	68 63 8a 01 00       	push   $0x18a63
   1086a:	68 70 8b 01 00       	push   $0x18b70
   1086f:	68 d5 00 00 00       	push   $0xd5
   10874:	68 14 8a 01 00       	push   $0x18a14
   10879:	e8 21 7e 00 00       	call   1869f <panic>
   1087e:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10881:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10884:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10887:	e9 95 00 00 00       	jmp    10921 <memory_destroy_uvm+0xea>
        if (!pde->present) {
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	0f b6 00             	movzbl (%eax),%eax
   10892:	83 e0 01             	and    $0x1,%eax
   10895:	84 c0                	test   %al,%al
   10897:	74 7f                	je     10918 <memory_destroy_uvm+0xe1>
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   10899:	83 ec 0c             	sub    $0xc,%esp
   1089c:	ff 75 f4             	pushl  -0xc(%ebp)
   1089f:	e8 c3 fa ff ff       	call   10367 <pde_paddr>
   108a4:	83 c4 10             	add    $0x10,%esp
   108a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108b1:	eb 39                	jmp    108ec <memory_destroy_uvm+0xb5>
            if (!pte->present) {
   108b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108b6:	0f b6 00             	movzbl (%eax),%eax
   108b9:	83 e0 01             	and    $0x1,%eax
   108bc:	84 c0                	test   %al,%al
   108be:	74 23                	je     108e3 <memory_destroy_uvm+0xac>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108c0:	83 ec 0c             	sub    $0xc,%esp
   108c3:	ff 75 ec             	pushl  -0x14(%ebp)
   108c6:	e8 d3 fa ff ff       	call   1039e <pte_paddr>
   108cb:	83 c4 10             	add    $0x10,%esp
   108ce:	83 ec 04             	sub    $0x4,%esp
   108d1:	6a 01                	push   $0x1
   108d3:	50                   	push   %eax
   108d4:	68 00 b0 01 00       	push   $0x1b000
   108d9:	e8 d9 fb ff ff       	call   104b7 <addr_free_page>
   108de:	83 c4 10             	add    $0x10,%esp
   108e1:	eb 01                	jmp    108e4 <memory_destroy_uvm+0xad>
                continue;
   108e3:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108e4:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108e8:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108ec:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108f3:	7e be                	jle    108b3 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108f5:	83 ec 0c             	sub    $0xc,%esp
   108f8:	ff 75 f4             	pushl  -0xc(%ebp)
   108fb:	e8 67 fa ff ff       	call   10367 <pde_paddr>
   10900:	83 c4 10             	add    $0x10,%esp
   10903:	83 ec 04             	sub    $0x4,%esp
   10906:	6a 01                	push   $0x1
   10908:	50                   	push   %eax
   10909:	68 00 b0 01 00       	push   $0x1b000
   1090e:	e8 a4 fb ff ff       	call   104b7 <addr_free_page>
   10913:	83 c4 10             	add    $0x10,%esp
   10916:	eb 01                	jmp    10919 <memory_destroy_uvm+0xe2>
            continue;
   10918:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10919:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1091d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10921:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10928:	0f 8e 5e ff ff ff    	jle    1088c <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1092e:	83 ec 04             	sub    $0x4,%esp
   10931:	6a 01                	push   $0x1
   10933:	ff 75 08             	pushl  0x8(%ebp)
   10936:	68 00 b0 01 00       	push   $0x1b000
   1093b:	e8 77 fb ff ff       	call   104b7 <addr_free_page>
   10940:	83 c4 10             	add    $0x10,%esp
}
   10943:	90                   	nop
   10944:	c9                   	leave  
   10945:	c3                   	ret    

00010946 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm (uint32_t page_dir) {
   10946:	55                   	push   %ebp
   10947:	89 e5                	mov    %esp,%ebp
   10949:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1094c:	e8 61 fe ff ff       	call   107b2 <memory_create_uvm>
   10951:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10954:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10958:	0f 84 1b 01 00 00    	je     10a79 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1095e:	83 ec 0c             	sub    $0xc,%esp
   10961:	68 00 00 00 80       	push   $0x80000000
   10966:	e8 e8 f9 ff ff       	call   10353 <pde_index>
   1096b:	83 c4 10             	add    $0x10,%esp
   1096e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   10971:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10974:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1097b:	8b 45 08             	mov    0x8(%ebp),%eax
   1097e:	01 d0                	add    %edx,%eax
   10980:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10983:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10986:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10989:	e9 d9 00 00 00       	jmp    10a67 <memory_copy_uvm+0x121>
        if (!pde->present) {
   1098e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10991:	0f b6 00             	movzbl (%eax),%eax
   10994:	83 e0 01             	and    $0x1,%eax
   10997:	84 c0                	test   %al,%al
   10999:	0f 84 bf 00 00 00    	je     10a5e <memory_copy_uvm+0x118>
            continue;
        }

        // 遍历页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   1099f:	83 ec 0c             	sub    $0xc,%esp
   109a2:	ff 75 f4             	pushl  -0xc(%ebp)
   109a5:	e8 bd f9 ff ff       	call   10367 <pde_paddr>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   109b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109b7:	e9 93 00 00 00       	jmp    10a4f <memory_copy_uvm+0x109>
            if (!pte->present) {
   109bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109bf:	0f b6 00             	movzbl (%eax),%eax
   109c2:	83 e0 01             	and    $0x1,%eax
   109c5:	84 c0                	test   %al,%al
   109c7:	74 7d                	je     10a46 <memory_copy_uvm+0x100>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109c9:	83 ec 08             	sub    $0x8,%esp
   109cc:	6a 01                	push   $0x1
   109ce:	68 00 b0 01 00       	push   $0x1b000
   109d3:	e8 78 fa ff ff       	call   10450 <addr_alloc_page>
   109d8:	83 c4 10             	add    $0x10,%esp
   109db:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   109de:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109e2:	0f 84 94 00 00 00    	je     10a7c <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109eb:	c1 e0 16             	shl    $0x16,%eax
   109ee:	89 c2                	mov    %eax,%edx
   109f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109f3:	c1 e0 0c             	shl    $0xc,%eax
   109f6:	09 d0                	or     %edx,%eax
   109f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109fb:	83 ec 0c             	sub    $0xc,%esp
   109fe:	ff 75 ec             	pushl  -0x14(%ebp)
   10a01:	e8 bf f9 ff ff       	call   103c5 <get_pte_perm>
   10a06:	83 c4 10             	add    $0x10,%esp
   10a09:	89 c2                	mov    %eax,%edx
   10a0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a0e:	83 ec 0c             	sub    $0xc,%esp
   10a11:	52                   	push   %edx
   10a12:	6a 01                	push   $0x1
   10a14:	ff 75 dc             	pushl  -0x24(%ebp)
   10a17:	ff 75 d8             	pushl  -0x28(%ebp)
   10a1a:	50                   	push   %eax
   10a1b:	e8 4b fc ff ff       	call   1066b <memory_create_map>
   10a20:	83 c4 20             	add    $0x20,%esp
   10a23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10a26:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a2a:	78 53                	js     10a7f <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a2c:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a32:	83 ec 04             	sub    $0x4,%esp
   10a35:	68 00 10 00 00       	push   $0x1000
   10a3a:	52                   	push   %edx
   10a3b:	50                   	push   %eax
   10a3c:	e8 c2 78 00 00       	call   18303 <kernel_memcpy>
   10a41:	83 c4 10             	add    $0x10,%esp
   10a44:	eb 01                	jmp    10a47 <memory_copy_uvm+0x101>
                continue;
   10a46:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a47:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a4b:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a4f:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a56:	0f 8e 60 ff ff ff    	jle    109bc <memory_copy_uvm+0x76>
   10a5c:	eb 01                	jmp    10a5f <memory_copy_uvm+0x119>
            continue;
   10a5e:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a5f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a63:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a6e:	0f 8e 1a ff ff ff    	jle    1098e <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a77:	eb 20                	jmp    10a99 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a79:	90                   	nop
   10a7a:	eb 04                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7c:	90                   	nop
   10a7d:	eb 01                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7f:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10a80:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a84:	74 0e                	je     10a94 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a8c:	e8 a6 fd ff ff       	call   10837 <memory_destroy_uvm>
   10a91:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <memory_get_paddr>:

/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
   10a9e:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa4:	83 ec 04             	sub    $0x4,%esp
   10aa7:	6a 00                	push   $0x0
   10aa9:	ff 75 0c             	pushl  0xc(%ebp)
   10aac:	50                   	push   %eax
   10aad:	e8 09 fb ff ff       	call   105bb <find_pte>
   10ab2:	83 c4 10             	add    $0x10,%esp
   10ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10ab8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10abc:	75 07                	jne    10ac5 <memory_get_paddr+0x2a>
        return 0;
   10abe:	b8 00 00 00 00       	mov    $0x0,%eax
   10ac3:	eb 1a                	jmp    10adf <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ac5:	83 ec 0c             	sub    $0xc,%esp
   10ac8:	ff 75 f4             	pushl  -0xc(%ebp)
   10acb:	e8 ce f8 ff ff       	call   1039e <pte_paddr>
   10ad0:	83 c4 10             	add    $0x10,%esp
   10ad3:	89 c2                	mov    %eax,%edx
   10ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad8:	25 ff 0f 00 00       	and    $0xfff,%eax
   10add:	01 d0                	add    %edx,%eax
}
   10adf:	c9                   	leave  
   10ae0:	c3                   	ret    

00010ae1 <memory_copy_uvm_data>:

/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10ae1:	55                   	push   %ebp
   10ae2:	89 e5                	mov    %esp,%ebp
   10ae4:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ae7:	eb 6e                	jmp    10b57 <memory_copy_uvm_data+0x76>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ae9:	83 ec 08             	sub    $0x8,%esp
   10aec:	ff 75 08             	pushl  0x8(%ebp)
   10aef:	ff 75 0c             	pushl  0xc(%ebp)
   10af2:	e8 a4 ff ff ff       	call   10a9b <memory_get_paddr>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10afd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b01:	75 07                	jne    10b0a <memory_copy_uvm_data+0x29>
            return -1;
   10b03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b08:	eb 58                	jmp    10b62 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0d:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b15:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b1a:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b23:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b26:	76 06                	jbe    10b2e <memory_copy_uvm_data+0x4d>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   10b28:	8b 45 14             	mov    0x14(%ebp),%eax
   10b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b2e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b31:	8b 55 10             	mov    0x10(%ebp),%edx
   10b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b37:	83 ec 04             	sub    $0x4,%esp
   10b3a:	51                   	push   %ecx
   10b3b:	52                   	push   %edx
   10b3c:	50                   	push   %eax
   10b3d:	e8 c1 77 00 00       	call   18303 <kernel_memcpy>
   10b42:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b48:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4e:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b54:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10b57:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b5b:	75 8c                	jne    10ae9 <memory_copy_uvm_data+0x8>
  }

  return 0;
   10b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b62:	c9                   	leave  
   10b63:	c3                   	ret    

00010b64 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10b64:	55                   	push   %ebp
   10b65:	89 e5                	mov    %esp,%ebp
   10b67:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b70:	68 00 10 00 00       	push   $0x1000
   10b75:	ff 75 10             	pushl  0x10(%ebp)
   10b78:	e8 a6 f7 ff ff       	call   10323 <up2>
   10b7d:	83 c4 08             	add    $0x8,%esp
   10b80:	c1 e8 0c             	shr    $0xc,%eax
   10b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b86:	68 00 10 00 00       	push   $0x1000
   10b8b:	ff 75 0c             	pushl  0xc(%ebp)
   10b8e:	e8 a7 f7 ff ff       	call   1033a <down2>
   10b93:	83 c4 08             	add    $0x8,%esp
   10b96:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   10b99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10ba0:	e9 95 00 00 00       	jmp    10c3a <memory_alloc_for_page_dir+0xd6>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10ba5:	83 ec 08             	sub    $0x8,%esp
   10ba8:	6a 01                	push   $0x1
   10baa:	68 00 b0 01 00       	push   $0x1b000
   10baf:	e8 9c f8 ff ff       	call   10450 <addr_alloc_page>
   10bb4:	83 c4 10             	add    $0x10,%esp
   10bb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10bba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbe:	75 17                	jne    10bd7 <memory_alloc_for_page_dir+0x73>
            log_printf("mem alloc failed. no memory");
   10bc0:	83 ec 0c             	sub    $0xc,%esp
   10bc3:	68 71 8a 01 00       	push   $0x18a71
   10bc8:	e8 2f 7d 00 00       	call   188fc <log_printf>
   10bcd:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bd0:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd5:	eb 74                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bd7:	8b 55 14             	mov    0x14(%ebp),%edx
   10bda:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdd:	83 ec 0c             	sub    $0xc,%esp
   10be0:	52                   	push   %edx
   10be1:	6a 01                	push   $0x1
   10be3:	ff 75 e8             	pushl  -0x18(%ebp)
   10be6:	ff 75 f4             	pushl  -0xc(%ebp)
   10be9:	50                   	push   %eax
   10bea:	e8 7c fa ff ff       	call   1066b <memory_create_map>
   10bef:	83 c4 20             	add    $0x20,%esp
   10bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10bf5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bf9:	79 34                	jns    10c2f <memory_alloc_for_page_dir+0xcb>
            log_printf("create memory map failed. err = %d", err);
   10bfb:	83 ec 08             	sub    $0x8,%esp
   10bfe:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c01:	68 90 8a 01 00       	push   $0x18a90
   10c06:	e8 f1 7c 00 00       	call   188fc <log_printf>
   10c0b:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   10c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c11:	83 c0 01             	add    $0x1,%eax
   10c14:	83 ec 04             	sub    $0x4,%esp
   10c17:	50                   	push   %eax
   10c18:	ff 75 0c             	pushl  0xc(%ebp)
   10c1b:	68 00 b0 01 00       	push   $0x1b000
   10c20:	e8 92 f8 ff ff       	call   104b7 <addr_free_page>
   10c25:	83 c4 10             	add    $0x10,%esp
            return -1;
   10c28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2d:	eb 1c                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c2f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10c36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c40:	0f 8c 5f ff ff ff    	jl     10ba5 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   10c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c4b:	c9                   	leave  
   10c4c:	c3                   	ret    

00010c4d <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10c4d:	55                   	push   %ebp
   10c4e:	89 e5                	mov    %esp,%ebp
   10c50:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10c53:	e8 b4 0a 00 00       	call   1170c <task_current>
   10c58:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   10c5e:	ff 75 10             	pushl  0x10(%ebp)
   10c61:	ff 75 0c             	pushl  0xc(%ebp)
   10c64:	ff 75 08             	pushl  0x8(%ebp)
   10c67:	50                   	push   %eax
   10c68:	e8 f7 fe ff ff       	call   10b64 <memory_alloc_for_page_dir>
   10c6d:	83 c4 10             	add    $0x10,%esp
}
   10c70:	c9                   	leave  
   10c71:	c3                   	ret    

00010c72 <memory_alloc_page>:

/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page (void) {
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
   10c75:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c78:	83 ec 08             	sub    $0x8,%esp
   10c7b:	6a 01                	push   $0x1
   10c7d:	68 00 b0 01 00       	push   $0x1b000
   10c82:	e8 c9 f7 ff ff       	call   10450 <addr_alloc_page>
   10c87:	83 c4 10             	add    $0x10,%esp
}
   10c8a:	c9                   	leave  
   10c8b:	c3                   	ret    

00010c8c <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page (uint32_t addr) {
   10c8c:	55                   	push   %ebp
   10c8d:	89 e5                	mov    %esp,%ebp
   10c8f:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	85 c0                	test   %eax,%eax
   10c97:	78 17                	js     10cb0 <memory_free_page+0x24>
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c99:	83 ec 04             	sub    $0x4,%esp
   10c9c:	6a 01                	push   $0x1
   10c9e:	ff 75 08             	pushl  0x8(%ebp)
   10ca1:	68 00 b0 01 00       	push   $0x1b000
   10ca6:	e8 0c f8 ff ff       	call   104b7 <addr_free_page>
   10cab:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10cae:	eb 72                	jmp    10d22 <memory_free_page+0x96>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   10cb0:	e8 30 f7 ff ff       	call   103e5 <current_page_dir>
   10cb5:	83 ec 04             	sub    $0x4,%esp
   10cb8:	6a 00                	push   $0x0
   10cba:	ff 75 08             	pushl  0x8(%ebp)
   10cbd:	50                   	push   %eax
   10cbe:	e8 f8 f8 ff ff       	call   105bb <find_pte>
   10cc3:	83 c4 10             	add    $0x10,%esp
   10cc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10cc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ccd:	75 0d                	jne    10cdc <memory_free_page+0x50>
   10ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd2:	0f b6 00             	movzbl (%eax),%eax
   10cd5:	83 e0 01             	and    $0x1,%eax
   10cd8:	84 c0                	test   %al,%al
   10cda:	75 1c                	jne    10cf8 <memory_free_page+0x6c>
   10cdc:	68 b4 8a 01 00       	push   $0x18ab4
   10ce1:	68 84 8b 01 00       	push   $0x18b84
   10ce6:	68 86 01 00 00       	push   $0x186
   10ceb:	68 14 8a 01 00       	push   $0x18a14
   10cf0:	e8 aa 79 00 00       	call   1869f <panic>
   10cf5:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cf8:	83 ec 0c             	sub    $0xc,%esp
   10cfb:	ff 75 f4             	pushl  -0xc(%ebp)
   10cfe:	e8 9b f6 ff ff       	call   1039e <pte_paddr>
   10d03:	83 c4 10             	add    $0x10,%esp
   10d06:	83 ec 04             	sub    $0x4,%esp
   10d09:	6a 01                	push   $0x1
   10d0b:	50                   	push   %eax
   10d0c:	68 00 b0 01 00       	push   $0x1b000
   10d11:	e8 a1 f7 ff ff       	call   104b7 <addr_free_page>
   10d16:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d22:	90                   	nop
   10d23:	c9                   	leave  
   10d24:	c3                   	ret    

00010d25 <memory_init>:
 * @brief 初始化内存管理系统
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init (boot_info_t * boot_info) {
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
   10d28:	83 ec 18             	sub    $0x18,%esp
    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10d2b:	83 ec 0c             	sub    $0xc,%esp
   10d2e:	68 d8 8a 01 00       	push   $0x18ad8
   10d33:	e8 c4 7b 00 00       	call   188fc <log_printf>
   10d38:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d3b:	83 ec 0c             	sub    $0xc,%esp
   10d3e:	ff 75 08             	pushl  0x8(%ebp)
   10d41:	e8 d3 f7 ff ff       	call   10519 <show_mem_info>
   10d46:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;   // 2022年-10-1 经同学反馈，发现这里有点bug，改了下
   10d49:	c7 45 f4 47 04 06 00 	movl   $0x60447,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d50:	83 ec 0c             	sub    $0xc,%esp
   10d53:	ff 75 08             	pushl  0x8(%ebp)
   10d56:	e8 24 f8 ff ff       	call   1057f <total_mem_size>
   10d5b:	83 c4 10             	add    $0x10,%esp
   10d5e:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d63:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10d66:	83 ec 08             	sub    $0x8,%esp
   10d69:	68 00 10 00 00       	push   $0x1000
   10d6e:	ff 75 f0             	pushl  -0x10(%ebp)
   10d71:	e8 c4 f5 ff ff       	call   1033a <down2>
   10d76:	83 c4 10             	add    $0x10,%esp
   10d79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10d7c:	83 ec 04             	sub    $0x4,%esp
   10d7f:	ff 75 f0             	pushl  -0x10(%ebp)
   10d82:	68 00 00 10 00       	push   $0x100000
   10d87:	68 e2 8a 01 00       	push   $0x18ae2
   10d8c:	e8 6b 7b 00 00       	call   188fc <log_printf>
   10d91:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d94:	83 ec 0c             	sub    $0xc,%esp
   10d97:	68 00 10 00 00       	push   $0x1000
   10d9c:	ff 75 f0             	pushl  -0x10(%ebp)
   10d9f:	68 00 00 10 00       	push   $0x100000
   10da4:	ff 75 f4             	pushl  -0xc(%ebp)
   10da7:	68 00 b0 01 00       	push   $0x1b000
   10dac:	e8 47 f6 ff ff       	call   103f8 <addr_alloc_init>
   10db1:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10db4:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10db9:	c1 e8 0c             	shr    $0xc,%eax
   10dbc:	83 ec 0c             	sub    $0xc,%esp
   10dbf:	50                   	push   %eax
   10dc0:	e8 0f 71 00 00       	call   17ed4 <bitmap_byte_count>
   10dc5:	83 c4 10             	add    $0x10,%esp
   10dc8:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10dcb:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10dd2:	76 1c                	jbe    10df0 <memory_init+0xcb>
   10dd4:	68 00 8b 01 00       	push   $0x18b00
   10dd9:	68 98 8b 01 00       	push   $0x18b98
   10dde:	68 ab 01 00 00       	push   $0x1ab
   10de3:	68 14 8a 01 00       	push   $0x18a14
   10de8:	e8 b2 78 00 00       	call   1869f <panic>
   10ded:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10df0:	e8 02 f9 ff ff       	call   106f7 <create_kernel_table>

    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10df5:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10dfa:	83 ec 0c             	sub    $0xc,%esp
   10dfd:	50                   	push   %eax
   10dfe:	e8 d1 f5 ff ff       	call   103d4 <mmu_set_page_dir>
   10e03:	83 c4 10             	add    $0x10,%esp
}
   10e06:	90                   	nop
   10e07:	c9                   	leave  
   10e08:	c3                   	ret    

00010e09 <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char * sys_sbrk(int incr) {
   10e09:	55                   	push   %ebp
   10e0a:	89 e5                	mov    %esp,%ebp
   10e0c:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10e0f:	e8 f8 08 00 00       	call   1170c <task_current>
   10e14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10e17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e1a:	8b 40 30             	mov    0x30(%eax),%eax
   10e1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e20:	8b 45 08             	mov    0x8(%ebp),%eax
   10e23:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10e26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e2a:	79 1c                	jns    10e48 <sys_sbrk+0x3f>
   10e2c:	68 25 8b 01 00       	push   $0x18b25
   10e31:	68 a4 8b 01 00       	push   $0x18ba4
   10e36:	68 bc 01 00 00       	push   $0x1bc
   10e3b:	68 14 8a 01 00       	push   $0x18a14
   10e40:	e8 5a 78 00 00       	call   1869f <panic>
   10e45:	83 c4 10             	add    $0x10,%esp

    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0) {
   10e48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e4c:	75 1b                	jne    10e69 <sys_sbrk+0x60>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e4e:	83 ec 08             	sub    $0x8,%esp
   10e51:	ff 75 ec             	pushl  -0x14(%ebp)
   10e54:	68 2f 8b 01 00       	push   $0x18b2f
   10e59:	e8 9e 7a 00 00       	call   188fc <log_printf>
   10e5e:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e61:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e64:	e9 aa 00 00 00       	jmp    10f13 <sys_sbrk+0x10a>
    } 
    
    uint32_t start = task->heap_end;
   10e69:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e6c:	8b 40 30             	mov    0x30(%eax),%eax
   10e6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e72:	8b 55 08             	mov    0x8(%ebp),%edx
   10e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e78:	01 d0                	add    %edx,%eax
   10e7a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e80:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e85:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10e88:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e8c:	74 37                	je     10ec5 <sys_sbrk+0xbc>
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10e8e:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e91:	8b 45 08             	mov    0x8(%ebp),%eax
   10e94:	01 d0                	add    %edx,%eax
   10e96:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e9b:	7f 0e                	jg     10eab <sys_sbrk+0xa2>
            task->heap_end = end;
   10e9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ea0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ea3:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10ea6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ea9:	eb 68                	jmp    10f13 <sys_sbrk+0x10a>
        } else {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10eab:	b8 00 10 00 00       	mov    $0x1000,%eax
   10eb0:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10eb3:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10eb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10eb9:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10ebc:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebf:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10ec2:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    // 处理其余的，起始对齐的页边界的
    if (incr) {
   10ec5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ec9:	74 3c                	je     10f07 <sys_sbrk+0xfe>
        uint32_t curr_size = end - start;
   10ecb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ece:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ed1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ed4:	83 ec 04             	sub    $0x4,%esp
   10ed7:	6a 07                	push   $0x7
   10ed9:	ff 75 d8             	pushl  -0x28(%ebp)
   10edc:	ff 75 f4             	pushl  -0xc(%ebp)
   10edf:	e8 69 fd ff ff       	call   10c4d <memory_alloc_page_for>
   10ee4:	83 c4 10             	add    $0x10,%esp
   10ee7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10eea:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eee:	79 17                	jns    10f07 <sys_sbrk+0xfe>
            log_printf("sbrk: alloc mem failed.");
   10ef0:	83 ec 0c             	sub    $0xc,%esp
   10ef3:	68 43 8b 01 00       	push   $0x18b43
   10ef8:	e8 ff 79 00 00       	call   188fc <log_printf>
   10efd:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10f00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f05:	eb 0c                	jmp    10f13 <sys_sbrk+0x10a>
        }
    }

    //log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10f0d:	89 50 30             	mov    %edx,0x30(%eax)
    return (char * )pre_heap_end;        
   10f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10f13:	c9                   	leave  
   10f14:	c3                   	ret    

00010f15 <sys_print_msg>:
#include "fs/fs.h"

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

int sys_print_msg (char * fmt, int arg) {
   10f15:	55                   	push   %ebp
   10f16:	89 e5                	mov    %esp,%ebp
   10f18:	83 ec 08             	sub    $0x8,%esp
	log_printf(fmt, arg);
   10f1b:	83 ec 08             	sub    $0x8,%esp
   10f1e:	ff 75 0c             	pushl  0xc(%ebp)
   10f21:	ff 75 08             	pushl  0x8(%ebp)
   10f24:	e8 d3 79 00 00       	call   188fc <log_printf>
   10f29:	83 c4 10             	add    $0x10,%esp
}
   10f2c:	90                   	nop
   10f2d:	c9                   	leave  
   10f2e:	c3                   	ret    

00010f2f <do_handler_syscall>:
};

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall (syscall_frame_t * frame) {
   10f2f:	55                   	push   %ebp
   10f30:	89 e5                	mov    %esp,%ebp
   10f32:	53                   	push   %ebx
   10f33:	83 ec 14             	sub    $0x14,%esp
	// 超出边界，返回错误
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f36:	8b 45 08             	mov    0x8(%ebp),%eax
   10f39:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f3c:	83 f8 64             	cmp    $0x64,%eax
   10f3f:	77 4e                	ja     10f8f <do_handler_syscall+0x60>
		// 查表取得处理函数，然后调用处理
		syscall_handler_t handler = sys_table[frame->func_id];
   10f41:	8b 45 08             	mov    0x8(%ebp),%eax
   10f44:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f47:	8b 04 85 c0 8b 01 00 	mov    0x18bc0(,%eax,4),%eax
   10f4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (handler) {
   10f51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f55:	74 38                	je     10f8f <do_handler_syscall+0x60>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f57:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5a:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f5d:	89 c3                	mov    %eax,%ebx
   10f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f62:	8b 40 48             	mov    0x48(%eax),%eax
   10f65:	89 c1                	mov    %eax,%ecx
   10f67:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6a:	8b 40 44             	mov    0x44(%eax),%eax
   10f6d:	89 c2                	mov    %eax,%edx
   10f6f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f72:	8b 40 40             	mov    0x40(%eax),%eax
   10f75:	53                   	push   %ebx
   10f76:	51                   	push   %ecx
   10f77:	52                   	push   %edx
   10f78:	50                   	push   %eax
   10f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f7c:	ff d0                	call   *%eax
   10f7e:	83 c4 10             	add    $0x10,%esp
   10f81:	89 45 f0             	mov    %eax,-0x10(%ebp)
			frame->eax = ret;  // 设置系统调用的返回值，由eax传递
   10f84:	8b 45 08             	mov    0x8(%ebp),%eax
   10f87:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f8a:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f8d:	eb 30                	jmp    10fbf <do_handler_syscall+0x90>
		}
	}

	// 不支持的系统调用，打印出错信息
	task_t * task = task_current();
   10f8f:	e8 78 07 00 00       	call   1170c <task_current>
   10f94:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10f97:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10fa0:	83 c2 04             	add    $0x4,%edx
   10fa3:	83 ec 04             	sub    $0x4,%esp
   10fa6:	50                   	push   %eax
   10fa7:	52                   	push   %edx
   10fa8:	68 54 8d 01 00       	push   $0x18d54
   10fad:	e8 4a 79 00 00       	call   188fc <log_printf>
   10fb2:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;  // 设置系统调用的返回值，由eax传递
   10fb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb8:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10fbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fc2:	c9                   	leave  
   10fc3:	c3                   	ret    

00010fc4 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10fc4:	55                   	push   %ebp
   10fc5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fca:	0f 22 d8             	mov    %eax,%cr3
}
   10fcd:	90                   	nop
   10fce:	5d                   	pop    %ebp
   10fcf:	c3                   	ret    

00010fd0 <hlt>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void hlt(void) {
   10fd0:	55                   	push   %ebp
   10fd1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fd3:	f4                   	hlt    
}
   10fd4:	90                   	nop
   10fd5:	5d                   	pop    %ebp
   10fd6:	c3                   	ret    

00010fd7 <write_tr>:

static inline void write_tr (uint32_t tss_selector) {
   10fd7:	55                   	push   %ebp
   10fd8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   10fda:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdd:	0f 00 d8             	ltr    %ax
}
   10fe0:	90                   	nop
   10fe1:	5d                   	pop    %ebp
   10fe2:	c3                   	ret    

00010fe3 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   10fe3:	55                   	push   %ebp
   10fe4:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff3:	8b 50 04             	mov    0x4(%eax),%edx
   10ff6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff9:	89 10                	mov    %edx,(%eax)
}
   10ffb:	90                   	nop
   10ffc:	5d                   	pop    %ebp
   10ffd:	c3                   	ret    

00010ffe <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   10ffe:	55                   	push   %ebp
   10fff:	89 e5                	mov    %esp,%ebp
    return node->next;
   11001:	8b 45 08             	mov    0x8(%ebp),%eax
   11004:	8b 40 04             	mov    0x4(%eax),%eax
}
   11007:	5d                   	pop    %ebp
   11008:	c3                   	ret    

00011009 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   11009:	55                   	push   %ebp
   1100a:	89 e5                	mov    %esp,%ebp
    return list->count;
   1100c:	8b 45 08             	mov    0x8(%ebp),%eax
   1100f:	8b 40 08             	mov    0x8(%eax),%eax
}
   11012:	5d                   	pop    %ebp
   11013:	c3                   	ret    

00011014 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   11014:	55                   	push   %ebp
   11015:	89 e5                	mov    %esp,%ebp
    return list->first;
   11017:	8b 45 08             	mov    0x8(%ebp),%eax
   1101a:	8b 00                	mov    (%eax),%eax
}
   1101c:	5d                   	pop    %ebp
   1101d:	c3                   	ret    

0001101e <mmu_set_page_dir>:
static inline void mmu_set_page_dir (uint32_t paddr) {
   1101e:	55                   	push   %ebp
   1101f:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11021:	ff 75 08             	pushl  0x8(%ebp)
   11024:	e8 9b ff ff ff       	call   10fc4 <write_cr3>
   11029:	83 c4 04             	add    $0x4,%esp
}
   1102c:	90                   	nop
   1102d:	c9                   	leave  
   1102e:	c3                   	ret    

0001102f <tss_init>:
static task_manager_t task_manager;     // 任务管理器
static uint32_t idle_task_stack[IDLE_STACK_SIZE];	// 空闲任务堆栈
static task_t task_table[TASK_NR];      // 用户进程表
static mutex_t task_table_mutex;        // 进程表互斥访问锁

static int tss_init (task_t * task, int flag, uint32_t entry, uint32_t esp) {
   1102f:	55                   	push   %ebp
   11030:	89 e5                	mov    %esp,%ebp
   11032:	83 ec 28             	sub    $0x28,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   11035:	e8 fb 15 00 00       	call   12635 <gdt_alloc_desc>
   1103a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   1103d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11041:	79 1a                	jns    1105d <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   11043:	83 ec 0c             	sub    $0xc,%esp
   11046:	68 74 8d 01 00       	push   $0x18d74
   1104b:	e8 ac 78 00 00       	call   188fc <log_printf>
   11050:	83 c4 10             	add    $0x10,%esp
        return -1;
   11053:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11058:	e9 9d 01 00 00       	jmp    111fa <tss_init+0x1cb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   1105d:	8b 45 08             	mov    0x8(%ebp),%eax
   11060:	05 44 02 00 00       	add    $0x244,%eax
   11065:	68 89 00 00 00       	push   $0x89
   1106a:	6a 68                	push   $0x68
   1106c:	50                   	push   %eax
   1106d:	ff 75 ec             	pushl  -0x14(%ebp)
   11070:	e8 ba 14 00 00       	call   1252f <segment_desc_set>
   11075:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11078:	8b 45 08             	mov    0x8(%ebp),%eax
   1107b:	05 44 02 00 00       	add    $0x244,%eax
   11080:	83 ec 04             	sub    $0x4,%esp
   11083:	6a 68                	push   $0x68
   11085:	6a 00                	push   $0x0
   11087:	50                   	push   %eax
   11088:	e8 c5 72 00 00       	call   18352 <kernel_memset>
   1108d:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11090:	e8 dd fb ff ff       	call   10c72 <memory_alloc_page>
   11095:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   11098:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1109c:	0f 84 2d 01 00 00    	je     111cf <tss_init+0x1a0>
        goto tss_init_failed;
    }
    
    // 根据不同的权限选择不同的访问选择子
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM) {
   110a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a5:	83 e0 01             	and    $0x1,%eax
   110a8:	85 c0                	test   %eax,%eax
   110aa:	74 10                	je     110bc <tss_init+0x8d>
        code_sel = KERNEL_SELECTOR_CS;
   110ac:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110b3:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110ba:	eb 16                	jmp    110d2 <tss_init+0xa3>
    } else {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110bc:	a1 b8 d5 01 00       	mov    0x1d5b8,%eax
   110c1:	83 c8 03             	or     $0x3,%eax
   110c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   110c7:	a1 bc d5 01 00       	mov    0x1d5bc,%eax
   110cc:	83 c8 03             	or     $0x3,%eax
   110cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110d2:	8b 45 08             	mov    0x8(%ebp),%eax
   110d5:	8b 55 10             	mov    0x10(%ebp),%edx
   110d8:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE;  // 未指定栈则用内核栈，即运行在特权级0的进程
   110de:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110e2:	75 0a                	jne    110ee <tss_init+0xbf>
   110e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110e7:	05 00 10 00 00       	add    $0x1000,%eax
   110ec:	eb 03                	jmp    110f1 <tss_init+0xc2>
   110ee:	8b 45 14             	mov    0x14(%ebp),%eax
   110f1:	8b 55 08             	mov    0x8(%ebp),%edx
   110f4:	89 82 7c 02 00 00    	mov    %eax,0x27c(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110fd:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11103:	8b 45 08             	mov    0x8(%ebp),%eax
   11106:	89 90 48 02 00 00    	mov    %edx,0x248(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1110c:	8b 45 08             	mov    0x8(%ebp),%eax
   1110f:	c7 80 4c 02 00 00 10 	movl   $0x10,0x24c(%eax)
   11116:	00 00 00 
    task->tss.eip = entry;
   11119:	8b 45 08             	mov    0x8(%ebp),%eax
   1111c:	8b 55 10             	mov    0x10(%ebp),%edx
   1111f:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF;
   11125:	8b 45 08             	mov    0x8(%ebp),%eax
   11128:	c7 80 68 02 00 00 02 	movl   $0x202,0x268(%eax)
   1112f:	02 00 00 
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
            = task->tss.gs = data_sel;   // 全部采用同一数据段
   11132:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11135:	8b 45 08             	mov    0x8(%ebp),%eax
   11138:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
   1113e:	8b 45 08             	mov    0x8(%ebp),%eax
   11141:	8b 90 a0 02 00 00    	mov    0x2a0(%eax),%edx
   11147:	8b 45 08             	mov    0x8(%ebp),%eax
   1114a:	89 90 9c 02 00 00    	mov    %edx,0x29c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
   11150:	8b 45 08             	mov    0x8(%ebp),%eax
   11153:	8b 90 9c 02 00 00    	mov    0x29c(%eax),%edx
   11159:	8b 45 08             	mov    0x8(%ebp),%eax
   1115c:	89 90 98 02 00 00    	mov    %edx,0x298(%eax)
   11162:	8b 45 08             	mov    0x8(%ebp),%eax
   11165:	8b 90 98 02 00 00    	mov    0x298(%eax),%edx
   1116b:	8b 45 08             	mov    0x8(%ebp),%eax
   1116e:	89 90 94 02 00 00    	mov    %edx,0x294(%eax)
   11174:	8b 45 08             	mov    0x8(%ebp),%eax
   11177:	8b 90 94 02 00 00    	mov    0x294(%eax),%edx
   1117d:	8b 45 08             	mov    0x8(%ebp),%eax
   11180:	89 90 8c 02 00 00    	mov    %edx,0x28c(%eax)
    task->tss.cs = code_sel; 
   11186:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11189:	8b 45 08             	mov    0x8(%ebp),%eax
   1118c:	89 90 90 02 00 00    	mov    %edx,0x290(%eax)
    task->tss.iomap = 0;
   11192:	8b 45 08             	mov    0x8(%ebp),%eax
   11195:	c7 80 a8 02 00 00 00 	movl   $0x0,0x2a8(%eax)
   1119c:	00 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   1119f:	e8 0e f6 ff ff       	call   107b2 <memory_create_uvm>
   111a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) {
   111a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111ab:	74 25                	je     111d2 <tss_init+0x1a3>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   111ad:	8b 45 08             	mov    0x8(%ebp),%eax
   111b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111b3:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)

    task->tss_sel = tss_sel;
   111b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111bc:	89 c2                	mov    %eax,%edx
   111be:	8b 45 08             	mov    0x8(%ebp),%eax
   111c1:	66 89 90 ac 02 00 00 	mov    %dx,0x2ac(%eax)
    return 0;
   111c8:	b8 00 00 00 00       	mov    $0x0,%eax
   111cd:	eb 2b                	jmp    111fa <tss_init+0x1cb>
        goto tss_init_failed;
   111cf:	90                   	nop
   111d0:	eb 01                	jmp    111d3 <tss_init+0x1a4>
        goto tss_init_failed;
   111d2:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   111d3:	83 ec 0c             	sub    $0xc,%esp
   111d6:	ff 75 ec             	pushl  -0x14(%ebp)
   111d9:	e8 1e 14 00 00       	call   125fc <gdt_free_sel>
   111de:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) {
   111e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111e5:	74 0e                	je     111f5 <tss_init+0x1c6>
        memory_free_page(kernel_stack);
   111e7:	83 ec 0c             	sub    $0xc,%esp
   111ea:	ff 75 e8             	pushl  -0x18(%ebp)
   111ed:	e8 9a fa ff ff       	call   10c8c <memory_free_page>
   111f2:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111fa:	c9                   	leave  
   111fb:	c3                   	ret    

000111fc <task_init>:

/**
 * @brief 初始化任务
 */
int task_init (task_t *task, const char * name, int flag, uint32_t entry, uint32_t esp) {
   111fc:	55                   	push   %ebp
   111fd:	89 e5                	mov    %esp,%ebp
   111ff:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   11202:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11206:	75 19                	jne    11221 <task_init+0x25>
   11208:	68 87 8d 01 00       	push   $0x18d87
   1120d:	68 20 8f 01 00       	push   $0x18f20
   11212:	6a 59                	push   $0x59
   11214:	68 9c 8d 01 00       	push   $0x18d9c
   11219:	e8 81 74 00 00       	call   1869f <panic>
   1121e:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   11221:	ff 75 18             	pushl  0x18(%ebp)
   11224:	ff 75 14             	pushl  0x14(%ebp)
   11227:	ff 75 10             	pushl  0x10(%ebp)
   1122a:	ff 75 08             	pushl  0x8(%ebp)
   1122d:	e8 fd fd ff ff       	call   1102f <tss_init>
   11232:	83 c4 10             	add    $0x10,%esp
   11235:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   11238:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1123c:	79 18                	jns    11256 <task_init+0x5a>
        log_printf("init task failed.\n");
   1123e:	83 ec 0c             	sub    $0xc,%esp
   11241:	68 e9 8d 01 00       	push   $0x18de9
   11246:	e8 b1 76 00 00       	call   188fc <log_printf>
   1124b:	83 c4 10             	add    $0x10,%esp
        return err;
   1124e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11251:	e9 f0 00 00 00       	jmp    11346 <task_init+0x14a>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11256:	8b 45 08             	mov    0x8(%ebp),%eax
   11259:	83 c0 04             	add    $0x4,%eax
   1125c:	83 ec 04             	sub    $0x4,%esp
   1125f:	6a 20                	push   $0x20
   11261:	ff 75 0c             	pushl  0xc(%ebp)
   11264:	50                   	push   %eax
   11265:	e8 70 6f 00 00       	call   181da <kernel_strncpy>
   1126a:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1126d:	8b 45 08             	mov    0x8(%ebp),%eax
   11270:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11276:	8b 45 08             	mov    0x8(%ebp),%eax
   11279:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->time_slice = TASK_TIME_SLICE_DEFAULT;
   11280:	8b 45 08             	mov    0x8(%ebp),%eax
   11283:	c7 40 3c 0a 00 00 00 	movl   $0xa,0x3c(%eax)
    task->slice_ticks = task->time_slice;
   1128a:	8b 45 08             	mov    0x8(%ebp),%eax
   1128d:	8b 50 3c             	mov    0x3c(%eax),%edx
   11290:	8b 45 08             	mov    0x8(%ebp),%eax
   11293:	89 50 40             	mov    %edx,0x40(%eax)
    task->parent = (task_t *)0;
   11296:	8b 45 08             	mov    0x8(%ebp),%eax
   11299:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   112a0:	8b 45 08             	mov    0x8(%ebp),%eax
   112a3:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   112aa:	8b 45 08             	mov    0x8(%ebp),%eax
   112ad:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node);
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	05 c0 02 00 00       	add    $0x2c0,%eax
   112bc:	83 ec 0c             	sub    $0xc,%esp
   112bf:	50                   	push   %eax
   112c0:	e8 1e fd ff ff       	call   10fe3 <list_node_init>
   112c5:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   112c8:	8b 45 08             	mov    0x8(%ebp),%eax
   112cb:	05 b0 02 00 00       	add    $0x2b0,%eax
   112d0:	83 ec 0c             	sub    $0xc,%esp
   112d3:	50                   	push   %eax
   112d4:	e8 0a fd ff ff       	call   10fe3 <list_node_init>
   112d9:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112dc:	8b 45 08             	mov    0x8(%ebp),%eax
   112df:	05 b8 02 00 00       	add    $0x2b8,%eax
   112e4:	83 ec 0c             	sub    $0xc,%esp
   112e7:	50                   	push   %eax
   112e8:	e8 f6 fc ff ff       	call   10fe3 <list_node_init>
   112ed:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112f0:	8b 45 08             	mov    0x8(%ebp),%eax
   112f3:	83 c0 44             	add    $0x44,%eax
   112f6:	83 ec 04             	sub    $0x4,%esp
   112f9:	68 00 02 00 00       	push   $0x200
   112fe:	6a 00                	push   $0x0
   11300:	50                   	push   %eax
   11301:	e8 4c 70 00 00       	call   18352 <kernel_memset>
   11306:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   11309:	e8 03 1e 00 00       	call   13111 <irq_enter_protection>
   1130e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;   // 使用地址，能唯一
   11311:	8b 55 08             	mov    0x8(%ebp),%edx
   11314:	8b 45 08             	mov    0x8(%ebp),%eax
   11317:	89 50 24             	mov    %edx,0x24(%eax)
    list_insert_last(&task_manager.task_list, &task->all_node);
   1131a:	8b 45 08             	mov    0x8(%ebp),%eax
   1131d:	05 c0 02 00 00       	add    $0x2c0,%eax
   11322:	83 ec 08             	sub    $0x8,%esp
   11325:	50                   	push   %eax
   11326:	68 10 d0 01 00       	push   $0x1d010
   1132b:	e8 3c 74 00 00       	call   1876c <list_insert_last>
   11330:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11333:	83 ec 0c             	sub    $0xc,%esp
   11336:	ff 75 f0             	pushl  -0x10(%ebp)
   11339:	e8 eb 1d 00 00       	call   13129 <irq_leave_protection>
   1133e:	83 c4 10             	add    $0x10,%esp
    return 0;
   11341:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11346:	c9                   	leave  
   11347:	c3                   	ret    

00011348 <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t * task) {
   11348:	55                   	push   %ebp
   11349:	89 e5                	mov    %esp,%ebp
   1134b:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1134e:	e8 be 1d 00 00       	call   13111 <irq_enter_protection>
   11353:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   11356:	83 ec 0c             	sub    $0xc,%esp
   11359:	ff 75 08             	pushl  0x8(%ebp)
   1135c:	e8 a9 02 00 00       	call   1160a <task_set_ready>
   11361:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11364:	83 ec 0c             	sub    $0xc,%esp
   11367:	ff 75 f4             	pushl  -0xc(%ebp)
   1136a:	e8 ba 1d 00 00       	call   13129 <irq_leave_protection>
   1136f:	83 c4 10             	add    $0x10,%esp
}
   11372:	90                   	nop
   11373:	c9                   	leave  
   11374:	c3                   	ret    

00011375 <task_uninit>:

/**
 * @brief 任务任务初始时分配的各项资源
 */
void task_uninit (task_t * task) {
   11375:	55                   	push   %ebp
   11376:	89 e5                	mov    %esp,%ebp
   11378:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   1137b:	8b 45 08             	mov    0x8(%ebp),%eax
   1137e:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11385:	66 85 c0             	test   %ax,%ax
   11388:	74 19                	je     113a3 <task_uninit+0x2e>
        gdt_free_sel(task->tss_sel);
   1138a:	8b 45 08             	mov    0x8(%ebp),%eax
   1138d:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11394:	0f b7 c0             	movzwl %ax,%eax
   11397:	83 ec 0c             	sub    $0xc,%esp
   1139a:	50                   	push   %eax
   1139b:	e8 5c 12 00 00       	call   125fc <gdt_free_sel>
   113a0:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {
   113a3:	8b 45 08             	mov    0x8(%ebp),%eax
   113a6:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113ac:	85 c0                	test   %eax,%eax
   113ae:	74 1a                	je     113ca <task_uninit+0x55>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   113b0:	8b 45 08             	mov    0x8(%ebp),%eax
   113b3:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113b9:	2d 00 10 00 00       	sub    $0x1000,%eax
   113be:	83 ec 0c             	sub    $0xc,%esp
   113c1:	50                   	push   %eax
   113c2:	e8 c5 f8 ff ff       	call   10c8c <memory_free_page>
   113c7:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   113ca:	8b 45 08             	mov    0x8(%ebp),%eax
   113cd:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113d3:	85 c0                	test   %eax,%eax
   113d5:	74 15                	je     113ec <task_uninit+0x77>
        memory_destroy_uvm(task->tss.cr3);
   113d7:	8b 45 08             	mov    0x8(%ebp),%eax
   113da:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113e0:	83 ec 0c             	sub    $0xc,%esp
   113e3:	50                   	push   %eax
   113e4:	e8 4e f4 ff ff       	call   10837 <memory_destroy_uvm>
   113e9:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113ec:	83 ec 04             	sub    $0x4,%esp
   113ef:	68 c8 02 00 00       	push   $0x2c8
   113f4:	6a 00                	push   $0x0
   113f6:	ff 75 08             	pushl  0x8(%ebp)
   113f9:	e8 54 6f 00 00       	call   18352 <kernel_memset>
   113fe:	83 c4 10             	add    $0x10,%esp
}
   11401:	90                   	nop
   11402:	c9                   	leave  
   11403:	c3                   	ret    

00011404 <task_switch_from_to>:
void simple_switch (uint32_t ** from, uint32_t * to);

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to (task_t * from, task_t * to) {
   11404:	55                   	push   %ebp
   11405:	89 e5                	mov    %esp,%ebp
   11407:	83 ec 08             	sub    $0x8,%esp
     switch_to_tss(to->tss_sel);
   1140a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1140d:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11414:	0f b7 c0             	movzwl %ax,%eax
   11417:	83 ec 0c             	sub    $0xc,%esp
   1141a:	50                   	push   %eax
   1141b:	e8 16 13 00 00       	call   12736 <switch_to_tss>
   11420:	83 c4 10             	add    $0x10,%esp
    //simple_switch(&from->stack, to->stack);
}
   11423:	90                   	nop
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <task_first_init>:
 * 将init加载地址设置成和内核一起的，运行地址设置成用户进程运行的高处。
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init (void) {
   11426:	55                   	push   %ebp
   11427:	89 e5                	mov    %esp,%ebp
   11429:	83 ec 18             	sub    $0x18,%esp

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1142c:	ba 47 04 06 00       	mov    $0x60447,%edx
   11431:	b8 c0 00 06 00       	mov    $0x600c0,%eax
   11436:	29 c2                	sub    %eax,%edx
   11438:	89 d0                	mov    %edx,%eax
   1143a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1143d:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11444:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11447:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1144a:	72 1c                	jb     11468 <task_first_init+0x42>
   1144c:	68 fc 8d 01 00       	push   $0x18dfc
   11451:	68 2c 8f 01 00       	push   $0x18f2c
   11456:	68 b1 00 00 00       	push   $0xb1
   1145b:	68 9c 8d 01 00       	push   $0x18d9c
   11460:	e8 3a 72 00 00       	call   1869f <panic>
   11465:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   11468:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // 第一个任务代码量小一些，好和栈放在1个页面呢
    // 这样就不要立即考虑还要给栈分配空间的问题
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   1146f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11472:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11475:	01 d0                	add    %edx,%eax
   11477:	83 ec 0c             	sub    $0xc,%esp
   1147a:	50                   	push   %eax
   1147b:	ff 75 ec             	pushl  -0x14(%ebp)
   1147e:	6a 00                	push   $0x0
   11480:	68 13 8e 01 00       	push   $0x18e13
   11485:	68 28 d0 01 00       	push   $0x1d028
   1148a:	e8 6d fd ff ff       	call   111fc <task_init>
   1148f:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task;  // 这里不对
   11492:	b8 47 04 06 00       	mov    $0x60447,%eax
   11497:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   1149c:	a1 54 d0 01 00       	mov    0x1d054,%eax
   114a1:	a3 58 d0 01 00       	mov    %eax,0x1d058
    task_manager.curr_task = &task_manager.first_task;
   114a6:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   114ad:	d0 01 00 

    // 更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   114b0:	a1 88 d2 01 00       	mov    0x1d288,%eax
   114b5:	83 ec 0c             	sub    $0xc,%esp
   114b8:	50                   	push   %eax
   114b9:	e8 60 fb ff ff       	call   1101e <mmu_set_page_dir>
   114be:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start,  alloc_size, PTE_P | PTE_W | PTE_U);
   114c1:	83 ec 04             	sub    $0x4,%esp
   114c4:	6a 07                	push   $0x7
   114c6:	ff 75 f0             	pushl  -0x10(%ebp)
   114c9:	ff 75 ec             	pushl  -0x14(%ebp)
   114cc:	e8 7c f7 ff ff       	call   10c4d <memory_alloc_page_for>
   114d1:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   114d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114da:	83 ec 04             	sub    $0x4,%esp
   114dd:	52                   	push   %edx
   114de:	68 c0 00 06 00       	push   $0x600c0
   114e3:	50                   	push   %eax
   114e4:	e8 1a 6e 00 00       	call   18303 <kernel_memcpy>
   114e9:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	68 28 d0 01 00       	push   $0x1d028
   114f4:	e8 4f fe ff ff       	call   11348 <task_start>
   114f9:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   114fc:	0f b7 05 d4 d2 01 00 	movzwl 0x1d2d4,%eax
   11503:	0f b7 c0             	movzwl %ax,%eax
   11506:	83 ec 0c             	sub    $0xc,%esp
   11509:	50                   	push   %eax
   1150a:	e8 c8 fa ff ff       	call   10fd7 <write_tr>
   1150f:	83 c4 10             	add    $0x10,%esp
}
   11512:	90                   	nop
   11513:	c9                   	leave  
   11514:	c3                   	ret    

00011515 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t * task_first_task (void) {
   11515:	55                   	push   %ebp
   11516:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11518:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   1151d:	5d                   	pop    %ebp
   1151e:	c3                   	ret    

0001151f <idle_task_entry>:

/**
 * @brief 空闲任务
 */
static void idle_task_entry (void) {
   1151f:	55                   	push   %ebp
   11520:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   11522:	e8 a9 fa ff ff       	call   10fd0 <hlt>
   11527:	eb f9                	jmp    11522 <idle_task_entry+0x3>

00011529 <task_manager_init>:
}

/**
 * @brief 任务管理器初始化
 */
void task_manager_init (void) {
   11529:	55                   	push   %ebp
   1152a:	89 e5                	mov    %esp,%ebp
   1152c:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1152f:	83 ec 04             	sub    $0x4,%esp
   11532:	68 00 64 01 00       	push   $0x16400
   11537:	6a 00                	push   $0x0
   11539:	68 c0 e5 01 00       	push   $0x1e5c0
   1153e:	e8 0f 6e 00 00       	call   18352 <kernel_memset>
   11543:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11546:	83 ec 0c             	sub    $0xc,%esp
   11549:	68 c0 49 03 00       	push   $0x349c0
   1154e:	e8 b4 66 00 00       	call   17c07 <mutex_init>
   11553:	83 c4 10             	add    $0x10,%esp

    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   11556:	e8 da 10 00 00       	call   12635 <gdt_alloc_desc>
   1155b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1155e:	68 f2 40 00 00       	push   $0x40f2
   11563:	6a ff                	push   $0xffffffff
   11565:	6a 00                	push   $0x0
   11567:	ff 75 f4             	pushl  -0xc(%ebp)
   1156a:	e8 c0 0f 00 00       	call   1252f <segment_desc_set>
   1156f:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   11572:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11575:	a3 bc d5 01 00       	mov    %eax,0x1d5bc

    sel = gdt_alloc_desc();
   1157a:	e8 b6 10 00 00       	call   12635 <gdt_alloc_desc>
   1157f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11582:	68 fa 40 00 00       	push   $0x40fa
   11587:	6a ff                	push   $0xffffffff
   11589:	6a 00                	push   $0x0
   1158b:	ff 75 f4             	pushl  -0xc(%ebp)
   1158e:	e8 9c 0f 00 00       	call   1252f <segment_desc_set>
   11593:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11596:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11599:	a3 b8 d5 01 00       	mov    %eax,0x1d5b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   1159e:	83 ec 0c             	sub    $0xc,%esp
   115a1:	68 04 d0 01 00       	push   $0x1d004
   115a6:	e8 3d 71 00 00       	call   186e8 <list_init>
   115ab:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   115ae:	83 ec 0c             	sub    $0xc,%esp
   115b1:	68 10 d0 01 00       	push   $0x1d010
   115b6:	e8 2d 71 00 00       	call   186e8 <list_init>
   115bb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   115be:	83 ec 0c             	sub    $0xc,%esp
   115c1:	68 1c d0 01 00       	push   $0x1d01c
   115c6:	e8 1d 71 00 00       	call   186e8 <list_init>
   115cb:	83 c4 10             	add    $0x10,%esp

    // 空闲任务初始化
    task_init(&task_manager.idle_task,
   115ce:	b8 1f 15 01 00       	mov    $0x1151f,%eax
   115d3:	83 ec 0c             	sub    $0xc,%esp
   115d6:	6a 00                	push   $0x0
   115d8:	50                   	push   %eax
   115d9:	6a 01                	push   $0x1
   115db:	68 1e 8e 01 00       	push   $0x18e1e
   115e0:	68 f0 d2 01 00       	push   $0x1d2f0
   115e5:	e8 12 fc ff ff       	call   111fc <task_init>
   115ea:	83 c4 20             	add    $0x20,%esp
                "idle task",
                TASK_FLAG_SYSTEM,
                (uint32_t)idle_task_entry,
                0);     // 运行于内核模式，无需指定特权级3的栈
    task_manager.curr_task = (task_t *)0;
   115ed:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   115f4:	00 00 00 
    task_start(&task_manager.idle_task);
   115f7:	83 ec 0c             	sub    $0xc,%esp
   115fa:	68 f0 d2 01 00       	push   $0x1d2f0
   115ff:	e8 44 fd ff ff       	call   11348 <task_start>
   11604:	83 c4 10             	add    $0x10,%esp
}
   11607:	90                   	nop
   11608:	c9                   	leave  
   11609:	c3                   	ret    

0001160a <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task) {
   1160a:	55                   	push   %ebp
   1160b:	89 e5                	mov    %esp,%ebp
   1160d:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   11610:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11617:	74 22                	je     1163b <task_set_ready+0x31>
        list_insert_last(&task_manager.ready_list, &task->run_node);
   11619:	8b 45 08             	mov    0x8(%ebp),%eax
   1161c:	05 b0 02 00 00       	add    $0x2b0,%eax
   11621:	83 ec 08             	sub    $0x8,%esp
   11624:	50                   	push   %eax
   11625:	68 04 d0 01 00       	push   $0x1d004
   1162a:	e8 3d 71 00 00       	call   1876c <list_insert_last>
   1162f:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   11632:	8b 45 08             	mov    0x8(%ebp),%eax
   11635:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   1163b:	90                   	nop
   1163c:	c9                   	leave  
   1163d:	c3                   	ret    

0001163e <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block (task_t *task) {
   1163e:	55                   	push   %ebp
   1163f:	89 e5                	mov    %esp,%ebp
   11641:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   11644:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   1164b:	74 19                	je     11666 <task_set_block+0x28>
        list_remove(&task_manager.ready_list, &task->run_node);
   1164d:	8b 45 08             	mov    0x8(%ebp),%eax
   11650:	05 b0 02 00 00       	add    $0x2b0,%eax
   11655:	83 ec 08             	sub    $0x8,%esp
   11658:	50                   	push   %eax
   11659:	68 04 d0 01 00       	push   $0x1d004
   1165e:	e8 e5 71 00 00       	call   18848 <list_remove>
   11663:	83 c4 10             	add    $0x10,%esp
    }
}
   11666:	90                   	nop
   11667:	c9                   	leave  
   11668:	c3                   	ret    

00011669 <task_next_run>:
/**
 * @brief 获取下一将要运行的任务
 */
static task_t * task_next_run (void) {
   11669:	55                   	push   %ebp
   1166a:	89 e5                	mov    %esp,%ebp
   1166c:	83 ec 10             	sub    $0x10,%esp
    // 如果没有任务，则运行空闲任务
    if (list_count(&task_manager.ready_list) == 0) {
   1166f:	68 04 d0 01 00       	push   $0x1d004
   11674:	e8 90 f9 ff ff       	call   11009 <list_count>
   11679:	83 c4 04             	add    $0x4,%esp
   1167c:	85 c0                	test   %eax,%eax
   1167e:	75 07                	jne    11687 <task_next_run+0x1e>
        return &task_manager.idle_task;
   11680:	b8 f0 d2 01 00       	mov    $0x1d2f0,%eax
   11685:	eb 25                	jmp    116ac <task_next_run+0x43>
    }
    
    // 普通任务
    list_node_t * task_node = list_first(&task_manager.ready_list);
   11687:	68 04 d0 01 00       	push   $0x1d004
   1168c:	e8 83 f9 ff ff       	call   11014 <list_first>
   11691:	83 c4 04             	add    $0x4,%esp
   11694:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11697:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1169b:	74 0a                	je     116a7 <task_next_run+0x3e>
   1169d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   116a0:	2d b0 02 00 00       	sub    $0x2b0,%eax
   116a5:	eb 05                	jmp    116ac <task_next_run+0x43>
   116a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116ac:	c9                   	leave  
   116ad:	c3                   	ret    

000116ae <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks) {
   116ae:	55                   	push   %ebp
   116af:	89 e5                	mov    %esp,%ebp
   116b1:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0) {
   116b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116b8:	74 2d                	je     116e7 <task_set_sleep+0x39>
        return;
    }

    task->sleep_ticks = ticks;
   116ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   116bd:	8b 45 08             	mov    0x8(%ebp),%eax
   116c0:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   116c3:	8b 45 08             	mov    0x8(%ebp),%eax
   116c6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	05 b0 02 00 00       	add    $0x2b0,%eax
   116d4:	83 ec 08             	sub    $0x8,%esp
   116d7:	50                   	push   %eax
   116d8:	68 1c d0 01 00       	push   $0x1d01c
   116dd:	e8 8a 70 00 00       	call   1876c <list_insert_last>
   116e2:	83 c4 10             	add    $0x10,%esp
   116e5:	eb 01                	jmp    116e8 <task_set_sleep+0x3a>
        return;
   116e7:	90                   	nop
}
   116e8:	c9                   	leave  
   116e9:	c3                   	ret    

000116ea <task_set_wakeup>:
/**
 * @brief 将任务从延时队列移除
 * 
 * @param task 
 */
void task_set_wakeup (task_t *task) {
   116ea:	55                   	push   %ebp
   116eb:	89 e5                	mov    %esp,%ebp
   116ed:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   116f0:	8b 45 08             	mov    0x8(%ebp),%eax
   116f3:	05 b0 02 00 00       	add    $0x2b0,%eax
   116f8:	83 ec 08             	sub    $0x8,%esp
   116fb:	50                   	push   %eax
   116fc:	68 1c d0 01 00       	push   $0x1d01c
   11701:	e8 42 71 00 00       	call   18848 <list_remove>
   11706:	83 c4 10             	add    $0x10,%esp
}
   11709:	90                   	nop
   1170a:	c9                   	leave  
   1170b:	c3                   	ret    

0001170c <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t * task_current (void) {
   1170c:	55                   	push   %ebp
   1170d:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1170f:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   11714:	5d                   	pop    %ebp
   11715:	c3                   	ret    

00011716 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t * task_file (int fd) {
   11716:	55                   	push   %ebp
   11717:	89 e5                	mov    %esp,%ebp
   11719:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   1171c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11720:	78 1f                	js     11741 <task_file+0x2b>
   11722:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11726:	7f 19                	jg     11741 <task_file+0x2b>
        file_t * file = task_current()->file_table[fd];
   11728:	e8 df ff ff ff       	call   1170c <task_current>
   1172d:	89 c2                	mov    %eax,%edx
   1172f:	8b 45 08             	mov    0x8(%ebp),%eax
   11732:	83 c0 10             	add    $0x10,%eax
   11735:	8b 44 82 04          	mov    0x4(%edx,%eax,4),%eax
   11739:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   1173c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1173f:	eb 05                	jmp    11746 <task_file+0x30>
    }

    return (file_t *)0;
   11741:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11746:	c9                   	leave  
   11747:	c3                   	ret    

00011748 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd (file_t * file) {
   11748:	55                   	push   %ebp
   11749:	89 e5                	mov    %esp,%ebp
   1174b:	83 ec 10             	sub    $0x10,%esp
    task_t * task = task_current();
   1174e:	e8 b9 ff ff ff       	call   1170c <task_current>
   11753:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11756:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1175d:	eb 2f                	jmp    1178e <task_alloc_fd+0x46>
        file_t * p = task->file_table[i];
   1175f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11762:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11765:	83 c2 10             	add    $0x10,%edx
   11768:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   1176c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0) {
   1176f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11773:	75 15                	jne    1178a <task_alloc_fd+0x42>
            task->file_table[i] = file;
   11775:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11778:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1177b:	8d 4a 10             	lea    0x10(%edx),%ecx
   1177e:	8b 55 08             	mov    0x8(%ebp),%edx
   11781:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   11785:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11788:	eb 0f                	jmp    11799 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   1178a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1178e:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   11792:	7e cb                	jle    1175f <task_alloc_fd+0x17>
        }
    }

    return -1;
   11794:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11799:	c9                   	leave  
   1179a:	c3                   	ret    

0001179b <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd (int fd) {
   1179b:	55                   	push   %ebp
   1179c:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   1179e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117a2:	78 1b                	js     117bf <task_remove_fd+0x24>
   117a4:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117a8:	7f 15                	jg     117bf <task_remove_fd+0x24>
        task_current()->file_table[fd] = (file_t *)0;
   117aa:	e8 5d ff ff ff       	call   1170c <task_current>
   117af:	89 c2                	mov    %eax,%edx
   117b1:	8b 45 08             	mov    0x8(%ebp),%eax
   117b4:	83 c0 10             	add    $0x10,%eax
   117b7:	c7 44 82 04 00 00 00 	movl   $0x0,0x4(%edx,%eax,4)
   117be:	00 
    }
}
   117bf:	90                   	nop
   117c0:	5d                   	pop    %ebp
   117c1:	c3                   	ret    

000117c2 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield (void) {
   117c2:	55                   	push   %ebp
   117c3:	89 e5                	mov    %esp,%ebp
   117c5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117c8:	e8 44 19 00 00       	call   13111 <irq_enter_protection>
   117cd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   117d0:	83 ec 0c             	sub    $0xc,%esp
   117d3:	68 04 d0 01 00       	push   $0x1d004
   117d8:	e8 2c f8 ff ff       	call   11009 <list_count>
   117dd:	83 c4 10             	add    $0x10,%esp
   117e0:	83 f8 01             	cmp    $0x1,%eax
   117e3:	7e 29                	jle    1180e <sys_yield+0x4c>
        task_t * curr_task = task_current();
   117e5:	e8 22 ff ff ff       	call   1170c <task_current>
   117ea:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   117ed:	83 ec 0c             	sub    $0xc,%esp
   117f0:	ff 75 f0             	pushl  -0x10(%ebp)
   117f3:	e8 46 fe ff ff       	call   1163e <task_set_block>
   117f8:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117fb:	83 ec 0c             	sub    $0xc,%esp
   117fe:	ff 75 f0             	pushl  -0x10(%ebp)
   11801:	e8 04 fe ff ff       	call   1160a <task_set_ready>
   11806:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   11809:	e8 15 00 00 00       	call   11823 <task_dispatch>
    }
    irq_leave_protection(state);
   1180e:	83 ec 0c             	sub    $0xc,%esp
   11811:	ff 75 f4             	pushl  -0xc(%ebp)
   11814:	e8 10 19 00 00       	call   13129 <irq_leave_protection>
   11819:	83 c4 10             	add    $0x10,%esp

    return 0;
   1181c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11821:	c9                   	leave  
   11822:	c3                   	ret    

00011823 <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch (void) {
   11823:	55                   	push   %ebp
   11824:	89 e5                	mov    %esp,%ebp
   11826:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   11829:	e8 3b fe ff ff       	call   11669 <task_next_run>
   1182e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task) {
   11831:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11836:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11839:	74 21                	je     1185c <task_dispatch+0x39>
        task_t * from = task_manager.curr_task;
   1183b:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11840:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;
   11843:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11846:	a3 00 d0 01 00       	mov    %eax,0x1d000
        task_switch_from_to(from, to);
   1184b:	83 ec 08             	sub    $0x8,%esp
   1184e:	ff 75 f4             	pushl  -0xc(%ebp)
   11851:	ff 75 f0             	pushl  -0x10(%ebp)
   11854:	e8 ab fb ff ff       	call   11404 <task_switch_from_to>
   11859:	83 c4 10             	add    $0x10,%esp
    }
}
   1185c:	90                   	nop
   1185d:	c9                   	leave  
   1185e:	c3                   	ret    

0001185f <task_time_tick>:

/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick (void) {
   1185f:	55                   	push   %ebp
   11860:	89 e5                	mov    %esp,%ebp
   11862:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   11865:	e8 a2 fe ff ff       	call   1170c <task_current>
   1186a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 时间片的处理
    irq_state_t state = irq_enter_protection();
   1186d:	e8 9f 18 00 00       	call   13111 <irq_enter_protection>
   11872:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   11875:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11878:	8b 40 40             	mov    0x40(%eax),%eax
   1187b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1187e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11881:	89 50 40             	mov    %edx,0x40(%eax)
   11884:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11887:	8b 40 40             	mov    0x40(%eax),%eax
   1188a:	85 c0                	test   %eax,%eax
   1188c:	75 28                	jne    118b6 <task_time_tick+0x57>
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_slice;
   1188e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11891:	8b 50 3c             	mov    0x3c(%eax),%edx
   11894:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11897:	89 50 40             	mov    %edx,0x40(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   1189a:	83 ec 0c             	sub    $0xc,%esp
   1189d:	ff 75 f0             	pushl  -0x10(%ebp)
   118a0:	e8 99 fd ff ff       	call   1163e <task_set_block>
   118a5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   118a8:	83 ec 0c             	sub    $0xc,%esp
   118ab:	ff 75 f0             	pushl  -0x10(%ebp)
   118ae:	e8 57 fd ff ff       	call   1160a <task_set_ready>
   118b3:	83 c4 10             	add    $0x10,%esp
    }
    
    // 睡眠处理
    list_node_t * curr = list_first(&task_manager.sleep_list);
   118b6:	83 ec 0c             	sub    $0xc,%esp
   118b9:	68 1c d0 01 00       	push   $0x1d01c
   118be:	e8 51 f7 ff ff       	call   11014 <list_first>
   118c3:	83 c4 10             	add    $0x10,%esp
   118c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   118c9:	eb 64                	jmp    1192f <task_time_tick+0xd0>
        list_node_t * next = list_node_next(curr);
   118cb:	83 ec 0c             	sub    $0xc,%esp
   118ce:	ff 75 f4             	pushl  -0xc(%ebp)
   118d1:	e8 28 f7 ff ff       	call   10ffe <list_node_next>
   118d6:	83 c4 10             	add    $0x10,%esp
   118d9:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t * task = list_node_parent(curr, task_t, run_node);
   118dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118e0:	74 0a                	je     118ec <task_time_tick+0x8d>
   118e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e5:	2d b0 02 00 00       	sub    $0x2b0,%eax
   118ea:	eb 05                	jmp    118f1 <task_time_tick+0x92>
   118ec:	b8 00 00 00 00       	mov    $0x0,%eax
   118f1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   118f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118f7:	8b 40 38             	mov    0x38(%eax),%eax
   118fa:	8d 50 ff             	lea    -0x1(%eax),%edx
   118fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11900:	89 50 38             	mov    %edx,0x38(%eax)
   11903:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11906:	8b 40 38             	mov    0x38(%eax),%eax
   11909:	85 c0                	test   %eax,%eax
   1190b:	75 1c                	jne    11929 <task_time_tick+0xca>
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   1190d:	83 ec 0c             	sub    $0xc,%esp
   11910:	ff 75 e4             	pushl  -0x1c(%ebp)
   11913:	e8 d2 fd ff ff       	call   116ea <task_set_wakeup>
   11918:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   1191b:	83 ec 0c             	sub    $0xc,%esp
   1191e:	ff 75 e4             	pushl  -0x1c(%ebp)
   11921:	e8 e4 fc ff ff       	call   1160a <task_set_ready>
   11926:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11929:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1192c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   1192f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11933:	75 96                	jne    118cb <task_time_tick+0x6c>
    }

    task_dispatch();
   11935:	e8 e9 fe ff ff       	call   11823 <task_dispatch>
    irq_leave_protection(state);
   1193a:	83 ec 0c             	sub    $0xc,%esp
   1193d:	ff 75 ec             	pushl  -0x14(%ebp)
   11940:	e8 e4 17 00 00       	call   13129 <irq_leave_protection>
   11945:	83 c4 10             	add    $0x10,%esp
}
   11948:	90                   	nop
   11949:	c9                   	leave  
   1194a:	c3                   	ret    

0001194b <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t * alloc_task (void) {
   1194b:	55                   	push   %ebp
   1194c:	89 e5                	mov    %esp,%ebp
   1194e:	83 ec 18             	sub    $0x18,%esp
    task_t * task = (task_t *)0;
   11951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   11958:	83 ec 0c             	sub    $0xc,%esp
   1195b:	68 c0 49 03 00       	push   $0x349c0
   11960:	e8 d0 62 00 00       	call   17c35 <mutex_lock>
   11965:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++) {
   11968:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1196f:	eb 28                	jmp    11999 <alloc_task+0x4e>
        task_t * curr = task_table + i;
   11971:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11974:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1197a:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1197f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0) {
   11982:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11985:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11989:	84 c0                	test   %al,%al
   1198b:	75 08                	jne    11995 <alloc_task+0x4a>
            task = curr;
   1198d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11990:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11993:	eb 0a                	jmp    1199f <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   11995:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11999:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   1199d:	7e d2                	jle    11971 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   1199f:	83 ec 0c             	sub    $0xc,%esp
   119a2:	68 c0 49 03 00       	push   $0x349c0
   119a7:	e8 20 63 00 00       	call   17ccc <mutex_unlock>
   119ac:	83 c4 10             	add    $0x10,%esp

    return task;
   119af:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   119b2:	c9                   	leave  
   119b3:	c3                   	ret    

000119b4 <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task (task_t * task) {
   119b4:	55                   	push   %ebp
   119b5:	89 e5                	mov    %esp,%ebp
   119b7:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   119ba:	83 ec 0c             	sub    $0xc,%esp
   119bd:	68 c0 49 03 00       	push   $0x349c0
   119c2:	e8 6e 62 00 00       	call   17c35 <mutex_lock>
   119c7:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   119ca:	8b 45 08             	mov    0x8(%ebp),%eax
   119cd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   119d1:	83 ec 0c             	sub    $0xc,%esp
   119d4:	68 c0 49 03 00       	push   $0x349c0
   119d9:	e8 ee 62 00 00       	call   17ccc <mutex_unlock>
   119de:	83 c4 10             	add    $0x10,%esp
}
   119e1:	90                   	nop
   119e2:	c9                   	leave  
   119e3:	c3                   	ret    

000119e4 <sys_msleep>:
/**
 * @brief 任务进入睡眠状态
 * 
 * @param ms 
 */
void sys_msleep (uint32_t ms) {
   119e4:	55                   	push   %ebp
   119e5:	89 e5                	mov    %esp,%ebp
   119e7:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS) {
   119ea:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   119ee:	77 07                	ja     119f7 <sys_msleep+0x13>
        ms = OS_TICK_MS;
   119f0:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   119f7:	e8 15 17 00 00       	call   13111 <irq_enter_protection>
   119fc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   119ff:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a04:	83 ec 0c             	sub    $0xc,%esp
   11a07:	50                   	push   %eax
   11a08:	e8 31 fc ff ff       	call   1163e <task_set_block>
   11a0d:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1))/ OS_TICK_MS);
   11a10:	8b 45 08             	mov    0x8(%ebp),%eax
   11a13:	83 c0 09             	add    $0x9,%eax
   11a16:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a1b:	f7 e2                	mul    %edx
   11a1d:	c1 ea 03             	shr    $0x3,%edx
   11a20:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a25:	83 ec 08             	sub    $0x8,%esp
   11a28:	52                   	push   %edx
   11a29:	50                   	push   %eax
   11a2a:	e8 7f fc ff ff       	call   116ae <task_set_sleep>
   11a2f:	83 c4 10             	add    $0x10,%esp
    
    // 进行一次调度
    task_dispatch();
   11a32:	e8 ec fd ff ff       	call   11823 <task_dispatch>

    irq_leave_protection(state);
   11a37:	83 ec 0c             	sub    $0xc,%esp
   11a3a:	ff 75 f4             	pushl  -0xc(%ebp)
   11a3d:	e8 e7 16 00 00       	call   13129 <irq_leave_protection>
   11a42:	83 c4 10             	add    $0x10,%esp
}
   11a45:	90                   	nop
   11a46:	c9                   	leave  
   11a47:	c3                   	ret    

00011a48 <copy_opened_files>:


/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t * child_task) {
   11a48:	55                   	push   %ebp
   11a49:	89 e5                	mov    %esp,%ebp
   11a4b:	83 ec 18             	sub    $0x18,%esp
    task_t * parent = task_current();
   11a4e:	e8 b9 fc ff ff       	call   1170c <task_current>
   11a53:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a5d:	eb 42                	jmp    11aa1 <copy_opened_files+0x59>
        file_t * file = parent->file_table[i];
   11a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a62:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a65:	83 c2 10             	add    $0x10,%edx
   11a68:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11a6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file) {
   11a6f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a73:	74 28                	je     11a9d <copy_opened_files+0x55>
            file_inc_ref(file);
   11a75:	83 ec 0c             	sub    $0xc,%esp
   11a78:	ff 75 ec             	pushl  -0x14(%ebp)
   11a7b:	e8 ca 53 00 00       	call   16e4a <file_inc_ref>
   11a80:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   11a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a86:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a89:	83 c2 10             	add    $0x10,%edx
   11a8c:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
   11a90:	8b 45 08             	mov    0x8(%ebp),%eax
   11a93:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11a96:	83 c1 10             	add    $0x10,%ecx
   11a99:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a9d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11aa1:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11aa5:	7e b8                	jle    11a5f <copy_opened_files+0x17>
        }
    }
}
   11aa7:	90                   	nop
   11aa8:	c9                   	leave  
   11aa9:	c3                   	ret    

00011aaa <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork (void) {
   11aaa:	55                   	push   %ebp
   11aab:	89 e5                	mov    %esp,%ebp
   11aad:	83 ec 28             	sub    $0x28,%esp
    task_t * parent_task = task_current();
   11ab0:	e8 57 fc ff ff       	call   1170c <task_current>
   11ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 分配任务结构
    task_t * child_task = alloc_task();
   11ab8:	e8 8e fe ff ff       	call   1194b <alloc_task>
   11abd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0) {
   11ac0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ac4:	0f 84 4f 01 00 00    	je     11c19 <sys_fork+0x16f>
        goto fork_failed;
    }

    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11aca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11acd:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11ad3:	83 e8 58             	sub    $0x58,%eax
   11ad6:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT);
   11ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11adc:	8b 40 50             	mov    0x50(%eax),%eax
   11adf:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
   11ae2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae5:	8b 40 34             	mov    0x34(%eax),%eax
   11ae8:	89 c1                	mov    %eax,%ecx
   11aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11aed:	83 c0 04             	add    $0x4,%eax
   11af0:	83 ec 0c             	sub    $0xc,%esp
   11af3:	52                   	push   %edx
   11af4:	51                   	push   %ecx
   11af5:	6a 00                	push   $0x0
   11af7:	50                   	push   %eax
   11af8:	ff 75 f0             	pushl  -0x10(%ebp)
   11afb:	e8 fc f6 ff ff       	call   111fc <task_init>
   11b00:	83 c4 20             	add    $0x20,%esp
   11b03:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11b06:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b0a:	0f 88 0c 01 00 00    	js     11c1c <sys_fork+0x172>
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11b10:	83 ec 0c             	sub    $0xc,%esp
   11b13:	ff 75 f0             	pushl  -0x10(%ebp)
   11b16:	e8 2d ff ff ff       	call   11a48 <copy_opened_files>
   11b1b:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t * tss = &child_task->tss;
   11b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b21:	05 44 02 00 00       	add    $0x244,%eax
   11b26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   11b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b2c:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11b33:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b36:	8b 40 24             	mov    0x24(%eax),%eax
   11b39:	89 c2                	mov    %eax,%edx
   11b3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b3e:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b41:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b44:	8b 40 2c             	mov    0x2c(%eax),%eax
   11b47:	89 c2                	mov    %eax,%edx
   11b49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b4c:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b52:	8b 40 28             	mov    0x28(%eax),%eax
   11b55:	89 c2                	mov    %eax,%edx
   11b57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b5a:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11b5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b60:	8b 40 18             	mov    0x18(%eax),%eax
   11b63:	89 c2                	mov    %eax,%edx
   11b65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b68:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b6e:	8b 40 14             	mov    0x14(%eax),%eax
   11b71:	89 c2                	mov    %eax,%edx
   11b73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b76:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b7c:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b7f:	89 c2                	mov    %eax,%edx
   11b81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b84:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11b87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b8a:	8b 40 38             	mov    0x38(%eax),%eax
   11b8d:	89 c2                	mov    %eax,%edx
   11b8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b92:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b95:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b98:	8b 40 10             	mov    0x10(%eax),%eax
   11b9b:	89 c2                	mov    %eax,%edx
   11b9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ba0:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ba3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ba6:	8b 40 0c             	mov    0xc(%eax),%eax
   11ba9:	89 c2                	mov    %eax,%edx
   11bab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bae:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11bb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bb4:	8b 40 08             	mov    0x8(%eax),%eax
   11bb7:	89 c2                	mov    %eax,%edx
   11bb9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bbc:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11bbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bc2:	8b 40 04             	mov    0x4(%eax),%eax
   11bc5:	89 c2                	mov    %eax,%edx
   11bc7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bca:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bd0:	8b 00                	mov    (%eax),%eax
   11bd2:	89 c2                	mov    %eax,%edx
   11bd4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bd7:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11bda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bdd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11be0:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0) {
   11be3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11be6:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11bec:	83 ec 0c             	sub    $0xc,%esp
   11bef:	50                   	push   %eax
   11bf0:	e8 51 ed ff ff       	call   10946 <memory_copy_uvm>
   11bf5:	83 c4 10             	add    $0x10,%esp
   11bf8:	89 c2                	mov    %eax,%edx
   11bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bfd:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        goto fork_failed;
    }

    // 创建成功，返回子进程的pid
    task_start(child_task);
   11c03:	83 ec 0c             	sub    $0xc,%esp
   11c06:	ff 75 f0             	pushl  -0x10(%ebp)
   11c09:	e8 3a f7 ff ff       	call   11348 <task_start>
   11c0e:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c14:	8b 40 24             	mov    0x24(%eax),%eax
   11c17:	eb 2b                	jmp    11c44 <sys_fork+0x19a>
        goto fork_failed;
   11c19:	90                   	nop
   11c1a:	eb 01                	jmp    11c1d <sys_fork+0x173>
        goto fork_failed;
   11c1c:	90                   	nop
fork_failed:
    if (child_task) {
   11c1d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c21:	74 1c                	je     11c3f <sys_fork+0x195>
        task_uninit (child_task);
   11c23:	83 ec 0c             	sub    $0xc,%esp
   11c26:	ff 75 f0             	pushl  -0x10(%ebp)
   11c29:	e8 47 f7 ff ff       	call   11375 <task_uninit>
   11c2e:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11c31:	83 ec 0c             	sub    $0xc,%esp
   11c34:	ff 75 f0             	pushl  -0x10(%ebp)
   11c37:	e8 78 fd ff ff       	call   119b4 <free_task>
   11c3c:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11c3f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c44:	c9                   	leave  
   11c45:	c3                   	ret    

00011c46 <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr * phdr, uint32_t page_dir) {
   11c46:	55                   	push   %ebp
   11c47:	89 e5                	mov    %esp,%ebp
   11c49:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11c4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c4f:	8b 40 08             	mov    0x8(%eax),%eax
   11c52:	25 ff 0f 00 00       	and    $0xfff,%eax
   11c57:	85 c0                	test   %eax,%eax
   11c59:	74 1c                	je     11c77 <load_phdr+0x31>
   11c5b:	68 28 8e 01 00       	push   $0x18e28
   11c60:	68 3c 8f 01 00       	push   $0x18f3c
   11c65:	68 2e 02 00 00       	push   $0x22e
   11c6a:	68 9c 8d 01 00       	push   $0x18d9c
   11c6f:	e8 2b 6a 00 00       	call   1869f <panic>
   11c74:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11c77:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7a:	8b 50 14             	mov    0x14(%eax),%edx
   11c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c80:	8b 40 08             	mov    0x8(%eax),%eax
   11c83:	6a 07                	push   $0x7
   11c85:	52                   	push   %edx
   11c86:	50                   	push   %eax
   11c87:	ff 75 10             	pushl  0x10(%ebp)
   11c8a:	e8 d5 ee ff ff       	call   10b64 <memory_alloc_for_page_dir>
   11c8f:	83 c4 10             	add    $0x10,%esp
   11c92:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   11c95:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c99:	79 1a                	jns    11cb5 <load_phdr+0x6f>
        log_printf("no memory");
   11c9b:	83 ec 0c             	sub    $0xc,%esp
   11c9e:	68 53 8e 01 00       	push   $0x18e53
   11ca3:	e8 54 6c 00 00       	call   188fc <log_printf>
   11ca8:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cb0:	e9 b8 00 00 00       	jmp    11d6d <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0) {
   11cb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb8:	8b 40 04             	mov    0x4(%eax),%eax
   11cbb:	83 ec 04             	sub    $0x4,%esp
   11cbe:	6a 00                	push   $0x0
   11cc0:	50                   	push   %eax
   11cc1:	ff 75 08             	pushl  0x8(%ebp)
   11cc4:	e8 7e 5a 00 00       	call   17747 <sys_lseek>
   11cc9:	83 c4 10             	add    $0x10,%esp
   11ccc:	85 c0                	test   %eax,%eax
   11cce:	79 1a                	jns    11cea <load_phdr+0xa4>
        log_printf("read file failed");
   11cd0:	83 ec 0c             	sub    $0xc,%esp
   11cd3:	68 5d 8e 01 00       	push   $0x18e5d
   11cd8:	e8 1f 6c 00 00       	call   188fc <log_printf>
   11cdd:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ce0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ce5:	e9 83 00 00 00       	jmp    11d6d <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr;
   11cea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ced:	8b 40 08             	mov    0x8(%eax),%eax
   11cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cf6:	8b 40 10             	mov    0x10(%eax),%eax
   11cf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0) {
   11cfc:	eb 64                	jmp    11d62 <load_phdr+0x11c>
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cfe:	b8 00 10 00 00       	mov    $0x1000,%eax
   11d03:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11d0a:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11d0e:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d11:	83 ec 08             	sub    $0x8,%esp
   11d14:	ff 75 f4             	pushl  -0xc(%ebp)
   11d17:	ff 75 10             	pushl  0x10(%ebp)
   11d1a:	e8 7c ed ff ff       	call   10a9b <memory_get_paddr>
   11d1f:	83 c4 10             	add    $0x10,%esp
   11d22:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) <  curr_size) {
   11d25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d28:	83 ec 04             	sub    $0x4,%esp
   11d2b:	ff 75 e8             	pushl  -0x18(%ebp)
   11d2e:	50                   	push   %eax
   11d2f:	ff 75 08             	pushl  0x8(%ebp)
   11d32:	e8 87 58 00 00       	call   175be <sys_read>
   11d37:	83 c4 10             	add    $0x10,%esp
   11d3a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11d3d:	7e 17                	jle    11d56 <load_phdr+0x110>
            log_printf("read file failed");
   11d3f:	83 ec 0c             	sub    $0xc,%esp
   11d42:	68 5d 8e 01 00       	push   $0x18e5d
   11d47:	e8 b0 6b 00 00       	call   188fc <log_printf>
   11d4c:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d54:	eb 17                	jmp    11d6d <load_phdr+0x127>
        }

        size -= curr_size;
   11d56:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d59:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11d5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d5f:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0) {
   11d62:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d66:	75 96                	jne    11cfe <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11d68:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d6d:	c9                   	leave  
   11d6e:	c3                   	ret    

00011d6f <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file (task_t * task, const char * name, uint32_t page_dir) {
   11d6f:	55                   	push   %ebp
   11d70:	89 e5                	mov    %esp,%ebp
   11d72:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    // 以只读方式打开
    int file = sys_open(name, 0);   // todo: flags暂时用0替代
   11d75:	83 ec 08             	sub    $0x8,%esp
   11d78:	6a 00                	push   $0x0
   11d7a:	ff 75 0c             	pushl  0xc(%ebp)
   11d7d:	e8 98 55 00 00       	call   1731a <sys_open>
   11d82:	83 c4 10             	add    $0x10,%esp
   11d85:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11d88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d8c:	79 18                	jns    11da6 <load_elf_file+0x37>
        log_printf("open file failed.%s", name);
   11d8e:	83 ec 08             	sub    $0x8,%esp
   11d91:	ff 75 0c             	pushl  0xc(%ebp)
   11d94:	68 6e 8e 01 00       	push   $0x18e6e
   11d99:	e8 5e 6b 00 00       	call   188fc <log_printf>
   11d9e:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11da1:	e9 c1 01 00 00       	jmp    11f67 <load_elf_file+0x1f8>
    }

    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11da6:	83 ec 04             	sub    $0x4,%esp
   11da9:	6a 34                	push   $0x34
   11dab:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11dae:	50                   	push   %eax
   11daf:	ff 75 ec             	pushl  -0x14(%ebp)
   11db2:	e8 07 58 00 00       	call   175be <sys_read>
   11db7:	83 c4 10             	add    $0x10,%esp
   11dba:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11dbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dc0:	83 f8 33             	cmp    $0x33,%eax
   11dc3:	77 18                	ja     11ddd <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11dc5:	83 ec 08             	sub    $0x8,%esp
   11dc8:	ff 75 e8             	pushl  -0x18(%ebp)
   11dcb:	68 82 8e 01 00       	push   $0x18e82
   11dd0:	e8 27 6b 00 00       	call   188fc <log_printf>
   11dd5:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dd8:	e9 8a 01 00 00       	jmp    11f67 <load_elf_file+0x1f8>
    }

    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E')
   11ddd:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11de1:	3c 7f                	cmp    $0x7f,%al
   11de3:	75 18                	jne    11dfd <load_elf_file+0x8e>
   11de5:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11de9:	3c 45                	cmp    $0x45,%al
   11deb:	75 10                	jne    11dfd <load_elf_file+0x8e>
        || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F')) {
   11ded:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11df1:	3c 4c                	cmp    $0x4c,%al
   11df3:	75 08                	jne    11dfd <load_elf_file+0x8e>
   11df5:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11df9:	3c 46                	cmp    $0x46,%al
   11dfb:	74 15                	je     11e12 <load_elf_file+0xa3>
        log_printf("check elf indent failed.");
   11dfd:	83 ec 0c             	sub    $0xc,%esp
   11e00:	68 9d 8e 01 00       	push   $0x18e9d
   11e05:	e8 f2 6a 00 00       	call   188fc <log_printf>
   11e0a:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e0d:	e9 55 01 00 00       	jmp    11f67 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0)) {
   11e12:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e16:	66 83 f8 02          	cmp    $0x2,%ax
   11e1a:	75 11                	jne    11e2d <load_elf_file+0xbe>
   11e1c:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e20:	66 83 f8 03          	cmp    $0x3,%ax
   11e24:	75 07                	jne    11e2d <load_elf_file+0xbe>
   11e26:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e29:	85 c0                	test   %eax,%eax
   11e2b:	75 15                	jne    11e42 <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e2d:	83 ec 0c             	sub    $0xc,%esp
   11e30:	68 b8 8e 01 00       	push   $0x18eb8
   11e35:	e8 c2 6a 00 00       	call   188fc <log_printf>
   11e3a:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e3d:	e9 25 01 00 00       	jmp    11f67 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e42:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e46:	66 85 c0             	test   %ax,%ax
   11e49:	74 07                	je     11e52 <load_elf_file+0xe3>
   11e4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e4e:	85 c0                	test   %eax,%eax
   11e50:	75 15                	jne    11e67 <load_elf_file+0xf8>
        log_printf("none programe header");
   11e52:	83 ec 0c             	sub    $0xc,%esp
   11e55:	68 d8 8e 01 00       	push   $0x18ed8
   11e5a:	e8 9d 6a 00 00       	call   188fc <log_printf>
   11e5f:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e62:	e9 00 01 00 00       	jmp    11f67 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11e67:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11e6d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e74:	e9 cb 00 00 00       	jmp    11f44 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e7c:	83 ec 04             	sub    $0x4,%esp
   11e7f:	6a 00                	push   $0x0
   11e81:	50                   	push   %eax
   11e82:	ff 75 ec             	pushl  -0x14(%ebp)
   11e85:	e8 bd 58 00 00       	call   17747 <sys_lseek>
   11e8a:	83 c4 10             	add    $0x10,%esp
   11e8d:	85 c0                	test   %eax,%eax
   11e8f:	79 15                	jns    11ea6 <load_elf_file+0x137>
            log_printf("read file failed");
   11e91:	83 ec 0c             	sub    $0xc,%esp
   11e94:	68 5d 8e 01 00       	push   $0x18e5d
   11e99:	e8 5e 6a 00 00       	call   188fc <log_printf>
   11e9e:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ea1:	e9 c1 00 00 00       	jmp    11f67 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11ea6:	83 ec 04             	sub    $0x4,%esp
   11ea9:	6a 20                	push   $0x20
   11eab:	8d 45 90             	lea    -0x70(%ebp),%eax
   11eae:	50                   	push   %eax
   11eaf:	ff 75 ec             	pushl  -0x14(%ebp)
   11eb2:	e8 07 57 00 00       	call   175be <sys_read>
   11eb7:	83 c4 10             	add    $0x10,%esp
   11eba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11ebd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ec0:	83 f8 1f             	cmp    $0x1f,%eax
   11ec3:	77 15                	ja     11eda <load_elf_file+0x16b>
            log_printf("read file failed");
   11ec5:	83 ec 0c             	sub    $0xc,%esp
   11ec8:	68 5d 8e 01 00       	push   $0x18e5d
   11ecd:	e8 2a 6a 00 00       	call   188fc <log_printf>
   11ed2:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ed5:	e9 8d 00 00 00       	jmp    11f67 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE)) {
   11eda:	8b 45 90             	mov    -0x70(%ebp),%eax
   11edd:	83 f8 01             	cmp    $0x1,%eax
   11ee0:	75 53                	jne    11f35 <load_elf_file+0x1c6>
   11ee2:	8b 45 98             	mov    -0x68(%ebp),%eax
   11ee5:	85 c0                	test   %eax,%eax
   11ee7:	79 4c                	jns    11f35 <load_elf_file+0x1c6>
           continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11ee9:	83 ec 04             	sub    $0x4,%esp
   11eec:	ff 75 10             	pushl  0x10(%ebp)
   11eef:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ef2:	50                   	push   %eax
   11ef3:	ff 75 ec             	pushl  -0x14(%ebp)
   11ef6:	e8 4b fd ff ff       	call   11c46 <load_phdr>
   11efb:	83 c4 10             	add    $0x10,%esp
   11efe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11f01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11f05:	79 12                	jns    11f19 <load_elf_file+0x1aa>
            log_printf("load program hdr failed");
   11f07:	83 ec 0c             	sub    $0xc,%esp
   11f0a:	68 ed 8e 01 00       	push   $0x18eed
   11f0f:	e8 e8 69 00 00       	call   188fc <log_printf>
   11f14:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f17:	eb 4e                	jmp    11f67 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11f19:	8b 55 98             	mov    -0x68(%ebp),%edx
   11f1c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11f1f:	01 c2                	add    %eax,%edx
   11f21:	8b 45 08             	mov    0x8(%ebp),%eax
   11f24:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11f27:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2a:	8b 50 2c             	mov    0x2c(%eax),%edx
   11f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   11f30:	89 50 30             	mov    %edx,0x30(%eax)
   11f33:	eb 01                	jmp    11f36 <load_elf_file+0x1c7>
           continue;
   11f35:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11f36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f3a:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f3e:	0f b7 c0             	movzwl %ax,%eax
   11f41:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f44:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f48:	0f b7 c0             	movzwl %ax,%eax
   11f4b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f4e:	0f 8c 25 ff ff ff    	jl     11e79 <load_elf_file+0x10a>
   }

    sys_close(file);
   11f54:	83 ec 0c             	sub    $0xc,%esp
   11f57:	ff 75 ec             	pushl  -0x14(%ebp)
   11f5a:	e8 7d 58 00 00       	call   177dc <sys_close>
   11f5f:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f62:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f65:	eb 19                	jmp    11f80 <load_elf_file+0x211>

load_failed:
    if (file >= 0) {
   11f67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f6b:	78 0e                	js     11f7b <load_elf_file+0x20c>
        sys_close(file);
   11f6d:	83 ec 0c             	sub    $0xc,%esp
   11f70:	ff 75 ec             	pushl  -0x14(%ebp)
   11f73:	e8 64 58 00 00       	call   177dc <sys_close>
   11f78:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11f7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f80:	c9                   	leave  
   11f81:	c3                   	ret    

00011f82 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args (char * to, uint32_t page_dir, int argc, char **argv) {
   11f82:	55                   	push   %ebp
   11f83:	89 e5                	mov    %esp,%ebp
   11f85:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11f88:	8b 45 10             	mov    0x10(%ebp),%eax
   11f8b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f91:	83 c0 0c             	add    $0xc,%eax
   11f94:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char * dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1);   // 留出结束符
   11f97:	8b 45 10             	mov    0x10(%ebp),%eax
   11f9a:	83 c0 04             	add    $0x4,%eax
   11f9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fa4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa7:	01 d0                	add    %edx,%eax
   11fa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    // argv表
    char ** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11fac:	8b 45 08             	mov    0x8(%ebp),%eax
   11faf:	83 c0 0c             	add    $0xc,%eax
   11fb2:	83 ec 08             	sub    $0x8,%esp
   11fb5:	50                   	push   %eax
   11fb6:	ff 75 0c             	pushl  0xc(%ebp)
   11fb9:	e8 dd ea ff ff       	call   10a9b <memory_get_paddr>
   11fbe:	83 c4 10             	add    $0x10,%esp
   11fc1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11fc4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fc8:	75 1c                	jne    11fe6 <copy_args+0x64>
   11fca:	68 05 8f 01 00       	push   $0x18f05
   11fcf:	68 48 8f 01 00       	push   $0x18f48
   11fd4:	68 bb 02 00 00       	push   $0x2bb
   11fd9:	68 9c 8d 01 00       	push   $0x18d9c
   11fde:	e8 bc 66 00 00       	call   1869f <panic>
   11fe3:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11fe6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fed:	e9 82 00 00 00       	jmp    12074 <copy_args+0xf2>
        char * from = argv[i];
   11ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ff5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ffc:	8b 45 14             	mov    0x14(%ebp),%eax
   11fff:	01 d0                	add    %edx,%eax
   12001:	8b 00                	mov    (%eax),%eax
   12003:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1;   // 包含结束符
   12006:	83 ec 0c             	sub    $0xc,%esp
   12009:	ff 75 e8             	pushl  -0x18(%ebp)
   1200c:	e8 39 62 00 00       	call   1824a <kernel_strlen>
   12011:	83 c4 10             	add    $0x10,%esp
   12014:	83 c0 01             	add    $0x1,%eax
   12017:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   1201a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   1201d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12020:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12023:	51                   	push   %ecx
   12024:	52                   	push   %edx
   12025:	ff 75 0c             	pushl  0xc(%ebp)
   12028:	50                   	push   %eax
   12029:	e8 b3 ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   1202e:	83 c4 10             	add    $0x10,%esp
   12031:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12034:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12038:	79 1c                	jns    12056 <copy_args+0xd4>
   1203a:	68 17 8f 01 00       	push   $0x18f17
   1203f:	68 48 8f 01 00       	push   $0x18f48
   12044:	68 c3 02 00 00       	push   $0x2c3
   12049:	68 9c 8d 01 00       	push   $0x18d9c
   1204e:	e8 4c 66 00 00       	call   1869f <panic>
   12053:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   12056:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12059:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12060:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12063:	01 c2                	add    %eax,%edx
   12065:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12068:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   1206a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1206d:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   12070:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12074:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12077:	3b 45 10             	cmp    0x10(%ebp),%eax
   1207a:	0f 8c 72 ff ff ff    	jl     11ff2 <copy_args+0x70>
    }

    // 可能存在无参的情况，此时不需要写入
    if (argc) {
   12080:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12084:	74 15                	je     1209b <copy_args+0x119>
        dest_argv_tb[argc] = '\0';
   12086:	8b 45 10             	mov    0x10(%ebp),%eax
   12089:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12090:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12093:	01 d0                	add    %edx,%eax
   12095:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

     // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   1209b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1209e:	8b 45 08             	mov    0x8(%ebp),%eax
   120a1:	6a 0c                	push   $0xc
   120a3:	52                   	push   %edx
   120a4:	ff 75 0c             	pushl  0xc(%ebp)
   120a7:	50                   	push   %eax
   120a8:	e8 34 ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   120ad:	83 c4 10             	add    $0x10,%esp
}
   120b0:	c9                   	leave  
   120b1:	c3                   	ret    

000120b2 <sys_execve>:
/**
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env) {
   120b2:	55                   	push   %ebp
   120b3:	89 e5                	mov    %esp,%ebp
   120b5:	83 ec 28             	sub    $0x28,%esp
    task_t * task = task_current();
   120b8:	e8 4f f6 ff ff       	call   1170c <task_current>
   120bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   120c0:	83 ec 0c             	sub    $0xc,%esp
   120c3:	ff 75 08             	pushl  0x8(%ebp)
   120c6:	e8 82 60 00 00       	call   1814d <get_file_name>
   120cb:	83 c4 10             	add    $0x10,%esp
   120ce:	89 c2                	mov    %eax,%edx
   120d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120d3:	83 c0 04             	add    $0x4,%eax
   120d6:	83 ec 04             	sub    $0x4,%esp
   120d9:	6a 20                	push   $0x20
   120db:	52                   	push   %edx
   120dc:	50                   	push   %eax
   120dd:	e8 f8 60 00 00       	call   181da <kernel_strncpy>
   120e2:	83 c4 10             	add    $0x10,%esp

    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   120e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120e8:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   120f1:	e8 bc e6 ff ff       	call   107b2 <memory_create_uvm>
   120f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir) {
   120f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120fd:	0f 84 2d 01 00 00    	je     12230 <sys_execve+0x17e>
        goto exec_failed;
    }

    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir);    // 暂时置用task->name表示
   12103:	83 ec 04             	sub    $0x4,%esp
   12106:	ff 75 ec             	pushl  -0x14(%ebp)
   12109:	ff 75 08             	pushl  0x8(%ebp)
   1210c:	ff 75 f4             	pushl  -0xc(%ebp)
   1210f:	e8 5b fc ff ff       	call   11d6f <load_elf_file>
   12114:	83 c4 10             	add    $0x10,%esp
   12117:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0) {
   1211a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1211e:	0f 84 0f 01 00 00    	je     12233 <sys_execve+0x181>
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;    // 预留一部分参数空间
   12124:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   1212b:	6a 07                	push   $0x7
   1212d:	68 00 40 1f 00       	push   $0x1f4000
   12132:	68 00 c0 e0 df       	push   $0xdfe0c000
   12137:	ff 75 ec             	pushl  -0x14(%ebp)
   1213a:	e8 25 ea ff ff       	call   10b64 <memory_alloc_for_page_dir>
   1213f:	83 c4 10             	add    $0x10,%esp
   12142:	89 45 e0             	mov    %eax,-0x20(%ebp)
                            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                            MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0) {
   12145:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12149:	0f 88 e7 00 00 00    	js     12236 <sys_execve+0x184>
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   1214f:	83 ec 0c             	sub    $0xc,%esp
   12152:	ff 75 0c             	pushl  0xc(%ebp)
   12155:	e8 c6 5f 00 00       	call   18120 <strings_count>
   1215a:	83 c4 10             	add    $0x10,%esp
   1215d:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12160:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12163:	ff 75 0c             	pushl  0xc(%ebp)
   12166:	ff 75 dc             	pushl  -0x24(%ebp)
   12169:	ff 75 ec             	pushl  -0x14(%ebp)
   1216c:	50                   	push   %eax
   1216d:	e8 10 fe ff ff       	call   11f82 <copy_args>
   12172:	83 c4 10             	add    $0x10,%esp
   12175:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0) {
   12178:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1217c:	0f 88 b7 00 00 00    	js     12239 <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t * frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12182:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12185:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   1218b:	83 e8 58             	sub    $0x58,%eax
   1218e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12191:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12194:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12197:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1219a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   121a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a7:	8b 50 28             	mov    0x28(%eax),%edx
   121aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ad:	89 50 2c             	mov    %edx,0x2c(%eax)
   121b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b3:	8b 50 2c             	mov    0x2c(%eax),%edx
   121b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b9:	89 50 24             	mov    %edx,0x24(%eax)
   121bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121bf:	8b 50 24             	mov    0x24(%eax),%edx
   121c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c5:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   121c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121cb:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   121d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d5:	8b 50 1c             	mov    0x1c(%eax),%edx
   121d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121db:	89 50 14             	mov    %edx,0x14(%eax)
   121de:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121e1:	8b 50 14             	mov    0x14(%eax),%edx
   121e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121e7:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT| EFLAGS_IF;  // 段寄存器无需修改
   121ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ed:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间，因为系统调用发生时特权级3的栈中也有传入的参数
    frame->esp = stack_top - sizeof(uint32_t)*SYSCALL_PARAM_COUNT;
   121f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121f6:	83 e8 14             	sub    $0x14,%eax
   121f9:	89 c2                	mov    %eax,%edx
   121fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121fe:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12201:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12204:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12207:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    mmu_set_page_dir(new_page_dir);   // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1220d:	83 ec 0c             	sub    $0xc,%esp
   12210:	ff 75 ec             	pushl  -0x14(%ebp)
   12213:	e8 06 ee ff ff       	call   1101e <mmu_set_page_dir>
   12218:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir);            // 再释放掉了原进程的内容空间
   1221b:	83 ec 0c             	sub    $0xc,%esp
   1221e:	ff 75 f0             	pushl  -0x10(%ebp)
   12221:	e8 11 e6 ff ff       	call   10837 <memory_destroy_uvm>
   12226:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return  0;
   12229:	b8 00 00 00 00       	mov    $0x0,%eax
   1222e:	eb 3d                	jmp    1226d <sys_execve+0x1bb>
        goto exec_failed;
   12230:	90                   	nop
   12231:	eb 07                	jmp    1223a <sys_execve+0x188>
        goto exec_failed;
   12233:	90                   	nop
   12234:	eb 04                	jmp    1223a <sys_execve+0x188>
        goto exec_failed;
   12236:	90                   	nop
   12237:	eb 01                	jmp    1223a <sys_execve+0x188>
        goto exec_failed;
   12239:	90                   	nop

exec_failed:    // 必要的资源释放
    if (new_page_dir) {
   1223a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1223e:	74 28                	je     12268 <sys_execve+0x1b6>
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12240:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12243:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12246:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        mmu_set_page_dir(old_page_dir);
   1224c:	83 ec 0c             	sub    $0xc,%esp
   1224f:	ff 75 f0             	pushl  -0x10(%ebp)
   12252:	e8 c7 ed ff ff       	call   1101e <mmu_set_page_dir>
   12257:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1225a:	83 ec 0c             	sub    $0xc,%esp
   1225d:	ff 75 ec             	pushl  -0x14(%ebp)
   12260:	e8 d2 e5 ff ff       	call   10837 <memory_destroy_uvm>
   12265:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   12268:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1226d:	c9                   	leave  
   1226e:	c3                   	ret    

0001226f <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid (void) {
   1226f:	55                   	push   %ebp
   12270:	89 e5                	mov    %esp,%ebp
   12272:	83 ec 10             	sub    $0x10,%esp
    task_t * curr_task = task_current();
   12275:	e8 92 f4 ff ff       	call   1170c <task_current>
   1227a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   1227d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12280:	8b 40 24             	mov    0x24(%eax),%eax
}
   12283:	c9                   	leave  
   12284:	c3                   	ret    

00012285 <sys_wait>:


/**
 * @brief 等待子进程退出
 */
int sys_wait(int* status) {
   12285:	55                   	push   %ebp
   12286:	89 e5                	mov    %esp,%ebp
   12288:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   1228b:	e8 7c f4 ff ff       	call   1170c <task_current>
   12290:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (;;) {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   12293:	83 ec 0c             	sub    $0xc,%esp
   12296:	68 c0 49 03 00       	push   $0x349c0
   1229b:	e8 95 59 00 00       	call   17c35 <mutex_lock>
   122a0:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++) {
   122a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122aa:	e9 98 00 00 00       	jmp    12347 <sys_wait+0xc2>
            task_t * task = task_table + i;
   122af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122b2:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122b8:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   122bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task) {
   122c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122c3:	8b 40 28             	mov    0x28(%eax),%eax
   122c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122c9:	75 77                	jne    12342 <sys_wait+0xbd>
                continue;
            }

            if (task->state == TASK_ZOMBIE) {
   122cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122ce:	8b 00                	mov    (%eax),%eax
   122d0:	83 f8 05             	cmp    $0x5,%eax
   122d3:	75 6e                	jne    12343 <sys_wait+0xbe>
                int pid = task->pid;
   122d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122d8:	8b 40 24             	mov    0x24(%eax),%eax
   122db:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122e1:	8b 50 34             	mov    0x34(%eax),%edx
   122e4:	8b 45 08             	mov    0x8(%ebp),%eax
   122e7:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   122e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122ec:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   122f2:	83 ec 0c             	sub    $0xc,%esp
   122f5:	50                   	push   %eax
   122f6:	e8 3c e5 ff ff       	call   10837 <memory_destroy_uvm>
   122fb:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   122fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12301:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   12307:	2d 00 10 00 00       	sub    $0x1000,%eax
   1230c:	83 ec 0c             	sub    $0xc,%esp
   1230f:	50                   	push   %eax
   12310:	e8 77 e9 ff ff       	call   10c8c <memory_free_page>
   12315:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12318:	83 ec 04             	sub    $0x4,%esp
   1231b:	68 c8 02 00 00       	push   $0x2c8
   12320:	6a 00                	push   $0x0
   12322:	ff 75 e8             	pushl  -0x18(%ebp)
   12325:	e8 28 60 00 00       	call   18352 <kernel_memset>
   1232a:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   1232d:	83 ec 0c             	sub    $0xc,%esp
   12330:	68 c0 49 03 00       	push   $0x349c0
   12335:	e8 92 59 00 00       	call   17ccc <mutex_unlock>
   1233a:	83 c4 10             	add    $0x10,%esp
                return pid;
   1233d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12340:	eb 56                	jmp    12398 <sys_wait+0x113>
                continue;
   12342:	90                   	nop
        for (int i = 0; i < TASK_NR; i++) {
   12343:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12347:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1234b:	0f 8e 5e ff ff ff    	jle    122af <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   12351:	83 ec 0c             	sub    $0xc,%esp
   12354:	68 c0 49 03 00       	push   $0x349c0
   12359:	e8 6e 59 00 00       	call   17ccc <mutex_unlock>
   1235e:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   12361:	e8 ab 0d 00 00       	call   13111 <irq_enter_protection>
   12366:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   12369:	83 ec 0c             	sub    $0xc,%esp
   1236c:	ff 75 f0             	pushl  -0x10(%ebp)
   1236f:	e8 ca f2 ff ff       	call   1163e <task_set_block>
   12374:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   12377:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1237a:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   12380:	e8 9e f4 ff ff       	call   11823 <task_dispatch>
        irq_leave_protection(state);
   12385:	83 ec 0c             	sub    $0xc,%esp
   12388:	ff 75 ec             	pushl  -0x14(%ebp)
   1238b:	e8 99 0d 00 00       	call   13129 <irq_leave_protection>
   12390:	83 c4 10             	add    $0x10,%esp
    for (;;) {
   12393:	e9 fb fe ff ff       	jmp    12293 <sys_wait+0xe>
    }
}
   12398:	c9                   	leave  
   12399:	c3                   	ret    

0001239a <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status) {
   1239a:	55                   	push   %ebp
   1239b:	89 e5                	mov    %esp,%ebp
   1239d:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   123a0:	e8 67 f3 ff ff       	call   1170c <task_current>
   123a5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123af:	eb 39                	jmp    123ea <sys_exit+0x50>
        file_t * file = curr_task->file_table[fd];
   123b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123b7:	83 c2 10             	add    $0x10,%edx
   123ba:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   123be:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file) {
   123c1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123c5:	74 1f                	je     123e6 <sys_exit+0x4c>
            sys_close(fd);
   123c7:	83 ec 0c             	sub    $0xc,%esp
   123ca:	ff 75 f4             	pushl  -0xc(%ebp)
   123cd:	e8 0a 54 00 00       	call   177dc <sys_close>
   123d2:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   123d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123db:	83 c2 10             	add    $0x10,%edx
   123de:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   123e5:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123ea:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   123ee:	7e c1                	jle    123b1 <sys_exit+0x17>
        }
    }

    int move_child = 0;
   123f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   123f7:	83 ec 0c             	sub    $0xc,%esp
   123fa:	68 c0 49 03 00       	push   $0x349c0
   123ff:	e8 31 58 00 00       	call   17c35 <mutex_lock>
   12404:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12407:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1240e:	eb 3b                	jmp    1244b <sys_exit+0xb1>
        task_t * task = task_table + i;
   12410:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12413:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12419:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1241e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task) {
   12421:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12424:	8b 40 28             	mov    0x28(%eax),%eax
   12427:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   1242a:	75 1b                	jne    12447 <sys_exit+0xad>
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   1242c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1242f:	c7 40 28 28 d0 01 00 	movl   $0x1d028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE) {
   12436:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12439:	8b 00                	mov    (%eax),%eax
   1243b:	83 f8 05             	cmp    $0x5,%eax
   1243e:	75 07                	jne    12447 <sys_exit+0xad>
                move_child = 1;
   12440:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12447:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1244b:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   1244f:	7e bf                	jle    12410 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   12451:	83 ec 0c             	sub    $0xc,%esp
   12454:	68 c0 49 03 00       	push   $0x349c0
   12459:	e8 6e 58 00 00       	call   17ccc <mutex_unlock>
   1245e:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   12461:	e8 ab 0c 00 00       	call   13111 <irq_enter_protection>
   12466:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t * parent = curr_task->parent;
   12469:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1246c:	8b 40 28             	mov    0x28(%eax),%eax
   1246f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task)) {  // 如果父进程为init进程，在下方唤醒
   12472:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12476:	74 23                	je     1249b <sys_exit+0x101>
   12478:	81 7d e0 28 d0 01 00 	cmpl   $0x1d028,-0x20(%ebp)
   1247f:	74 1a                	je     1249b <sys_exit+0x101>
        if (task_manager.first_task.state == TASK_WAITING) {
   12481:	a1 28 d0 01 00       	mov    0x1d028,%eax
   12486:	83 f8 04             	cmp    $0x4,%eax
   12489:	75 10                	jne    1249b <sys_exit+0x101>
            task_set_ready(&task_manager.first_task);
   1248b:	83 ec 0c             	sub    $0xc,%esp
   1248e:	68 28 d0 01 00       	push   $0x1d028
   12493:	e8 72 f1 ff ff       	call   1160a <task_set_ready>
   12498:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING) {
   1249b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1249e:	8b 00                	mov    (%eax),%eax
   124a0:	83 f8 04             	cmp    $0x4,%eax
   124a3:	75 12                	jne    124b7 <sys_exit+0x11d>
        task_set_ready(curr_task->parent);
   124a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124a8:	8b 40 28             	mov    0x28(%eax),%eax
   124ab:	83 ec 0c             	sub    $0xc,%esp
   124ae:	50                   	push   %eax
   124af:	e8 56 f1 ff ff       	call   1160a <task_set_ready>
   124b4:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   124b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124ba:	8b 55 08             	mov    0x8(%ebp),%edx
   124bd:	89 50 34             	mov    %edx,0x34(%eax)
    curr_task->state = TASK_ZOMBIE;
   124c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124c3:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   124c9:	83 ec 0c             	sub    $0xc,%esp
   124cc:	ff 75 e8             	pushl  -0x18(%ebp)
   124cf:	e8 6a f1 ff ff       	call   1163e <task_set_block>
   124d4:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   124d7:	e8 47 f3 ff ff       	call   11823 <task_dispatch>

    irq_leave_protection(state);
   124dc:	83 ec 0c             	sub    $0xc,%esp
   124df:	ff 75 e4             	pushl  -0x1c(%ebp)
   124e2:	e8 42 0c 00 00       	call   13129 <irq_leave_protection>
   124e7:	83 c4 10             	add    $0x10,%esp
}
   124ea:	90                   	nop
   124eb:	c9                   	leave  
   124ec:	c3                   	ret    

000124ed <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   124ed:	55                   	push   %ebp
   124ee:	89 e5                	mov    %esp,%ebp
   124f0:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   124f3:	8b 45 08             	mov    0x8(%ebp),%eax
   124f6:	c1 e8 10             	shr    $0x10,%eax
   124f9:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   124fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12500:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   12504:	8b 45 0c             	mov    0xc(%ebp),%eax
   12507:	83 e8 01             	sub    $0x1,%eax
   1250a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1250e:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12512:	90                   	nop
   12513:	c9                   	leave  
   12514:	c3                   	ret    

00012515 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12515:	55                   	push   %ebp
   12516:	89 e5                	mov    %esp,%ebp
   12518:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
   1251b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1251e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12521:	8b 45 08             	mov    0x8(%ebp),%eax
   12524:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12527:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1252a:	ff 28                	ljmp   *(%eax)
}
   1252c:	90                   	nop
   1252d:	c9                   	leave  
   1252e:	c3                   	ret    

0001252f <segment_desc_set>:
static mutex_t mutex;

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1252f:	55                   	push   %ebp
   12530:	89 e5                	mov    %esp,%ebp
   12532:	83 ec 14             	sub    $0x14,%esp
   12535:	8b 45 14             	mov    0x14(%ebp),%eax
   12538:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1253c:	8b 45 08             	mov    0x8(%ebp),%eax
   1253f:	c1 f8 03             	sar    $0x3,%eax
   12542:	c1 e0 03             	shl    $0x3,%eax
   12545:	05 e0 49 03 00       	add    $0x349e0,%eax
   1254a:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   1254d:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12554:	76 0f                	jbe    12565 <segment_desc_set+0x36>
		attr |= 0x8000;
   12556:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1255c:	8b 45 10             	mov    0x10(%ebp),%eax
   1255f:	c1 e8 0c             	shr    $0xc,%eax
   12562:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   12565:	8b 45 10             	mov    0x10(%ebp),%eax
   12568:	89 c2                	mov    %eax,%edx
   1256a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256d:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   12570:	8b 45 0c             	mov    0xc(%ebp),%eax
   12573:	89 c2                	mov    %eax,%edx
   12575:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12578:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1257c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1257f:	c1 e8 10             	shr    $0x10,%eax
   12582:	89 c2                	mov    %eax,%edx
   12584:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12587:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1258a:	8b 45 10             	mov    0x10(%ebp),%eax
   1258d:	c1 e8 10             	shr    $0x10,%eax
   12590:	c1 e0 08             	shl    $0x8,%eax
   12593:	66 25 00 0f          	and    $0xf00,%ax
   12597:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1259b:	89 c2                	mov    %eax,%edx
   1259d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125a0:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   125a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a7:	c1 e8 18             	shr    $0x18,%eax
   125aa:	89 c2                	mov    %eax,%edx
   125ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125af:	88 50 07             	mov    %dl,0x7(%eax)
}
   125b2:	90                   	nop
   125b3:	c9                   	leave  
   125b4:	c3                   	ret    

000125b5 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   125b5:	55                   	push   %ebp
   125b6:	89 e5                	mov    %esp,%ebp
   125b8:	83 ec 08             	sub    $0x8,%esp
   125bb:	8b 55 0c             	mov    0xc(%ebp),%edx
   125be:	8b 45 14             	mov    0x14(%ebp),%eax
   125c1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   125c5:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   125c9:	8b 45 10             	mov    0x10(%ebp),%eax
   125cc:	89 c2                	mov    %eax,%edx
   125ce:	8b 45 08             	mov    0x8(%ebp),%eax
   125d1:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   125d4:	8b 45 08             	mov    0x8(%ebp),%eax
   125d7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   125db:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   125df:	8b 45 08             	mov    0x8(%ebp),%eax
   125e2:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125e6:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   125ea:	8b 45 10             	mov    0x10(%ebp),%eax
   125ed:	c1 e8 10             	shr    $0x10,%eax
   125f0:	89 c2                	mov    %eax,%edx
   125f2:	8b 45 08             	mov    0x8(%ebp),%eax
   125f5:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125f9:	90                   	nop
   125fa:	c9                   	leave  
   125fb:	c3                   	ret    

000125fc <gdt_free_sel>:

void gdt_free_sel (int sel) {
   125fc:	55                   	push   %ebp
   125fd:	89 e5                	mov    %esp,%ebp
   125ff:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   12602:	83 ec 0c             	sub    $0xc,%esp
   12605:	68 e0 51 03 00       	push   $0x351e0
   1260a:	e8 26 56 00 00       	call   17c35 <mutex_lock>
   1260f:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12612:	8b 45 08             	mov    0x8(%ebp),%eax
   12615:	c1 e8 03             	shr    $0x3,%eax
   12618:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   1261f:	00 00 00 
    mutex_unlock(&mutex);
   12622:	83 ec 0c             	sub    $0xc,%esp
   12625:	68 e0 51 03 00       	push   $0x351e0
   1262a:	e8 9d 56 00 00       	call   17ccc <mutex_unlock>
   1262f:	83 c4 10             	add    $0x10,%esp
}
   12632:	90                   	nop
   12633:	c9                   	leave  
   12634:	c3                   	ret    

00012635 <gdt_alloc_desc>:

/**
 * 分配一个GDT推荐表符
 */
int gdt_alloc_desc (void) {
   12635:	55                   	push   %ebp
   12636:	89 e5                	mov    %esp,%ebp
   12638:	83 ec 18             	sub    $0x18,%esp
    int i;

    // 跳过第0项
    mutex_lock(&mutex);
   1263b:	83 ec 0c             	sub    $0xc,%esp
   1263e:	68 e0 51 03 00       	push   $0x351e0
   12643:	e8 ed 55 00 00       	call   17c35 <mutex_lock>
   12648:	83 c4 10             	add    $0x10,%esp
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1264b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12652:	eb 29                	jmp    1267d <gdt_alloc_desc+0x48>
        segment_desc_t * desc = gdt_table + i;
   12654:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12657:	c1 e0 03             	shl    $0x3,%eax
   1265a:	05 e0 49 03 00       	add    $0x349e0,%eax
   1265f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   12662:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12665:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12669:	66 85 c0             	test   %ax,%ax
   1266c:	75 0b                	jne    12679 <gdt_alloc_desc+0x44>
            desc->attr = SEG_P_PRESENT;     // 标记为占用状态
   1266e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12671:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            break;
   12677:	eb 0d                	jmp    12686 <gdt_alloc_desc+0x51>
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   12679:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1267d:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12684:	7e ce                	jle    12654 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   12686:	83 ec 0c             	sub    $0xc,%esp
   12689:	68 e0 51 03 00       	push   $0x351e0
   1268e:	e8 39 56 00 00       	call   17ccc <mutex_unlock>
   12693:	83 c4 10             	add    $0x10,%esp

    return i >= GDT_TABLE_SIZE ? -1 : i * sizeof(segment_desc_t);;
   12696:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1269d:	7f 08                	jg     126a7 <gdt_alloc_desc+0x72>
   1269f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126a2:	c1 e0 03             	shl    $0x3,%eax
   126a5:	eb 05                	jmp    126ac <gdt_alloc_desc+0x77>
   126a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   126ac:	c9                   	leave  
   126ad:	c3                   	ret    

000126ae <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   126ae:	55                   	push   %ebp
   126af:	89 e5                	mov    %esp,%ebp
   126b1:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126b4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   126bb:	eb 19                	jmp    126d6 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   126bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126c0:	c1 e0 03             	shl    $0x3,%eax
   126c3:	6a 00                	push   $0x0
   126c5:	6a 00                	push   $0x0
   126c7:	6a 00                	push   $0x0
   126c9:	50                   	push   %eax
   126ca:	e8 60 fe ff ff       	call   1252f <segment_desc_set>
   126cf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126d2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   126d6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   126dd:	7e de                	jle    126bd <init_gdt+0xf>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   126df:	68 92 c0 00 00       	push   $0xc092
   126e4:	6a ff                	push   $0xffffffff
   126e6:	6a 00                	push   $0x0
   126e8:	6a 10                	push   $0x10
   126ea:	e8 40 fe ff ff       	call   1252f <segment_desc_set>
   126ef:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   126f2:	68 9a c0 00 00       	push   $0xc09a
   126f7:	6a ff                	push   $0xffffffff
   126f9:	6a 00                	push   $0x0
   126fb:	6a 08                	push   $0x8
   126fd:	e8 2d fe ff ff       	call   1252f <segment_desc_set>
   12702:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   12705:	ba f8 02 01 00       	mov    $0x102f8,%edx
   1270a:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   1270f:	68 05 ec 00 00       	push   $0xec05
   12714:	52                   	push   %edx
   12715:	6a 08                	push   $0x8
   12717:	50                   	push   %eax
   12718:	e8 98 fe ff ff       	call   125b5 <gate_desc_set>
   1271d:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12720:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   12725:	68 00 08 00 00       	push   $0x800
   1272a:	50                   	push   %eax
   1272b:	e8 bd fd ff ff       	call   124ed <lgdt>
   12730:	83 c4 08             	add    $0x8,%esp
}
   12733:	90                   	nop
   12734:	c9                   	leave  
   12735:	c3                   	ret    

00012736 <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss (uint32_t tss_selector) {
   12736:	55                   	push   %ebp
   12737:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12739:	6a 00                	push   $0x0
   1273b:	ff 75 08             	pushl  0x8(%ebp)
   1273e:	e8 d2 fd ff ff       	call   12515 <far_jump>
   12743:	83 c4 08             	add    $0x8,%esp
}
   12746:	90                   	nop
   12747:	c9                   	leave  
   12748:	c3                   	ret    

00012749 <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   12749:	55                   	push   %ebp
   1274a:	89 e5                	mov    %esp,%ebp
   1274c:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1274f:	83 ec 0c             	sub    $0xc,%esp
   12752:	68 e0 51 03 00       	push   $0x351e0
   12757:	e8 ab 54 00 00       	call   17c07 <mutex_init>
   1275c:	83 c4 10             	add    $0x10,%esp

    init_gdt();
   1275f:	e8 4a ff ff ff       	call   126ae <init_gdt>
}
   12764:	90                   	nop
   12765:	c9                   	leave  
   12766:	c3                   	ret    

00012767 <inb>:
static inline uint8_t inb(uint16_t  port) {
   12767:	55                   	push   %ebp
   12768:	89 e5                	mov    %esp,%ebp
   1276a:	83 ec 14             	sub    $0x14,%esp
   1276d:	8b 45 08             	mov    0x8(%ebp),%eax
   12770:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   12774:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12778:	89 c2                	mov    %eax,%edx
   1277a:	ec                   	in     (%dx),%al
   1277b:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1277e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12782:	c9                   	leave  
   12783:	c3                   	ret    

00012784 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12784:	55                   	push   %ebp
   12785:	89 e5                	mov    %esp,%ebp
   12787:	83 ec 08             	sub    $0x8,%esp
   1278a:	8b 55 08             	mov    0x8(%ebp),%edx
   1278d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12790:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12794:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   12797:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1279b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1279f:	ee                   	out    %al,(%dx)
}
   127a0:	90                   	nop
   127a1:	c9                   	leave  
   127a2:	c3                   	ret    

000127a3 <cli>:
static inline void cli() {
   127a3:	55                   	push   %ebp
   127a4:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   127a6:	fa                   	cli    
}
   127a7:	90                   	nop
   127a8:	5d                   	pop    %ebp
   127a9:	c3                   	ret    

000127aa <sti>:
static inline void sti() {
   127aa:	55                   	push   %ebp
   127ab:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   127ad:	fb                   	sti    
}
   127ae:	90                   	nop
   127af:	5d                   	pop    %ebp
   127b0:	c3                   	ret    

000127b1 <read_cr2>:
static inline uint32_t read_cr2() {
   127b1:	55                   	push   %ebp
   127b2:	89 e5                	mov    %esp,%ebp
   127b4:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   127b7:	0f 20 d0             	mov    %cr2,%eax
   127ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   127bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127c0:	c9                   	leave  
   127c1:	c3                   	ret    

000127c2 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   127c2:	55                   	push   %ebp
   127c3:	89 e5                	mov    %esp,%ebp
   127c5:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   127c8:	8b 45 08             	mov    0x8(%ebp),%eax
   127cb:	c1 e8 10             	shr    $0x10,%eax
   127ce:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   127d2:	8b 45 08             	mov    0x8(%ebp),%eax
   127d5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   127d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   127dc:	83 e8 01             	sub    $0x1,%eax
   127df:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   127e3:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127e7:	90                   	nop
   127e8:	c9                   	leave  
   127e9:	c3                   	ret    

000127ea <hlt>:
static inline void hlt(void) {
   127ea:	55                   	push   %ebp
   127eb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127ed:	f4                   	hlt    
}
   127ee:	90                   	nop
   127ef:	5d                   	pop    %ebp
   127f0:	c3                   	ret    

000127f1 <read_eflags>:

static inline uint32_t read_eflags (void) {
   127f1:	55                   	push   %ebp
   127f2:	89 e5                	mov    %esp,%ebp
   127f4:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   127f7:	9c                   	pushf  
   127f8:	58                   	pop    %eax
   127f9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   127fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127ff:	c9                   	leave  
   12800:	c3                   	ret    

00012801 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   12801:	55                   	push   %ebp
   12802:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   12804:	8b 45 08             	mov    0x8(%ebp),%eax
   12807:	50                   	push   %eax
   12808:	9d                   	popf   
}
   12809:	90                   	nop
   1280a:	5d                   	pop    %ebp
   1280b:	c3                   	ret    

0001280c <dump_core_regs>:

#define IDT_TABLE_NR			128				// IDT表项数量

static gate_desc_t idt_table[IDT_TABLE_NR];	// 中断描述表

static void dump_core_regs (exception_frame_t * frame) {
   1280c:	55                   	push   %ebp
   1280d:	89 e5                	mov    %esp,%ebp
   1280f:	57                   	push   %edi
   12810:	56                   	push   %esi
   12811:	53                   	push   %ebx
   12812:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   12815:	8b 45 08             	mov    0x8(%ebp),%eax
   12818:	8b 40 3c             	mov    0x3c(%eax),%eax
   1281b:	83 e0 07             	and    $0x7,%eax
   1281e:	85 c0                	test   %eax,%eax
   12820:	74 14                	je     12836 <dump_core_regs+0x2a>
        ss = frame->ds;
   12822:	8b 45 08             	mov    0x8(%ebp),%eax
   12825:	8b 40 0c             	mov    0xc(%eax),%eax
   12828:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1282b:	8b 45 08             	mov    0x8(%ebp),%eax
   1282e:	8b 40 1c             	mov    0x1c(%eax),%eax
   12831:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12834:	eb 12                	jmp    12848 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   12836:	8b 45 08             	mov    0x8(%ebp),%eax
   12839:	8b 40 48             	mov    0x48(%eax),%eax
   1283c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1283f:	8b 45 08             	mov    0x8(%ebp),%eax
   12842:	8b 40 44             	mov    0x44(%eax),%eax
   12845:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   12848:	8b 45 08             	mov    0x8(%ebp),%eax
   1284b:	8b 50 34             	mov    0x34(%eax),%edx
   1284e:	8b 45 08             	mov    0x8(%ebp),%eax
   12851:	8b 40 30             	mov    0x30(%eax),%eax
   12854:	83 ec 04             	sub    $0x4,%esp
   12857:	52                   	push   %edx
   12858:	50                   	push   %eax
   12859:	68 54 8f 01 00       	push   $0x18f54
   1285e:	e8 99 60 00 00       	call   188fc <log_printf>
   12863:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12866:	8b 45 08             	mov    0x8(%ebp),%eax
   12869:	8b 30                	mov    (%eax),%esi
   1286b:	8b 45 08             	mov    0x8(%ebp),%eax
   1286e:	8b 58 04             	mov    0x4(%eax),%ebx
   12871:	8b 45 08             	mov    0x8(%ebp),%eax
   12874:	8b 48 08             	mov    0x8(%eax),%ecx
   12877:	8b 45 08             	mov    0x8(%ebp),%eax
   1287a:	8b 50 0c             	mov    0xc(%eax),%edx
   1287d:	8b 45 08             	mov    0x8(%ebp),%eax
   12880:	8b 40 3c             	mov    0x3c(%eax),%eax
   12883:	83 ec 04             	sub    $0x4,%esp
   12886:	56                   	push   %esi
   12887:	53                   	push   %ebx
   12888:	ff 75 e0             	pushl  -0x20(%ebp)
   1288b:	51                   	push   %ecx
   1288c:	52                   	push   %edx
   1288d:	50                   	push   %eax
   1288e:	68 70 8f 01 00       	push   $0x18f70
   12893:	e8 64 60 00 00       	call   188fc <log_printf>
   12898:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   1289b:	8b 45 08             	mov    0x8(%ebp),%eax
   1289e:	8b 40 18             	mov    0x18(%eax),%eax
   128a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   128a4:	8b 45 08             	mov    0x8(%ebp),%eax
   128a7:	8b 78 14             	mov    0x14(%eax),%edi
   128aa:	8b 45 08             	mov    0x8(%ebp),%eax
   128ad:	8b 70 10             	mov    0x10(%eax),%esi
   128b0:	8b 45 08             	mov    0x8(%ebp),%eax
   128b3:	8b 58 24             	mov    0x24(%eax),%ebx
   128b6:	8b 45 08             	mov    0x8(%ebp),%eax
   128b9:	8b 48 28             	mov    0x28(%eax),%ecx
   128bc:	8b 45 08             	mov    0x8(%ebp),%eax
   128bf:	8b 50 20             	mov    0x20(%eax),%edx
   128c2:	8b 45 08             	mov    0x8(%ebp),%eax
   128c5:	8b 40 2c             	mov    0x2c(%eax),%eax
   128c8:	83 ec 0c             	sub    $0xc,%esp
   128cb:	ff 75 e4             	pushl  -0x1c(%ebp)
   128ce:	ff 75 d4             	pushl  -0x2c(%ebp)
   128d1:	57                   	push   %edi
   128d2:	56                   	push   %esi
   128d3:	53                   	push   %ebx
   128d4:	51                   	push   %ecx
   128d5:	52                   	push   %edx
   128d6:	50                   	push   %eax
   128d7:	68 98 8f 01 00       	push   $0x18f98
   128dc:	e8 1b 60 00 00       	call   188fc <log_printf>
   128e1:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128e4:	8b 45 08             	mov    0x8(%ebp),%eax
   128e7:	8b 50 40             	mov    0x40(%eax),%edx
   128ea:	8b 45 08             	mov    0x8(%ebp),%eax
   128ed:	8b 40 38             	mov    0x38(%eax),%eax
   128f0:	83 ec 04             	sub    $0x4,%esp
   128f3:	52                   	push   %edx
   128f4:	50                   	push   %eax
   128f5:	68 e1 8f 01 00       	push   $0x18fe1
   128fa:	e8 fd 5f 00 00       	call   188fc <log_printf>
   128ff:	83 c4 10             	add    $0x10,%esp
}
   12902:	90                   	nop
   12903:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12906:	5b                   	pop    %ebx
   12907:	5e                   	pop    %esi
   12908:	5f                   	pop    %edi
   12909:	5d                   	pop    %ebp
   1290a:	c3                   	ret    

0001290b <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
   1290b:	55                   	push   %ebp
   1290c:	89 e5                	mov    %esp,%ebp
   1290e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12911:	83 ec 0c             	sub    $0xc,%esp
   12914:	68 f8 8f 01 00       	push   $0x18ff8
   12919:	e8 de 5f 00 00       	call   188fc <log_printf>
   1291e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   12921:	83 ec 08             	sub    $0x8,%esp
   12924:	ff 75 0c             	pushl  0xc(%ebp)
   12927:	68 19 90 01 00       	push   $0x19019
   1292c:	e8 cb 5f 00 00       	call   188fc <log_printf>
   12931:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   12934:	83 ec 0c             	sub    $0xc,%esp
   12937:	ff 75 08             	pushl  0x8(%ebp)
   1293a:	e8 cd fe ff ff       	call   1280c <dump_core_regs>
   1293f:	83 c4 10             	add    $0x10,%esp
    
    // todo: 留等以后补充打印任务栈的内容

    log_printf("--------------------------------");
   12942:	83 ec 0c             	sub    $0xc,%esp
   12945:	68 f8 8f 01 00       	push   $0x18ff8
   1294a:	e8 ad 5f 00 00       	call   188fc <log_printf>
   1294f:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12952:	8b 45 08             	mov    0x8(%ebp),%eax
   12955:	8b 40 3c             	mov    0x3c(%eax),%eax
   12958:	83 e0 03             	and    $0x3,%eax
   1295b:	85 c0                	test   %eax,%eax
   1295d:	74 14                	je     12973 <do_default_handler+0x68>
        sys_exit(frame->error_code);
   1295f:	8b 45 08             	mov    0x8(%ebp),%eax
   12962:	8b 40 34             	mov    0x34(%eax),%eax
   12965:	83 ec 0c             	sub    $0xc,%esp
   12968:	50                   	push   %eax
   12969:	e8 2c fa ff ff       	call   1239a <sys_exit>
   1296e:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12971:	eb 07                	jmp    1297a <do_default_handler+0x6f>
            hlt();
   12973:	e8 72 fe ff ff       	call   127ea <hlt>
   12978:	eb f9                	jmp    12973 <do_default_handler+0x68>
}
   1297a:	c9                   	leave  
   1297b:	c3                   	ret    

0001297c <do_handler_unknown>:

void do_handler_unknown (exception_frame_t * frame) {
   1297c:	55                   	push   %ebp
   1297d:	89 e5                	mov    %esp,%ebp
   1297f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   12982:	83 ec 08             	sub    $0x8,%esp
   12985:	68 34 90 01 00       	push   $0x19034
   1298a:	ff 75 08             	pushl  0x8(%ebp)
   1298d:	e8 79 ff ff ff       	call   1290b <do_default_handler>
   12992:	83 c4 10             	add    $0x10,%esp
}
   12995:	90                   	nop
   12996:	c9                   	leave  
   12997:	c3                   	ret    

00012998 <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   12998:	55                   	push   %ebp
   12999:	89 e5                	mov    %esp,%ebp
   1299b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   1299e:	83 ec 08             	sub    $0x8,%esp
   129a1:	68 47 90 01 00       	push   $0x19047
   129a6:	ff 75 08             	pushl  0x8(%ebp)
   129a9:	e8 5d ff ff ff       	call   1290b <do_default_handler>
   129ae:	83 c4 10             	add    $0x10,%esp
}
   129b1:	90                   	nop
   129b2:	c9                   	leave  
   129b3:	c3                   	ret    

000129b4 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   129b4:	55                   	push   %ebp
   129b5:	89 e5                	mov    %esp,%ebp
   129b7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   129ba:	83 ec 08             	sub    $0x8,%esp
   129bd:	68 56 90 01 00       	push   $0x19056
   129c2:	ff 75 08             	pushl  0x8(%ebp)
   129c5:	e8 41 ff ff ff       	call   1290b <do_default_handler>
   129ca:	83 c4 10             	add    $0x10,%esp
}
   129cd:	90                   	nop
   129ce:	c9                   	leave  
   129cf:	c3                   	ret    

000129d0 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   129d0:	55                   	push   %ebp
   129d1:	89 e5                	mov    %esp,%ebp
   129d3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   129d6:	83 ec 08             	sub    $0x8,%esp
   129d9:	68 66 90 01 00       	push   $0x19066
   129de:	ff 75 08             	pushl  0x8(%ebp)
   129e1:	e8 25 ff ff ff       	call   1290b <do_default_handler>
   129e6:	83 c4 10             	add    $0x10,%esp
}
   129e9:	90                   	nop
   129ea:	c9                   	leave  
   129eb:	c3                   	ret    

000129ec <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   129ec:	55                   	push   %ebp
   129ed:	89 e5                	mov    %esp,%ebp
   129ef:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   129f2:	83 ec 08             	sub    $0x8,%esp
   129f5:	68 75 90 01 00       	push   $0x19075
   129fa:	ff 75 08             	pushl  0x8(%ebp)
   129fd:	e8 09 ff ff ff       	call   1290b <do_default_handler>
   12a02:	83 c4 10             	add    $0x10,%esp
}
   12a05:	90                   	nop
   12a06:	c9                   	leave  
   12a07:	c3                   	ret    

00012a08 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   12a08:	55                   	push   %ebp
   12a09:	89 e5                	mov    %esp,%ebp
   12a0b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   12a0e:	83 ec 08             	sub    $0x8,%esp
   12a11:	68 81 90 01 00       	push   $0x19081
   12a16:	ff 75 08             	pushl  0x8(%ebp)
   12a19:	e8 ed fe ff ff       	call   1290b <do_default_handler>
   12a1e:	83 c4 10             	add    $0x10,%esp
}
   12a21:	90                   	nop
   12a22:	c9                   	leave  
   12a23:	c3                   	ret    

00012a24 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   12a24:	55                   	push   %ebp
   12a25:	89 e5                	mov    %esp,%ebp
   12a27:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   12a2a:	83 ec 08             	sub    $0x8,%esp
   12a2d:	68 8b 90 01 00       	push   $0x1908b
   12a32:	ff 75 08             	pushl  0x8(%ebp)
   12a35:	e8 d1 fe ff ff       	call   1290b <do_default_handler>
   12a3a:	83 c4 10             	add    $0x10,%esp
}
   12a3d:	90                   	nop
   12a3e:	c9                   	leave  
   12a3f:	c3                   	ret    

00012a40 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   12a40:	55                   	push   %ebp
   12a41:	89 e5                	mov    %esp,%ebp
   12a43:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   12a46:	83 ec 08             	sub    $0x8,%esp
   12a49:	68 a1 90 01 00       	push   $0x190a1
   12a4e:	ff 75 08             	pushl  0x8(%ebp)
   12a51:	e8 b5 fe ff ff       	call   1290b <do_default_handler>
   12a56:	83 c4 10             	add    $0x10,%esp
}
   12a59:	90                   	nop
   12a5a:	c9                   	leave  
   12a5b:	c3                   	ret    

00012a5c <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   12a5c:	55                   	push   %ebp
   12a5d:	89 e5                	mov    %esp,%ebp
   12a5f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   12a62:	83 ec 08             	sub    $0x8,%esp
   12a65:	68 b1 90 01 00       	push   $0x190b1
   12a6a:	ff 75 08             	pushl  0x8(%ebp)
   12a6d:	e8 99 fe ff ff       	call   1290b <do_default_handler>
   12a72:	83 c4 10             	add    $0x10,%esp
}
   12a75:	90                   	nop
   12a76:	c9                   	leave  
   12a77:	c3                   	ret    

00012a78 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   12a78:	55                   	push   %ebp
   12a79:	89 e5                	mov    %esp,%ebp
   12a7b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   12a7e:	83 ec 08             	sub    $0x8,%esp
   12a81:	68 c7 90 01 00       	push   $0x190c7
   12a86:	ff 75 08             	pushl  0x8(%ebp)
   12a89:	e8 7d fe ff ff       	call   1290b <do_default_handler>
   12a8e:	83 c4 10             	add    $0x10,%esp
}
   12a91:	90                   	nop
   12a92:	c9                   	leave  
   12a93:	c3                   	ret    

00012a94 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   12a94:	55                   	push   %ebp
   12a95:	89 e5                	mov    %esp,%ebp
   12a97:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   12a9a:	83 ec 08             	sub    $0x8,%esp
   12a9d:	68 d5 90 01 00       	push   $0x190d5
   12aa2:	ff 75 08             	pushl  0x8(%ebp)
   12aa5:	e8 61 fe ff ff       	call   1290b <do_default_handler>
   12aaa:	83 c4 10             	add    $0x10,%esp
}
   12aad:	90                   	nop
   12aae:	c9                   	leave  
   12aaf:	c3                   	ret    

00012ab0 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   12ab0:	55                   	push   %ebp
   12ab1:	89 e5                	mov    %esp,%ebp
   12ab3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   12ab6:	83 ec 08             	sub    $0x8,%esp
   12ab9:	68 e1 90 01 00       	push   $0x190e1
   12abe:	ff 75 08             	pushl  0x8(%ebp)
   12ac1:	e8 45 fe ff ff       	call   1290b <do_default_handler>
   12ac6:	83 c4 10             	add    $0x10,%esp
}
   12ac9:	90                   	nop
   12aca:	c9                   	leave  
   12acb:	c3                   	ret    

00012acc <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   12acc:	55                   	push   %ebp
   12acd:	89 e5                	mov    %esp,%ebp
   12acf:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   12ad2:	83 ec 08             	sub    $0x8,%esp
   12ad5:	68 f6 90 01 00       	push   $0x190f6
   12ada:	ff 75 08             	pushl  0x8(%ebp)
   12add:	e8 29 fe ff ff       	call   1290b <do_default_handler>
   12ae2:	83 c4 10             	add    $0x10,%esp
}
   12ae5:	90                   	nop
   12ae6:	c9                   	leave  
   12ae7:	c3                   	ret    

00012ae8 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   12ae8:	55                   	push   %ebp
   12ae9:	89 e5                	mov    %esp,%ebp
   12aeb:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12aee:	83 ec 0c             	sub    $0xc,%esp
   12af1:	68 f8 8f 01 00       	push   $0x18ff8
   12af6:	e8 01 5e 00 00       	call   188fc <log_printf>
   12afb:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12afe:	83 ec 0c             	sub    $0xc,%esp
   12b01:	68 0c 91 01 00       	push   $0x1910c
   12b06:	e8 f1 5d 00 00       	call   188fc <log_printf>
   12b0b:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b11:	8b 40 34             	mov    0x34(%eax),%eax
   12b14:	83 e0 01             	and    $0x1,%eax
   12b17:	85 c0                	test   %eax,%eax
   12b19:	74 12                	je     12b2d <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12b1b:	83 ec 0c             	sub    $0xc,%esp
   12b1e:	68 38 91 01 00       	push   $0x19138
   12b23:	e8 d4 5d 00 00       	call   188fc <log_printf>
   12b28:	83 c4 10             	add    $0x10,%esp
   12b2b:	eb 10                	jmp    12b3d <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12b2d:	83 ec 0c             	sub    $0xc,%esp
   12b30:	68 b4 91 01 00       	push   $0x191b4
   12b35:	e8 c2 5d 00 00       	call   188fc <log_printf>
   12b3a:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12b3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12b40:	8b 40 34             	mov    0x34(%eax),%eax
   12b43:	83 e0 02             	and    $0x2,%eax
   12b46:	85 c0                	test   %eax,%eax
   12b48:	74 12                	je     12b5c <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12b4a:	83 ec 0c             	sub    $0xc,%esp
   12b4d:	68 0c 92 01 00       	push   $0x1920c
   12b52:	e8 a5 5d 00 00       	call   188fc <log_printf>
   12b57:	83 c4 10             	add    $0x10,%esp
   12b5a:	eb 10                	jmp    12b6c <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   12b5c:	83 ec 0c             	sub    $0xc,%esp
   12b5f:	68 58 92 01 00       	push   $0x19258
   12b64:	e8 93 5d 00 00       	call   188fc <log_printf>
   12b69:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6f:	8b 40 34             	mov    0x34(%eax),%eax
   12b72:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12b77:	83 ec 08             	sub    $0x8,%esp
   12b7a:	50                   	push   %eax
   12b7b:	68 84 92 01 00       	push   $0x19284
   12b80:	e8 77 5d 00 00       	call   188fc <log_printf>
   12b85:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12b88:	83 ec 0c             	sub    $0xc,%esp
   12b8b:	ff 75 08             	pushl  0x8(%ebp)
   12b8e:	e8 79 fc ff ff       	call   1280c <dump_core_regs>
   12b93:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12b96:	8b 45 08             	mov    0x8(%ebp),%eax
   12b99:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b9c:	83 e0 03             	and    $0x3,%eax
   12b9f:	85 c0                	test   %eax,%eax
   12ba1:	74 14                	je     12bb7 <do_handler_general_protection+0xcf>
        sys_exit(frame->error_code);
   12ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba6:	8b 40 34             	mov    0x34(%eax),%eax
   12ba9:	83 ec 0c             	sub    $0xc,%esp
   12bac:	50                   	push   %eax
   12bad:	e8 e8 f7 ff ff       	call   1239a <sys_exit>
   12bb2:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12bb5:	eb 07                	jmp    12bbe <do_handler_general_protection+0xd6>
            hlt();
   12bb7:	e8 2e fc ff ff       	call   127ea <hlt>
   12bbc:	eb f9                	jmp    12bb7 <do_handler_general_protection+0xcf>
}
   12bbe:	c9                   	leave  
   12bbf:	c3                   	ret    

00012bc0 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   12bc0:	55                   	push   %ebp
   12bc1:	89 e5                	mov    %esp,%ebp
   12bc3:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12bc6:	83 ec 0c             	sub    $0xc,%esp
   12bc9:	68 f8 8f 01 00       	push   $0x18ff8
   12bce:	e8 29 5d 00 00       	call   188fc <log_printf>
   12bd3:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12bd6:	83 ec 0c             	sub    $0xc,%esp
   12bd9:	68 98 92 01 00       	push   $0x19298
   12bde:	e8 19 5d 00 00       	call   188fc <log_printf>
   12be3:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12be6:	8b 45 08             	mov    0x8(%ebp),%eax
   12be9:	8b 40 34             	mov    0x34(%eax),%eax
   12bec:	83 e0 01             	and    $0x1,%eax
   12bef:	85 c0                	test   %eax,%eax
   12bf1:	74 18                	je     12c0b <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12bf3:	e8 b9 fb ff ff       	call   127b1 <read_cr2>
   12bf8:	83 ec 08             	sub    $0x8,%esp
   12bfb:	50                   	push   %eax
   12bfc:	68 bc 92 01 00       	push   $0x192bc
   12c01:	e8 f6 5c 00 00       	call   188fc <log_printf>
   12c06:	83 c4 10             	add    $0x10,%esp
   12c09:	eb 16                	jmp    12c21 <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   12c0b:	e8 a1 fb ff ff       	call   127b1 <read_cr2>
   12c10:	83 ec 08             	sub    $0x8,%esp
   12c13:	50                   	push   %eax
   12c14:	68 e4 92 01 00       	push   $0x192e4
   12c19:	e8 de 5c 00 00       	call   188fc <log_printf>
   12c1e:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12c21:	8b 45 08             	mov    0x8(%ebp),%eax
   12c24:	8b 40 34             	mov    0x34(%eax),%eax
   12c27:	83 e0 02             	and    $0x2,%eax
   12c2a:	85 c0                	test   %eax,%eax
   12c2c:	74 12                	je     12c40 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   12c2e:	83 ec 0c             	sub    $0xc,%esp
   12c31:	68 00 93 01 00       	push   $0x19300
   12c36:	e8 c1 5c 00 00       	call   188fc <log_printf>
   12c3b:	83 c4 10             	add    $0x10,%esp
   12c3e:	eb 10                	jmp    12c50 <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   12c40:	83 ec 0c             	sub    $0xc,%esp
   12c43:	68 2c 93 01 00       	push   $0x1932c
   12c48:	e8 af 5c 00 00       	call   188fc <log_printf>
   12c4d:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12c50:	8b 45 08             	mov    0x8(%ebp),%eax
   12c53:	8b 40 34             	mov    0x34(%eax),%eax
   12c56:	83 e0 02             	and    $0x2,%eax
   12c59:	85 c0                	test   %eax,%eax
   12c5b:	74 12                	je     12c6f <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12c5d:	83 ec 0c             	sub    $0xc,%esp
   12c60:	68 58 93 01 00       	push   $0x19358
   12c65:	e8 92 5c 00 00       	call   188fc <log_printf>
   12c6a:	83 c4 10             	add    $0x10,%esp
   12c6d:	eb 10                	jmp    12c7f <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   12c6f:	83 ec 0c             	sub    $0xc,%esp
   12c72:	68 84 93 01 00       	push   $0x19384
   12c77:	e8 80 5c 00 00       	call   188fc <log_printf>
   12c7c:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12c7f:	83 ec 0c             	sub    $0xc,%esp
   12c82:	ff 75 08             	pushl  0x8(%ebp)
   12c85:	e8 82 fb ff ff       	call   1280c <dump_core_regs>
   12c8a:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c90:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c93:	83 e0 03             	and    $0x3,%eax
   12c96:	85 c0                	test   %eax,%eax
   12c98:	74 14                	je     12cae <do_handler_page_fault+0xee>
        sys_exit(frame->error_code);
   12c9a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9d:	8b 40 34             	mov    0x34(%eax),%eax
   12ca0:	83 ec 0c             	sub    $0xc,%esp
   12ca3:	50                   	push   %eax
   12ca4:	e8 f1 f6 ff ff       	call   1239a <sys_exit>
   12ca9:	83 c4 10             	add    $0x10,%esp
        for (;;) {
            hlt();
        }
    }

}
   12cac:	eb 07                	jmp    12cb5 <do_handler_page_fault+0xf5>
            hlt();
   12cae:	e8 37 fb ff ff       	call   127ea <hlt>
   12cb3:	eb f9                	jmp    12cae <do_handler_page_fault+0xee>
}
   12cb5:	c9                   	leave  
   12cb6:	c3                   	ret    

00012cb7 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   12cb7:	55                   	push   %ebp
   12cb8:	89 e5                	mov    %esp,%ebp
   12cba:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   12cbd:	83 ec 08             	sub    $0x8,%esp
   12cc0:	68 aa 93 01 00       	push   $0x193aa
   12cc5:	ff 75 08             	pushl  0x8(%ebp)
   12cc8:	e8 3e fc ff ff       	call   1290b <do_default_handler>
   12ccd:	83 c4 10             	add    $0x10,%esp
}
   12cd0:	90                   	nop
   12cd1:	c9                   	leave  
   12cd2:	c3                   	ret    

00012cd3 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   12cd3:	55                   	push   %ebp
   12cd4:	89 e5                	mov    %esp,%ebp
   12cd6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   12cd9:	83 ec 08             	sub    $0x8,%esp
   12cdc:	68 c8 93 01 00       	push   $0x193c8
   12ce1:	ff 75 08             	pushl  0x8(%ebp)
   12ce4:	e8 22 fc ff ff       	call   1290b <do_default_handler>
   12ce9:	83 c4 10             	add    $0x10,%esp
}
   12cec:	90                   	nop
   12ced:	c9                   	leave  
   12cee:	c3                   	ret    

00012cef <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   12cef:	55                   	push   %ebp
   12cf0:	89 e5                	mov    %esp,%ebp
   12cf2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   12cf5:	83 ec 08             	sub    $0x8,%esp
   12cf8:	68 d9 93 01 00       	push   $0x193d9
   12cfd:	ff 75 08             	pushl  0x8(%ebp)
   12d00:	e8 06 fc ff ff       	call   1290b <do_default_handler>
   12d05:	83 c4 10             	add    $0x10,%esp
}
   12d08:	90                   	nop
   12d09:	c9                   	leave  
   12d0a:	c3                   	ret    

00012d0b <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   12d0b:	55                   	push   %ebp
   12d0c:	89 e5                	mov    %esp,%ebp
   12d0e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   12d11:	83 ec 08             	sub    $0x8,%esp
   12d14:	68 e8 93 01 00       	push   $0x193e8
   12d19:	ff 75 08             	pushl  0x8(%ebp)
   12d1c:	e8 ea fb ff ff       	call   1290b <do_default_handler>
   12d21:	83 c4 10             	add    $0x10,%esp
}
   12d24:	90                   	nop
   12d25:	c9                   	leave  
   12d26:	c3                   	ret    

00012d27 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   12d27:	55                   	push   %ebp
   12d28:	89 e5                	mov    %esp,%ebp
   12d2a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   12d2d:	83 ec 08             	sub    $0x8,%esp
   12d30:	68 07 94 01 00       	push   $0x19407
   12d35:	ff 75 08             	pushl  0x8(%ebp)
   12d38:	e8 ce fb ff ff       	call   1290b <do_default_handler>
   12d3d:	83 c4 10             	add    $0x10,%esp
}
   12d40:	90                   	nop
   12d41:	c9                   	leave  
   12d42:	c3                   	ret    

00012d43 <init_pic>:

static void init_pic(void) {
   12d43:	55                   	push   %ebp
   12d44:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d46:	6a 11                	push   $0x11
   12d48:	6a 20                	push   $0x20
   12d4a:	e8 35 fa ff ff       	call   12784 <outb>
   12d4f:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d52:	6a 20                	push   $0x20
   12d54:	6a 21                	push   $0x21
   12d56:	e8 29 fa ff ff       	call   12784 <outb>
   12d5b:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d5e:	6a 04                	push   $0x4
   12d60:	6a 21                	push   $0x21
   12d62:	e8 1d fa ff ff       	call   12784 <outb>
   12d67:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d6a:	6a 01                	push   $0x1
   12d6c:	6a 21                	push   $0x21
   12d6e:	e8 11 fa ff ff       	call   12784 <outb>
   12d73:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d76:	6a 11                	push   $0x11
   12d78:	68 a0 00 00 00       	push   $0xa0
   12d7d:	e8 02 fa ff ff       	call   12784 <outb>
   12d82:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d85:	6a 28                	push   $0x28
   12d87:	68 a1 00 00 00       	push   $0xa1
   12d8c:	e8 f3 f9 ff ff       	call   12784 <outb>
   12d91:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12d94:	6a 02                	push   $0x2
   12d96:	68 a1 00 00 00       	push   $0xa1
   12d9b:	e8 e4 f9 ff ff       	call   12784 <outb>
   12da0:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12da3:	6a 01                	push   $0x1
   12da5:	68 a1 00 00 00       	push   $0xa1
   12daa:	e8 d5 f9 ff ff       	call   12784 <outb>
   12daf:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12db2:	68 fb 00 00 00       	push   $0xfb
   12db7:	6a 21                	push   $0x21
   12db9:	e8 c6 f9 ff ff       	call   12784 <outb>
   12dbe:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12dc1:	68 ff 00 00 00       	push   $0xff
   12dc6:	68 a1 00 00 00       	push   $0xa1
   12dcb:	e8 b4 f9 ff ff       	call   12784 <outb>
   12dd0:	83 c4 08             	add    $0x8,%esp
}
   12dd3:	90                   	nop
   12dd4:	c9                   	leave  
   12dd5:	c3                   	ret    

00012dd6 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   12dd6:	55                   	push   %ebp
   12dd7:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12dd9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   12ddd:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12de1:	7e 0f                	jle    12df2 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12de3:	6a 20                	push   $0x20
   12de5:	68 a0 00 00 00       	push   $0xa0
   12dea:	e8 95 f9 ff ff       	call   12784 <outb>
   12def:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12df2:	6a 20                	push   $0x20
   12df4:	6a 20                	push   $0x20
   12df6:	e8 89 f9 ff ff       	call   12784 <outb>
   12dfb:	83 c4 08             	add    $0x8,%esp
}
   12dfe:	90                   	nop
   12dff:	c9                   	leave  
   12e00:	c3                   	ret    

00012e01 <irq_init>:

/**
 * @brief 中断和异常初始化
 */
void irq_init(void) {
   12e01:	55                   	push   %ebp
   12e02:	89 e5                	mov    %esp,%ebp
   12e04:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12e0e:	eb 25                	jmp    12e35 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   12e10:	ba 28 00 01 00       	mov    $0x10028,%edx
   12e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e18:	c1 e0 03             	shl    $0x3,%eax
   12e1b:	05 00 52 03 00       	add    $0x35200,%eax
   12e20:	68 00 8e 00 00       	push   $0x8e00
   12e25:	52                   	push   %edx
   12e26:	6a 08                	push   $0x8
   12e28:	50                   	push   %eax
   12e29:	e8 87 f7 ff ff       	call   125b5 <gate_desc_set>
   12e2e:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e31:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e35:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12e39:	76 d5                	jbe    12e10 <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

	// 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   12e3b:	83 ec 08             	sub    $0x8,%esp
   12e3e:	68 47 00 01 00       	push   $0x10047
   12e43:	6a 00                	push   $0x0
   12e45:	e8 65 01 00 00       	call   12faf <irq_install>
   12e4a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   12e4d:	83 ec 08             	sub    $0x8,%esp
   12e50:	68 66 00 01 00       	push   $0x10066
   12e55:	6a 01                	push   $0x1
   12e57:	e8 53 01 00 00       	call   12faf <irq_install>
   12e5c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   12e5f:	83 ec 08             	sub    $0x8,%esp
   12e62:	68 85 00 01 00       	push   $0x10085
   12e67:	6a 02                	push   $0x2
   12e69:	e8 41 01 00 00       	call   12faf <irq_install>
   12e6e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   12e71:	83 ec 08             	sub    $0x8,%esp
   12e74:	68 a4 00 01 00       	push   $0x100a4
   12e79:	6a 03                	push   $0x3
   12e7b:	e8 2f 01 00 00       	call   12faf <irq_install>
   12e80:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   12e83:	83 ec 08             	sub    $0x8,%esp
   12e86:	68 c3 00 01 00       	push   $0x100c3
   12e8b:	6a 04                	push   $0x4
   12e8d:	e8 1d 01 00 00       	call   12faf <irq_install>
   12e92:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   12e95:	83 ec 08             	sub    $0x8,%esp
   12e98:	68 e2 00 01 00       	push   $0x100e2
   12e9d:	6a 05                	push   $0x5
   12e9f:	e8 0b 01 00 00       	call   12faf <irq_install>
   12ea4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12ea7:	83 ec 08             	sub    $0x8,%esp
   12eaa:	68 01 01 01 00       	push   $0x10101
   12eaf:	6a 06                	push   $0x6
   12eb1:	e8 f9 00 00 00       	call   12faf <irq_install>
   12eb6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12eb9:	83 ec 08             	sub    $0x8,%esp
   12ebc:	68 20 01 01 00       	push   $0x10120
   12ec1:	6a 07                	push   $0x7
   12ec3:	e8 e7 00 00 00       	call   12faf <irq_install>
   12ec8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   12ecb:	83 ec 08             	sub    $0x8,%esp
   12ece:	68 3f 01 01 00       	push   $0x1013f
   12ed3:	6a 08                	push   $0x8
   12ed5:	e8 d5 00 00 00       	call   12faf <irq_install>
   12eda:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12edd:	83 ec 08             	sub    $0x8,%esp
   12ee0:	68 5c 01 01 00       	push   $0x1015c
   12ee5:	6a 0a                	push   $0xa
   12ee7:	e8 c3 00 00 00       	call   12faf <irq_install>
   12eec:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12eef:	83 ec 08             	sub    $0x8,%esp
   12ef2:	68 79 01 01 00       	push   $0x10179
   12ef7:	6a 0b                	push   $0xb
   12ef9:	e8 b1 00 00 00       	call   12faf <irq_install>
   12efe:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12f01:	83 ec 08             	sub    $0x8,%esp
   12f04:	68 96 01 01 00       	push   $0x10196
   12f09:	6a 0c                	push   $0xc
   12f0b:	e8 9f 00 00 00       	call   12faf <irq_install>
   12f10:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   12f13:	83 ec 08             	sub    $0x8,%esp
   12f16:	68 b3 01 01 00       	push   $0x101b3
   12f1b:	6a 0d                	push   $0xd
   12f1d:	e8 8d 00 00 00       	call   12faf <irq_install>
   12f22:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   12f25:	83 ec 08             	sub    $0x8,%esp
   12f28:	68 d0 01 01 00       	push   $0x101d0
   12f2d:	6a 0e                	push   $0xe
   12f2f:	e8 7b 00 00 00       	call   12faf <irq_install>
   12f34:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   12f37:	83 ec 08             	sub    $0x8,%esp
   12f3a:	68 ed 01 01 00       	push   $0x101ed
   12f3f:	6a 10                	push   $0x10
   12f41:	e8 69 00 00 00       	call   12faf <irq_install>
   12f46:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   12f49:	83 ec 08             	sub    $0x8,%esp
   12f4c:	68 0c 02 01 00       	push   $0x1020c
   12f51:	6a 11                	push   $0x11
   12f53:	e8 57 00 00 00       	call   12faf <irq_install>
   12f58:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   12f5b:	83 ec 08             	sub    $0x8,%esp
   12f5e:	68 29 02 01 00       	push   $0x10229
   12f63:	6a 12                	push   $0x12
   12f65:	e8 45 00 00 00       	call   12faf <irq_install>
   12f6a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   12f6d:	83 ec 08             	sub    $0x8,%esp
   12f70:	68 48 02 01 00       	push   $0x10248
   12f75:	6a 13                	push   $0x13
   12f77:	e8 33 00 00 00       	call   12faf <irq_install>
   12f7c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12f7f:	83 ec 08             	sub    $0x8,%esp
   12f82:	68 67 02 01 00       	push   $0x10267
   12f87:	6a 14                	push   $0x14
   12f89:	e8 21 00 00 00       	call   12faf <irq_install>
   12f8e:	83 c4 10             	add    $0x10,%esp


	lidt((uint32_t)idt_table, sizeof(idt_table));
   12f91:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f96:	83 ec 08             	sub    $0x8,%esp
   12f99:	68 00 04 00 00       	push   $0x400
   12f9e:	50                   	push   %eax
   12f9f:	e8 1e f8 ff ff       	call   127c2 <lidt>
   12fa4:	83 c4 10             	add    $0x10,%esp

	// 初始化pic 控制器
	init_pic();
   12fa7:	e8 97 fd ff ff       	call   12d43 <init_pic>
}
   12fac:	90                   	nop
   12fad:	c9                   	leave  
   12fae:	c3                   	ret    

00012faf <irq_install>:

/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   12faf:	55                   	push   %ebp
   12fb0:	89 e5                	mov    %esp,%ebp
   12fb2:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   12fb5:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12fb9:	7e 07                	jle    12fc2 <irq_install+0x13>
		return -1;
   12fbb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fc0:	eb 25                	jmp    12fe7 <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   12fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc5:	8b 55 08             	mov    0x8(%ebp),%edx
   12fc8:	c1 e2 03             	shl    $0x3,%edx
   12fcb:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12fd1:	68 00 8e 00 00       	push   $0x8e00
   12fd6:	50                   	push   %eax
   12fd7:	6a 08                	push   $0x8
   12fd9:	52                   	push   %edx
   12fda:	e8 d6 f5 ff ff       	call   125b5 <gate_desc_set>
   12fdf:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   12fe2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fe7:	c9                   	leave  
   12fe8:	c3                   	ret    

00012fe9 <irq_enable>:

void irq_enable(int irq_num) {
   12fe9:	55                   	push   %ebp
   12fea:	89 e5                	mov    %esp,%ebp
   12fec:	53                   	push   %ebx
   12fed:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12ff0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12ff4:	7e 78                	jle    1306e <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   12ff6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12ffa:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ffe:	7f 32                	jg     13032 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   13000:	6a 21                	push   $0x21
   13002:	e8 60 f7 ff ff       	call   12767 <inb>
   13007:	83 c4 04             	add    $0x4,%esp
   1300a:	89 c2                	mov    %eax,%edx
   1300c:	8b 45 08             	mov    0x8(%ebp),%eax
   1300f:	bb 01 00 00 00       	mov    $0x1,%ebx
   13014:	89 c1                	mov    %eax,%ecx
   13016:	d3 e3                	shl    %cl,%ebx
   13018:	89 d8                	mov    %ebx,%eax
   1301a:	f7 d0                	not    %eax
   1301c:	21 d0                	and    %edx,%eax
   1301e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   13021:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13025:	50                   	push   %eax
   13026:	6a 21                	push   $0x21
   13028:	e8 57 f7 ff ff       	call   12784 <outb>
   1302d:	83 c4 08             	add    $0x8,%esp
   13030:	eb 3d                	jmp    1306f <irq_enable+0x86>
    } else {
        irq_num -= 8;
   13032:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   13036:	68 a1 00 00 00       	push   $0xa1
   1303b:	e8 27 f7 ff ff       	call   12767 <inb>
   13040:	83 c4 04             	add    $0x4,%esp
   13043:	89 c2                	mov    %eax,%edx
   13045:	8b 45 08             	mov    0x8(%ebp),%eax
   13048:	bb 01 00 00 00       	mov    $0x1,%ebx
   1304d:	89 c1                	mov    %eax,%ecx
   1304f:	d3 e3                	shl    %cl,%ebx
   13051:	89 d8                	mov    %ebx,%eax
   13053:	f7 d0                	not    %eax
   13055:	21 d0                	and    %edx,%eax
   13057:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1305a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1305e:	50                   	push   %eax
   1305f:	68 a1 00 00 00       	push   $0xa1
   13064:	e8 1b f7 ff ff       	call   12784 <outb>
   13069:	83 c4 08             	add    $0x8,%esp
   1306c:	eb 01                	jmp    1306f <irq_enable+0x86>
        return;
   1306e:	90                   	nop
    }
}
   1306f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13072:	c9                   	leave  
   13073:	c3                   	ret    

00013074 <irq_disable>:

void irq_disable(int irq_num) {
   13074:	55                   	push   %ebp
   13075:	89 e5                	mov    %esp,%ebp
   13077:	53                   	push   %ebx
   13078:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1307b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1307f:	7e 74                	jle    130f5 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   13081:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   13085:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13089:	7f 30                	jg     130bb <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1308b:	6a 21                	push   $0x21
   1308d:	e8 d5 f6 ff ff       	call   12767 <inb>
   13092:	83 c4 04             	add    $0x4,%esp
   13095:	89 c3                	mov    %eax,%ebx
   13097:	8b 45 08             	mov    0x8(%ebp),%eax
   1309a:	ba 01 00 00 00       	mov    $0x1,%edx
   1309f:	89 c1                	mov    %eax,%ecx
   130a1:	d3 e2                	shl    %cl,%edx
   130a3:	89 d0                	mov    %edx,%eax
   130a5:	09 d8                	or     %ebx,%eax
   130a7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   130aa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130ae:	50                   	push   %eax
   130af:	6a 21                	push   $0x21
   130b1:	e8 ce f6 ff ff       	call   12784 <outb>
   130b6:	83 c4 08             	add    $0x8,%esp
   130b9:	eb 3b                	jmp    130f6 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   130bb:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   130bf:	68 a1 00 00 00       	push   $0xa1
   130c4:	e8 9e f6 ff ff       	call   12767 <inb>
   130c9:	83 c4 04             	add    $0x4,%esp
   130cc:	89 c3                	mov    %eax,%ebx
   130ce:	8b 45 08             	mov    0x8(%ebp),%eax
   130d1:	ba 01 00 00 00       	mov    $0x1,%edx
   130d6:	89 c1                	mov    %eax,%ecx
   130d8:	d3 e2                	shl    %cl,%edx
   130da:	89 d0                	mov    %edx,%eax
   130dc:	09 d8                	or     %ebx,%eax
   130de:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130e1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130e5:	50                   	push   %eax
   130e6:	68 a1 00 00 00       	push   $0xa1
   130eb:	e8 94 f6 ff ff       	call   12784 <outb>
   130f0:	83 c4 08             	add    $0x8,%esp
   130f3:	eb 01                	jmp    130f6 <irq_disable+0x82>
        return;
   130f5:	90                   	nop
    }
}
   130f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130f9:	c9                   	leave  
   130fa:	c3                   	ret    

000130fb <irq_disable_global>:

void irq_disable_global(void) {
   130fb:	55                   	push   %ebp
   130fc:	89 e5                	mov    %esp,%ebp
    cli();
   130fe:	e8 a0 f6 ff ff       	call   127a3 <cli>
}
   13103:	90                   	nop
   13104:	5d                   	pop    %ebp
   13105:	c3                   	ret    

00013106 <irq_enable_global>:

void irq_enable_global(void) {
   13106:	55                   	push   %ebp
   13107:	89 e5                	mov    %esp,%ebp
    sti();
   13109:	e8 9c f6 ff ff       	call   127aa <sti>
}
   1310e:	90                   	nop
   1310f:	5d                   	pop    %ebp
   13110:	c3                   	ret    

00013111 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection (void) {
   13111:	55                   	push   %ebp
   13112:	89 e5                	mov    %esp,%ebp
   13114:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   13117:	e8 d5 f6 ff ff       	call   127f1 <read_eflags>
   1311c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1311f:	e8 d7 ff ff ff       	call   130fb <irq_disable_global>
    return state;
   13124:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13127:	c9                   	leave  
   13128:	c3                   	ret    

00013129 <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection (irq_state_t state) {
   13129:	55                   	push   %ebp
   1312a:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1312c:	ff 75 08             	pushl  0x8(%ebp)
   1312f:	e8 cd f6 ff ff       	call   12801 <write_eflags>
   13134:	83 c4 04             	add    $0x4,%esp
}
   13137:	90                   	nop
   13138:	c9                   	leave  
   13139:	c3                   	ret    

0001313a <inb>:
static inline uint8_t inb(uint16_t  port) {
   1313a:	55                   	push   %ebp
   1313b:	89 e5                	mov    %esp,%ebp
   1313d:	83 ec 14             	sub    $0x14,%esp
   13140:	8b 45 08             	mov    0x8(%ebp),%eax
   13143:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   13147:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1314b:	89 c2                	mov    %eax,%edx
   1314d:	ec                   	in     (%dx),%al
   1314e:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   13151:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13155:	c9                   	leave  
   13156:	c3                   	ret    

00013157 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13157:	55                   	push   %ebp
   13158:	89 e5                	mov    %esp,%ebp
   1315a:	83 ec 08             	sub    $0x8,%esp
   1315d:	8b 55 08             	mov    0x8(%ebp),%edx
   13160:	8b 45 0c             	mov    0xc(%ebp),%eax
   13163:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13167:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1316a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1316e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13172:	ee                   	out    %al,(%dx)
}
   13173:	90                   	nop
   13174:	c9                   	leave  
   13175:	c3                   	ret    

00013176 <read_cursor_pos>:
static console_t console_buf[CONSOLE_NR];

/**
 * @brief 读取当前光标的位置
 */
static int read_cursor_pos (void) {
   13176:	55                   	push   %ebp
   13177:	89 e5                	mov    %esp,%ebp
   13179:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   1317c:	e8 90 ff ff ff       	call   13111 <irq_enter_protection>
   13181:	89 45 f4             	mov    %eax,-0xc(%ebp)
 	outb(0x3D4, 0x0F);		// 写低地址
   13184:	83 ec 08             	sub    $0x8,%esp
   13187:	6a 0f                	push   $0xf
   13189:	68 d4 03 00 00       	push   $0x3d4
   1318e:	e8 c4 ff ff ff       	call   13157 <outb>
   13193:	83 c4 10             	add    $0x10,%esp
	pos = inb(0x3D5);
   13196:	83 ec 0c             	sub    $0xc,%esp
   13199:	68 d5 03 00 00       	push   $0x3d5
   1319e:	e8 97 ff ff ff       	call   1313a <inb>
   131a3:	83 c4 10             	add    $0x10,%esp
   131a6:	0f b6 c0             	movzbl %al,%eax
   131a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0E);		// 写高地址
   131ac:	83 ec 08             	sub    $0x8,%esp
   131af:	6a 0e                	push   $0xe
   131b1:	68 d4 03 00 00       	push   $0x3d4
   131b6:	e8 9c ff ff ff       	call   13157 <outb>
   131bb:	83 c4 10             	add    $0x10,%esp
	pos |= inb(0x3D5) << 8;   
   131be:	83 ec 0c             	sub    $0xc,%esp
   131c1:	68 d5 03 00 00       	push   $0x3d5
   131c6:	e8 6f ff ff ff       	call   1313a <inb>
   131cb:	83 c4 10             	add    $0x10,%esp
   131ce:	0f b6 c0             	movzbl %al,%eax
   131d1:	c1 e0 08             	shl    $0x8,%eax
   131d4:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   131d7:	83 ec 0c             	sub    $0xc,%esp
   131da:	ff 75 f4             	pushl  -0xc(%ebp)
   131dd:	e8 47 ff ff ff       	call   13129 <irq_leave_protection>
   131e2:	83 c4 10             	add    $0x10,%esp
    return pos;
   131e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131e8:	c9                   	leave  
   131e9:	c3                   	ret    

000131ea <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos (console_t * console) {
   131ea:	55                   	push   %ebp
   131eb:	89 e5                	mov    %esp,%ebp
   131ed:	83 ec 18             	sub    $0x18,%esp
	uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   131f0:	8b 45 08             	mov    0x8(%ebp),%eax
   131f3:	ba 00 56 03 00       	mov    $0x35600,%edx
   131f8:	29 d0                	sub    %edx,%eax
   131fa:	c1 f8 03             	sar    $0x3,%eax
   131fd:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   13203:	89 c2                	mov    %eax,%edx
   13205:	8b 45 08             	mov    0x8(%ebp),%eax
   13208:	8b 40 14             	mov    0x14(%eax),%eax
   1320b:	89 c1                	mov    %eax,%ecx
   1320d:	8b 45 08             	mov    0x8(%ebp),%eax
   13210:	8b 40 10             	mov    0x10(%eax),%eax
   13213:	0f af c1             	imul   %ecx,%eax
   13216:	0f af c2             	imul   %edx,%eax
   13219:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row *  console->display_cols + console->cursor_col;
   1321d:	8b 45 08             	mov    0x8(%ebp),%eax
   13220:	8b 40 08             	mov    0x8(%eax),%eax
   13223:	89 c2                	mov    %eax,%edx
   13225:	8b 45 08             	mov    0x8(%ebp),%eax
   13228:	8b 40 14             	mov    0x14(%eax),%eax
   1322b:	0f af d0             	imul   %eax,%edx
   1322e:	8b 45 08             	mov    0x8(%ebp),%eax
   13231:	8b 40 0c             	mov    0xc(%eax),%eax
   13234:	01 d0                	add    %edx,%eax
   13236:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   1323a:	e8 d2 fe ff ff       	call   13111 <irq_enter_protection>
   1323f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0F);		// 写低地址
   13242:	83 ec 08             	sub    $0x8,%esp
   13245:	6a 0f                	push   $0xf
   13247:	68 d4 03 00 00       	push   $0x3d4
   1324c:	e8 06 ff ff ff       	call   13157 <outb>
   13251:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13254:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13258:	0f b6 c0             	movzbl %al,%eax
   1325b:	83 ec 08             	sub    $0x8,%esp
   1325e:	50                   	push   %eax
   1325f:	68 d5 03 00 00       	push   $0x3d5
   13264:	e8 ee fe ff ff       	call   13157 <outb>
   13269:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0x0E);		// 写高地址
   1326c:	83 ec 08             	sub    $0x8,%esp
   1326f:	6a 0e                	push   $0xe
   13271:	68 d4 03 00 00       	push   $0x3d4
   13276:	e8 dc fe ff ff       	call   13157 <outb>
   1327b:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   1327e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13282:	66 c1 e8 08          	shr    $0x8,%ax
   13286:	0f b6 c0             	movzbl %al,%eax
   13289:	83 ec 08             	sub    $0x8,%esp
   1328c:	50                   	push   %eax
   1328d:	68 d5 03 00 00       	push   $0x3d5
   13292:	e8 c0 fe ff ff       	call   13157 <outb>
   13297:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   1329a:	83 ec 0c             	sub    $0xc,%esp
   1329d:	ff 75 f0             	pushl  -0x10(%ebp)
   132a0:	e8 84 fe ff ff       	call   13129 <irq_leave_protection>
   132a5:	83 c4 10             	add    $0x10,%esp
}
   132a8:	90                   	nop
   132a9:	c9                   	leave  
   132aa:	c3                   	ret    

000132ab <console_select>:

void console_select(int idx) {
   132ab:	55                   	push   %ebp
   132ac:	89 e5                	mov    %esp,%ebp
   132ae:	83 ec 18             	sub    $0x18,%esp
    console_t * console = console_buf + idx;
   132b1:	8b 45 08             	mov    0x8(%ebp),%eax
   132b4:	6b c0 68             	imul   $0x68,%eax,%eax
   132b7:	05 00 56 03 00       	add    $0x35600,%eax
   132bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {
   132bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132c2:	8b 00                	mov    (%eax),%eax
   132c4:	85 c0                	test   %eax,%eax
   132c6:	75 0e                	jne    132d6 <console_select+0x2b>
        // 可能没有初始化，先初始化一下
        console_init(idx);
   132c8:	83 ec 0c             	sub    $0xc,%esp
   132cb:	ff 75 08             	pushl  0x8(%ebp)
   132ce:	e8 9e 04 00 00       	call   13771 <console_init>
   132d3:	83 c4 10             	add    $0x10,%esp
    }

	uint16_t pos = idx * console->display_cols * console->display_rows;
   132d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132d9:	8b 40 14             	mov    0x14(%eax),%eax
   132dc:	89 c2                	mov    %eax,%edx
   132de:	8b 45 08             	mov    0x8(%ebp),%eax
   132e1:	0f af d0             	imul   %eax,%edx
   132e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132e7:	8b 40 10             	mov    0x10(%eax),%eax
   132ea:	0f af c2             	imul   %edx,%eax
   132ed:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	outb(0x3D4, 0xC);		// 写高地址
   132f1:	83 ec 08             	sub    $0x8,%esp
   132f4:	6a 0c                	push   $0xc
   132f6:	68 d4 03 00 00       	push   $0x3d4
   132fb:	e8 57 fe ff ff       	call   13157 <outb>
   13300:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   13303:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13307:	66 c1 e8 08          	shr    $0x8,%ax
   1330b:	0f b6 c0             	movzbl %al,%eax
   1330e:	83 ec 08             	sub    $0x8,%esp
   13311:	50                   	push   %eax
   13312:	68 d5 03 00 00       	push   $0x3d5
   13317:	e8 3b fe ff ff       	call   13157 <outb>
   1331c:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0xD);		// 写低地址
   1331f:	83 ec 08             	sub    $0x8,%esp
   13322:	6a 0d                	push   $0xd
   13324:	68 d4 03 00 00       	push   $0x3d4
   13329:	e8 29 fe ff ff       	call   13157 <outb>
   1332e:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13331:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13335:	0f b6 c0             	movzbl %al,%eax
   13338:	83 ec 08             	sub    $0x8,%esp
   1333b:	50                   	push   %eax
   1333c:	68 d5 03 00 00       	push   $0x3d5
   13341:	e8 11 fe ff ff       	call   13157 <outb>
   13346:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    update_cursor_pos(console);
   13349:	83 ec 0c             	sub    $0xc,%esp
   1334c:	ff 75 f4             	pushl  -0xc(%ebp)
   1334f:	e8 96 fe ff ff       	call   131ea <update_cursor_pos>
   13354:	83 c4 10             	add    $0x10,%esp
}
   13357:	90                   	nop
   13358:	c9                   	leave  
   13359:	c3                   	ret    

0001335a <erase_rows>:
/**
 * @brief 擦除从start到end的行
 */
static void erase_rows (console_t * console, int start, int end) {
   1335a:	55                   	push   %ebp
   1335b:	89 e5                	mov    %esp,%ebp
   1335d:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t * disp_start = console->disp_base + console->display_cols * start;
   13360:	8b 45 08             	mov    0x8(%ebp),%eax
   13363:	8b 10                	mov    (%eax),%edx
   13365:	8b 45 08             	mov    0x8(%ebp),%eax
   13368:	8b 40 14             	mov    0x14(%eax),%eax
   1336b:	0f af 45 0c          	imul   0xc(%ebp),%eax
   1336f:	01 c0                	add    %eax,%eax
   13371:	01 d0                	add    %edx,%eax
   13373:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t * disp_end = console->disp_base + console->display_cols * (end + 1);
   13376:	8b 45 08             	mov    0x8(%ebp),%eax
   13379:	8b 10                	mov    (%eax),%edx
   1337b:	8b 45 08             	mov    0x8(%ebp),%eax
   1337e:	8b 40 14             	mov    0x14(%eax),%eax
   13381:	8b 4d 10             	mov    0x10(%ebp),%ecx
   13384:	83 c1 01             	add    $0x1,%ecx
   13387:	0f af c1             	imul   %ecx,%eax
   1338a:	01 c0                	add    %eax,%eax
   1338c:	01 d0                	add    %edx,%eax
   1338e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end) {
   13391:	eb 4d                	jmp    133e0 <erase_rows+0x86>
        disp_start->c = ' ';
   13393:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13396:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   13399:	8b 45 08             	mov    0x8(%ebp),%eax
   1339c:	8b 40 20             	mov    0x20(%eax),%eax
   1339f:	c1 e0 04             	shl    $0x4,%eax
   133a2:	c0 f8 04             	sar    $0x4,%al
   133a5:	8b 55 fc             	mov    -0x4(%ebp),%edx
   133a8:	83 e0 0f             	and    $0xf,%eax
   133ab:	89 c1                	mov    %eax,%ecx
   133ad:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133b1:	83 e0 f0             	and    $0xfffffff0,%eax
   133b4:	09 c8                	or     %ecx,%eax
   133b6:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   133b9:	8b 45 08             	mov    0x8(%ebp),%eax
   133bc:	8b 40 24             	mov    0x24(%eax),%eax
   133bf:	c1 e0 05             	shl    $0x5,%eax
   133c2:	c0 f8 05             	sar    $0x5,%al
   133c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
   133c8:	83 e0 07             	and    $0x7,%eax
   133cb:	c1 e0 04             	shl    $0x4,%eax
   133ce:	89 c1                	mov    %eax,%ecx
   133d0:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133d4:	83 e0 8f             	and    $0xffffff8f,%eax
   133d7:	09 c8                	or     %ecx,%eax
   133d9:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   133dc:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end) {
   133e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   133e3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   133e6:	72 ab                	jb     13393 <erase_rows+0x39>
    }
}
   133e8:	90                   	nop
   133e9:	c9                   	leave  
   133ea:	c3                   	ret    

000133eb <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t * console, int lines) {
   133eb:	55                   	push   %ebp
   133ec:	89 e5                	mov    %esp,%ebp
   133ee:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t * dest = console->disp_base;
   133f1:	8b 45 08             	mov    0x8(%ebp),%eax
   133f4:	8b 00                	mov    (%eax),%eax
   133f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t * src = console->disp_base + console->display_cols * lines;
   133f9:	8b 45 08             	mov    0x8(%ebp),%eax
   133fc:	8b 10                	mov    (%eax),%edx
   133fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13401:	8b 40 14             	mov    0x14(%eax),%eax
   13404:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13408:	01 c0                	add    %eax,%eax
   1340a:	01 d0                	add    %edx,%eax
   1340c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   1340f:	8b 45 08             	mov    0x8(%ebp),%eax
   13412:	8b 40 10             	mov    0x10(%eax),%eax
   13415:	2b 45 0c             	sub    0xc(%ebp),%eax
   13418:	89 c2                	mov    %eax,%edx
   1341a:	8b 45 08             	mov    0x8(%ebp),%eax
   1341d:	8b 40 14             	mov    0x14(%eax),%eax
   13420:	0f af c2             	imul   %edx,%eax
   13423:	01 c0                	add    %eax,%eax
   13425:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   13428:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1342b:	83 ec 04             	sub    $0x4,%esp
   1342e:	50                   	push   %eax
   1342f:	ff 75 f0             	pushl  -0x10(%ebp)
   13432:	ff 75 f4             	pushl  -0xc(%ebp)
   13435:	e8 c9 4e 00 00       	call   18303 <kernel_memcpy>
   1343a:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   1343d:	8b 45 08             	mov    0x8(%ebp),%eax
   13440:	8b 40 10             	mov    0x10(%eax),%eax
   13443:	8d 50 ff             	lea    -0x1(%eax),%edx
   13446:	8b 45 08             	mov    0x8(%ebp),%eax
   13449:	8b 40 10             	mov    0x10(%eax),%eax
   1344c:	2b 45 0c             	sub    0xc(%ebp),%eax
   1344f:	83 ec 04             	sub    $0x4,%esp
   13452:	52                   	push   %edx
   13453:	50                   	push   %eax
   13454:	ff 75 08             	pushl  0x8(%ebp)
   13457:	e8 fe fe ff ff       	call   1335a <erase_rows>
   1345c:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   1345f:	8b 45 08             	mov    0x8(%ebp),%eax
   13462:	8b 40 08             	mov    0x8(%eax),%eax
   13465:	2b 45 0c             	sub    0xc(%ebp),%eax
   13468:	89 c2                	mov    %eax,%edx
   1346a:	8b 45 08             	mov    0x8(%ebp),%eax
   1346d:	89 50 08             	mov    %edx,0x8(%eax)
}
   13470:	90                   	nop
   13471:	c9                   	leave  
   13472:	c3                   	ret    

00013473 <move_to_col0>:

static void move_to_col0 (console_t * console) {
   13473:	55                   	push   %ebp
   13474:	89 e5                	mov    %esp,%ebp
	console->cursor_col = 0;
   13476:	8b 45 08             	mov    0x8(%ebp),%eax
   13479:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13480:	90                   	nop
   13481:	5d                   	pop    %ebp
   13482:	c3                   	ret    

00013483 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line (console_t * console) {
   13483:	55                   	push   %ebp
   13484:	89 e5                	mov    %esp,%ebp
   13486:	83 ec 08             	sub    $0x8,%esp
	console->cursor_row++;
   13489:	8b 45 08             	mov    0x8(%ebp),%eax
   1348c:	8b 40 08             	mov    0x8(%eax),%eax
   1348f:	8d 50 01             	lea    0x1(%eax),%edx
   13492:	8b 45 08             	mov    0x8(%ebp),%eax
   13495:	89 50 08             	mov    %edx,0x8(%eax)

	// 超出当前屏幕显示的所有行，上移一行
	if (console->cursor_row >= console->display_rows) {
   13498:	8b 45 08             	mov    0x8(%ebp),%eax
   1349b:	8b 50 08             	mov    0x8(%eax),%edx
   1349e:	8b 45 08             	mov    0x8(%ebp),%eax
   134a1:	8b 40 10             	mov    0x10(%eax),%eax
   134a4:	39 c2                	cmp    %eax,%edx
   134a6:	7c 10                	jl     134b8 <move_next_line+0x35>
		scroll_up(console, 1);
   134a8:	83 ec 08             	sub    $0x8,%esp
   134ab:	6a 01                	push   $0x1
   134ad:	ff 75 08             	pushl  0x8(%ebp)
   134b0:	e8 36 ff ff ff       	call   133eb <scroll_up>
   134b5:	83 c4 10             	add    $0x10,%esp
	}
}
   134b8:	90                   	nop
   134b9:	c9                   	leave  
   134ba:	c3                   	ret    

000134bb <move_forward>:

/**
 * 将光标往前移一个字符
 */
static void move_forward (console_t * console, int n) {
   134bb:	55                   	push   %ebp
   134bc:	89 e5                	mov    %esp,%ebp
   134be:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < n; i++) {
   134c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   134c8:	eb 5c                	jmp    13526 <move_forward+0x6b>
		if (++console->cursor_col >= console->display_cols) {
   134ca:	8b 45 08             	mov    0x8(%ebp),%eax
   134cd:	8b 40 0c             	mov    0xc(%eax),%eax
   134d0:	8d 50 01             	lea    0x1(%eax),%edx
   134d3:	8b 45 08             	mov    0x8(%ebp),%eax
   134d6:	89 50 0c             	mov    %edx,0xc(%eax)
   134d9:	8b 45 08             	mov    0x8(%ebp),%eax
   134dc:	8b 50 0c             	mov    0xc(%eax),%edx
   134df:	8b 45 08             	mov    0x8(%ebp),%eax
   134e2:	8b 40 14             	mov    0x14(%eax),%eax
   134e5:	39 c2                	cmp    %eax,%edx
   134e7:	7c 39                	jl     13522 <move_forward+0x67>
			console->cursor_col = 0;
   134e9:	8b 45 08             	mov    0x8(%ebp),%eax
   134ec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   134f3:	8b 45 08             	mov    0x8(%ebp),%eax
   134f6:	8b 40 08             	mov    0x8(%eax),%eax
   134f9:	8d 50 01             	lea    0x1(%eax),%edx
   134fc:	8b 45 08             	mov    0x8(%ebp),%eax
   134ff:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows) {
   13502:	8b 45 08             	mov    0x8(%ebp),%eax
   13505:	8b 50 08             	mov    0x8(%eax),%edx
   13508:	8b 45 08             	mov    0x8(%ebp),%eax
   1350b:	8b 40 10             	mov    0x10(%eax),%eax
   1350e:	39 c2                	cmp    %eax,%edx
   13510:	7c 10                	jl     13522 <move_forward+0x67>
                // 超出末端，上移
                scroll_up(console, 1);
   13512:	83 ec 08             	sub    $0x8,%esp
   13515:	6a 01                	push   $0x1
   13517:	ff 75 08             	pushl  0x8(%ebp)
   1351a:	e8 cc fe ff ff       	call   133eb <scroll_up>
   1351f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < n; i++) {
   13522:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13526:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13529:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1352c:	7c 9c                	jl     134ca <move_forward+0xf>
            }
        }
	}
}
   1352e:	90                   	nop
   1352f:	c9                   	leave  
   13530:	c3                   	ret    

00013531 <show_char>:

/**
 * 在当前位置显示一个字符
 */
static void show_char(console_t * console, char c) {
   13531:	55                   	push   %ebp
   13532:	89 e5                	mov    %esp,%ebp
   13534:	83 ec 28             	sub    $0x28,%esp
   13537:	8b 45 0c             	mov    0xc(%ebp),%eax
   1353a:	88 45 e4             	mov    %al,-0x1c(%ebp)
    // 每显示一个字符，都进行计算，效率有点低。不过这样直观简单
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   1353d:	8b 45 08             	mov    0x8(%ebp),%eax
   13540:	8b 50 0c             	mov    0xc(%eax),%edx
   13543:	8b 45 08             	mov    0x8(%ebp),%eax
   13546:	8b 48 08             	mov    0x8(%eax),%ecx
   13549:	8b 45 08             	mov    0x8(%ebp),%eax
   1354c:	8b 40 14             	mov    0x14(%eax),%eax
   1354f:	0f af c1             	imul   %ecx,%eax
   13552:	01 d0                	add    %edx,%eax
   13554:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * p = console->disp_base + offset;
   13557:	8b 45 08             	mov    0x8(%ebp),%eax
   1355a:	8b 00                	mov    (%eax),%eax
   1355c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1355f:	01 d2                	add    %edx,%edx
   13561:	01 d0                	add    %edx,%eax
   13563:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   13566:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13569:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1356d:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   1356f:	8b 45 08             	mov    0x8(%ebp),%eax
   13572:	8b 40 20             	mov    0x20(%eax),%eax
   13575:	c1 e0 04             	shl    $0x4,%eax
   13578:	c0 f8 04             	sar    $0x4,%al
   1357b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1357e:	83 e0 0f             	and    $0xf,%eax
   13581:	89 c1                	mov    %eax,%ecx
   13583:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13587:	83 e0 f0             	and    $0xfffffff0,%eax
   1358a:	09 c8                	or     %ecx,%eax
   1358c:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   1358f:	8b 45 08             	mov    0x8(%ebp),%eax
   13592:	8b 40 24             	mov    0x24(%eax),%eax
   13595:	c1 e0 05             	shl    $0x5,%eax
   13598:	c0 f8 05             	sar    $0x5,%al
   1359b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1359e:	83 e0 07             	and    $0x7,%eax
   135a1:	c1 e0 04             	shl    $0x4,%eax
   135a4:	89 c1                	mov    %eax,%ecx
   135a6:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   135aa:	83 e0 8f             	and    $0xffffff8f,%eax
   135ad:	09 c8                	or     %ecx,%eax
   135af:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   135b2:	83 ec 08             	sub    $0x8,%esp
   135b5:	6a 01                	push   $0x1
   135b7:	ff 75 08             	pushl  0x8(%ebp)
   135ba:	e8 fc fe ff ff       	call   134bb <move_forward>
   135bf:	83 c4 10             	add    $0x10,%esp
}
   135c2:	90                   	nop
   135c3:	c9                   	leave  
   135c4:	c3                   	ret    

000135c5 <move_backword>:

/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword (console_t * console, int n) {
   135c5:	55                   	push   %ebp
   135c6:	89 e5                	mov    %esp,%ebp
   135c8:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   135cb:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++) {
   135d2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   135d9:	eb 55                	jmp    13630 <move_backword+0x6b>
        if (console->cursor_col > 0) {
   135db:	8b 45 08             	mov    0x8(%ebp),%eax
   135de:	8b 40 0c             	mov    0xc(%eax),%eax
   135e1:	85 c0                	test   %eax,%eax
   135e3:	7e 18                	jle    135fd <move_backword+0x38>
            // 非列超始处,可回退
            console->cursor_col--;
   135e5:	8b 45 08             	mov    0x8(%ebp),%eax
   135e8:	8b 40 0c             	mov    0xc(%eax),%eax
   135eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   135ee:	8b 45 08             	mov    0x8(%ebp),%eax
   135f1:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   135f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   135fb:	eb 2f                	jmp    1362c <move_backword+0x67>
        } else if (console->cursor_row > 0) {
   135fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13600:	8b 40 08             	mov    0x8(%eax),%eax
   13603:	85 c0                	test   %eax,%eax
   13605:	7e 25                	jle    1362c <move_backword+0x67>
            // 列起始处，但非首行，可回腿
            console->cursor_row--;
   13607:	8b 45 08             	mov    0x8(%ebp),%eax
   1360a:	8b 40 08             	mov    0x8(%eax),%eax
   1360d:	8d 50 ff             	lea    -0x1(%eax),%edx
   13610:	8b 45 08             	mov    0x8(%ebp),%eax
   13613:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   13616:	8b 45 08             	mov    0x8(%ebp),%eax
   13619:	8b 40 14             	mov    0x14(%eax),%eax
   1361c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1361f:	8b 45 08             	mov    0x8(%ebp),%eax
   13622:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   13625:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++) {
   1362c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13630:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13633:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13636:	7c a3                	jl     135db <move_backword+0x16>
        }
    }

    return status;
   13638:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1363b:	c9                   	leave  
   1363c:	c3                   	ret    

0001363d <clear_display>:

static void clear_display (console_t * console) {
   1363d:	55                   	push   %ebp
   1363e:	89 e5                	mov    %esp,%ebp
   13640:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13643:	8b 45 08             	mov    0x8(%ebp),%eax
   13646:	8b 50 14             	mov    0x14(%eax),%edx
   13649:	8b 45 08             	mov    0x8(%ebp),%eax
   1364c:	8b 40 10             	mov    0x10(%eax),%eax
   1364f:	0f af c2             	imul   %edx,%eax
   13652:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * start = console->disp_base;
   13655:	8b 45 08             	mov    0x8(%ebp),%eax
   13658:	8b 00                	mov    (%eax),%eax
   1365a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++) {
   1365d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13664:	eb 51                	jmp    136b7 <clear_display+0x7a>
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   13666:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13669:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   1366c:	8b 45 08             	mov    0x8(%ebp),%eax
   1366f:	8b 40 24             	mov    0x24(%eax),%eax
   13672:	c1 e0 05             	shl    $0x5,%eax
   13675:	c0 f8 05             	sar    $0x5,%al
   13678:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1367b:	83 e0 07             	and    $0x7,%eax
   1367e:	c1 e0 04             	shl    $0x4,%eax
   13681:	89 c1                	mov    %eax,%ecx
   13683:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13687:	83 e0 8f             	and    $0xffffff8f,%eax
   1368a:	09 c8                	or     %ecx,%eax
   1368c:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   1368f:	8b 45 08             	mov    0x8(%ebp),%eax
   13692:	8b 40 20             	mov    0x20(%eax),%eax
   13695:	c1 e0 04             	shl    $0x4,%eax
   13698:	c0 f8 04             	sar    $0x4,%al
   1369b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1369e:	83 e0 0f             	and    $0xf,%eax
   136a1:	89 c1                	mov    %eax,%ecx
   136a3:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   136a7:	83 e0 f0             	and    $0xfffffff0,%eax
   136aa:	09 c8                	or     %ecx,%eax
   136ac:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++) {
   136af:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   136b3:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   136b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   136ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   136bd:	7c a7                	jl     13666 <clear_display+0x29>
    }
}
   136bf:	90                   	nop
   136c0:	c9                   	leave  
   136c1:	c3                   	ret    

000136c2 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t * console) {
   136c2:	55                   	push   %ebp
   136c3:	89 e5                	mov    %esp,%ebp
   136c5:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   136c8:	8b 45 08             	mov    0x8(%ebp),%eax
   136cb:	8b 40 0c             	mov    0xc(%eax),%eax
   136ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8;		// 下一显示位置
   136d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136d4:	83 c0 07             	add    $0x7,%eax
   136d7:	8d 50 07             	lea    0x7(%eax),%edx
   136da:	85 c0                	test   %eax,%eax
   136dc:	0f 48 c2             	cmovs  %edx,%eax
   136df:	c1 f8 03             	sar    $0x3,%eax
   136e2:	c1 e0 03             	shl    $0x3,%eax
   136e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols) {
   136e8:	8b 45 08             	mov    0x8(%ebp),%eax
   136eb:	8b 40 14             	mov    0x14(%eax),%eax
   136ee:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   136f1:	7c 36                	jl     13729 <move_next_tab+0x67>
        col = 0;
   136f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   136fa:	8b 45 08             	mov    0x8(%ebp),%eax
   136fd:	8b 40 08             	mov    0x8(%eax),%eax
   13700:	8d 50 01             	lea    0x1(%eax),%edx
   13703:	8b 45 08             	mov    0x8(%ebp),%eax
   13706:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows) {
   13709:	8b 45 08             	mov    0x8(%ebp),%eax
   1370c:	8b 50 08             	mov    0x8(%eax),%edx
   1370f:	8b 45 08             	mov    0x8(%ebp),%eax
   13712:	8b 40 10             	mov    0x10(%eax),%eax
   13715:	39 c2                	cmp    %eax,%edx
   13717:	7c 10                	jl     13729 <move_next_tab+0x67>
            // 超出末端，上移
            scroll_up(console, 1);
   13719:	83 ec 08             	sub    $0x8,%esp
   1371c:	6a 01                	push   $0x1
   1371e:	ff 75 08             	pushl  0x8(%ebp)
   13721:	e8 c5 fc ff ff       	call   133eb <scroll_up>
   13726:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   13729:	8b 45 08             	mov    0x8(%ebp),%eax
   1372c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1372f:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13732:	90                   	nop
   13733:	c9                   	leave  
   13734:	c3                   	ret    

00013735 <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t * console) {
   13735:	55                   	push   %ebp
   13736:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   13738:	8b 45 08             	mov    0x8(%ebp),%eax
   1373b:	8b 50 0c             	mov    0xc(%eax),%edx
   1373e:	8b 45 08             	mov    0x8(%ebp),%eax
   13741:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13744:	8b 45 08             	mov    0x8(%ebp),%eax
   13747:	8b 50 08             	mov    0x8(%eax),%edx
   1374a:	8b 45 08             	mov    0x8(%ebp),%eax
   1374d:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13750:	90                   	nop
   13751:	5d                   	pop    %ebp
   13752:	c3                   	ret    

00013753 <restore_cursor>:

void restore_cursor(console_t * console) {
   13753:	55                   	push   %ebp
   13754:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   13756:	8b 45 08             	mov    0x8(%ebp),%eax
   13759:	8b 50 18             	mov    0x18(%eax),%edx
   1375c:	8b 45 08             	mov    0x8(%ebp),%eax
   1375f:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13762:	8b 45 08             	mov    0x8(%ebp),%eax
   13765:	8b 50 1c             	mov    0x1c(%eax),%edx
   13768:	8b 45 08             	mov    0x8(%ebp),%eax
   1376b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1376e:	90                   	nop
   1376f:	5d                   	pop    %ebp
   13770:	c3                   	ret    

00013771 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init (int idx) {
   13771:	55                   	push   %ebp
   13772:	89 e5                	mov    %esp,%ebp
   13774:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13777:	8b 45 08             	mov    0x8(%ebp),%eax
   1377a:	6b c0 68             	imul   $0x68,%eax,%eax
   1377d:	05 00 56 03 00       	add    $0x35600,%eax
   13782:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   13785:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13788:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   1378f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13792:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *) CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   13799:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1379c:	8b 40 14             	mov    0x14(%eax),%eax
   1379f:	0f af 45 08          	imul   0x8(%ebp),%eax
   137a3:	89 c2                	mov    %eax,%edx
   137a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137a8:	8b 40 10             	mov    0x10(%eax),%eax
   137ab:	0f af c2             	imul   %edx,%eax
   137ae:	01 c0                	add    %eax,%eax
   137b0:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   137b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137b9:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   137bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137be:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   137c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137c8:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0) {
   137cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   137d3:	75 30                	jne    13805 <console_init+0x94>
        int cursor_pos = read_cursor_pos();
   137d5:	e8 9c f9 ff ff       	call   13176 <read_cursor_pos>
   137da:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   137dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137e0:	8b 48 14             	mov    0x14(%eax),%ecx
   137e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137e6:	99                   	cltd   
   137e7:	f7 f9                	idiv   %ecx
   137e9:	89 c2                	mov    %eax,%edx
   137eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137ee:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   137f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137f4:	8b 48 14             	mov    0x14(%eax),%ecx
   137f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137fa:	99                   	cltd   
   137fb:	f7 f9                	idiv   %ecx
   137fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13800:	89 50 0c             	mov    %edx,0xc(%eax)
   13803:	eb 22                	jmp    13827 <console_init+0xb6>
    } else {
        console->cursor_row = 0;
   13805:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13808:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   1380f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13812:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   13819:	83 ec 0c             	sub    $0xc,%esp
   1381c:	ff 75 f4             	pushl  -0xc(%ebp)
   1381f:	e8 19 fe ff ff       	call   1363d <clear_display>
   13824:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   13827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1382a:	8b 50 08             	mov    0x8(%eax),%edx
   1382d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13830:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   13833:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13836:	8b 50 0c             	mov    0xc(%eax),%edx
   13839:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1383c:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   1383f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13842:	83 c0 54             	add    $0x54,%eax
   13845:	83 ec 0c             	sub    $0xc,%esp
   13848:	50                   	push   %eax
   13849:	e8 b9 43 00 00       	call   17c07 <mutex_init>
   1384e:	83 c4 10             	add    $0x10,%esp
	return 0;
   13851:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13856:	c9                   	leave  
   13857:	c3                   	ret    

00013858 <erase_backword>:

/**
 * 擦除前一字符
 * @param console
 */
static void erase_backword (console_t * console) {
   13858:	55                   	push   %ebp
   13859:	89 e5                	mov    %esp,%ebp
   1385b:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0) {
   1385e:	6a 01                	push   $0x1
   13860:	ff 75 08             	pushl  0x8(%ebp)
   13863:	e8 5d fd ff ff       	call   135c5 <move_backword>
   13868:	83 c4 08             	add    $0x8,%esp
   1386b:	85 c0                	test   %eax,%eax
   1386d:	75 20                	jne    1388f <erase_backword+0x37>
        show_char(console, ' ');
   1386f:	83 ec 08             	sub    $0x8,%esp
   13872:	6a 20                	push   $0x20
   13874:	ff 75 08             	pushl  0x8(%ebp)
   13877:	e8 b5 fc ff ff       	call   13531 <show_char>
   1387c:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   1387f:	83 ec 08             	sub    $0x8,%esp
   13882:	6a 01                	push   $0x1
   13884:	ff 75 08             	pushl  0x8(%ebp)
   13887:	e8 39 fd ff ff       	call   135c5 <move_backword>
   1388c:	83 c4 10             	add    $0x10,%esp
    }
}
   1388f:	90                   	nop
   13890:	c9                   	leave  
   13891:	c3                   	ret    

00013892 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal (console_t * console, char c) {
   13892:	55                   	push   %ebp
   13893:	89 e5                	mov    %esp,%ebp
   13895:	83 ec 18             	sub    $0x18,%esp
   13898:	8b 45 0c             	mov    0xc(%ebp),%eax
   1389b:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   1389e:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   138a2:	83 f8 0a             	cmp    $0xa,%eax
   138a5:	74 70                	je     13917 <write_normal+0x85>
   138a7:	83 f8 0a             	cmp    $0xa,%eax
   138aa:	7f 0c                	jg     138b8 <write_normal+0x26>
   138ac:	83 f8 08             	cmp    $0x8,%eax
   138af:	74 34                	je     138e5 <write_normal+0x53>
   138b1:	83 f8 09             	cmp    $0x9,%eax
   138b4:	74 41                	je     138f7 <write_normal+0x65>
   138b6:	eb 6f                	jmp    13927 <write_normal+0x95>
   138b8:	83 f8 1b             	cmp    $0x1b,%eax
   138bb:	74 0c                	je     138c9 <write_normal+0x37>
   138bd:	83 f8 7f             	cmp    $0x7f,%eax
   138c0:	74 13                	je     138d5 <write_normal+0x43>
   138c2:	83 f8 0d             	cmp    $0xd,%eax
   138c5:	74 40                	je     13907 <write_normal+0x75>
   138c7:	eb 5e                	jmp    13927 <write_normal+0x95>
        case ASCII_ESC:
            console->write_state = CONSOLE_WRITE_ESC;
   138c9:	8b 45 08             	mov    0x8(%ebp),%eax
   138cc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            break;
   138d3:	eb 72                	jmp    13947 <write_normal+0xb5>
        case 0x7F:
            erase_backword(console);
   138d5:	83 ec 0c             	sub    $0xc,%esp
   138d8:	ff 75 08             	pushl  0x8(%ebp)
   138db:	e8 78 ff ff ff       	call   13858 <erase_backword>
   138e0:	83 c4 10             	add    $0x10,%esp
            break;
   138e3:	eb 62                	jmp    13947 <write_normal+0xb5>
        case '\b':		// 左移一个字符
            move_backword(console, 1);
   138e5:	83 ec 08             	sub    $0x8,%esp
   138e8:	6a 01                	push   $0x1
   138ea:	ff 75 08             	pushl  0x8(%ebp)
   138ed:	e8 d3 fc ff ff       	call   135c5 <move_backword>
   138f2:	83 c4 10             	add    $0x10,%esp
            break;
   138f5:	eb 50                	jmp    13947 <write_normal+0xb5>
            // 换行处理
        case '\t':		// 对齐的下一制表符
            move_next_tab(console);
   138f7:	83 ec 0c             	sub    $0xc,%esp
   138fa:	ff 75 08             	pushl  0x8(%ebp)
   138fd:	e8 c0 fd ff ff       	call   136c2 <move_next_tab>
   13902:	83 c4 10             	add    $0x10,%esp
            break;
   13905:	eb 40                	jmp    13947 <write_normal+0xb5>
        case '\r':
            move_to_col0(console);
   13907:	83 ec 0c             	sub    $0xc,%esp
   1390a:	ff 75 08             	pushl  0x8(%ebp)
   1390d:	e8 61 fb ff ff       	call   13473 <move_to_col0>
   13912:	83 c4 10             	add    $0x10,%esp
            break;
   13915:	eb 30                	jmp    13947 <write_normal+0xb5>
        case '\n':  // 暂时这样处理
            //move_to_col0(console);
            move_next_line(console);
   13917:	83 ec 0c             	sub    $0xc,%esp
   1391a:	ff 75 08             	pushl  0x8(%ebp)
   1391d:	e8 61 fb ff ff       	call   13483 <move_next_line>
   13922:	83 c4 10             	add    $0x10,%esp
            break;
   13925:	eb 20                	jmp    13947 <write_normal+0xb5>
            // 普通字符显示
        default: {
            if ((c >= ' ') && (c <= '~')) {
   13927:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   1392b:	7e 19                	jle    13946 <write_normal+0xb4>
   1392d:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13931:	74 13                	je     13946 <write_normal+0xb4>
                show_char(console, c);
   13933:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13937:	83 ec 08             	sub    $0x8,%esp
   1393a:	50                   	push   %eax
   1393b:	ff 75 08             	pushl  0x8(%ebp)
   1393e:	e8 ee fb ff ff       	call   13531 <show_char>
   13943:	83 c4 10             	add    $0x10,%esp
            }
            break;
   13946:	90                   	nop
        }
    }
}
   13947:	90                   	nop
   13948:	c9                   	leave  
   13949:	c3                   	ret    

0001394a <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param (console_t * console) {
   1394a:	55                   	push   %ebp
   1394b:	89 e5                	mov    %esp,%ebp
   1394d:	83 ec 08             	sub    $0x8,%esp
	kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13950:	8b 45 08             	mov    0x8(%ebp),%eax
   13953:	83 c0 28             	add    $0x28,%eax
   13956:	83 ec 04             	sub    $0x4,%esp
   13959:	6a 28                	push   $0x28
   1395b:	6a 00                	push   $0x0
   1395d:	50                   	push   %eax
   1395e:	e8 ef 49 00 00       	call   18352 <kernel_memset>
   13963:	83 c4 10             	add    $0x10,%esp
	console->curr_param_index = 0;
   13966:	8b 45 08             	mov    0x8(%ebp),%eax
   13969:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13970:	90                   	nop
   13971:	c9                   	leave  
   13972:	c3                   	ret    

00013973 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc (console_t * console, char c) {
   13973:	55                   	push   %ebp
   13974:	89 e5                	mov    %esp,%ebp
   13976:	83 ec 18             	sub    $0x18,%esp
   13979:	8b 45 0c             	mov    0xc(%ebp),%eax
   1397c:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c) {
   1397f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13983:	83 f8 38             	cmp    $0x38,%eax
   13986:	74 21                	je     139a9 <write_esc+0x36>
   13988:	83 f8 5b             	cmp    $0x5b,%eax
   1398b:	74 33                	je     139c0 <write_esc+0x4d>
   1398d:	83 f8 37             	cmp    $0x37,%eax
   13990:	75 48                	jne    139da <write_esc+0x67>
        case '7':		// ESC 7 保存光标
            save_cursor(console);
   13992:	ff 75 08             	pushl  0x8(%ebp)
   13995:	e8 9b fd ff ff       	call   13735 <save_cursor>
   1399a:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   1399d:	8b 45 08             	mov    0x8(%ebp),%eax
   139a0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   139a7:	eb 3c                	jmp    139e5 <write_esc+0x72>
        case '8':		// ESC 8 恢复光标
            restore_cursor(console);
   139a9:	ff 75 08             	pushl  0x8(%ebp)
   139ac:	e8 a2 fd ff ff       	call   13753 <restore_cursor>
   139b1:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   139b4:	8b 45 08             	mov    0x8(%ebp),%eax
   139b7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   139be:	eb 25                	jmp    139e5 <write_esc+0x72>
        case '[':
            clear_esc_param(console);
   139c0:	83 ec 0c             	sub    $0xc,%esp
   139c3:	ff 75 08             	pushl  0x8(%ebp)
   139c6:	e8 7f ff ff ff       	call   1394a <clear_esc_param>
   139cb:	83 c4 10             	add    $0x10,%esp
            console->write_state = CONSOLE_WRITE_SQUARE;
   139ce:	8b 45 08             	mov    0x8(%ebp),%eax
   139d1:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
            break;
   139d8:	eb 0b                	jmp    139e5 <write_esc+0x72>
        default:
            console->write_state = CONSOLE_WRITE_NORMAL;
   139da:	8b 45 08             	mov    0x8(%ebp),%eax
   139dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   139e4:	90                   	nop
    }
}
   139e5:	90                   	nop
   139e6:	c9                   	leave  
   139e7:	c3                   	ret    

000139e8 <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style (console_t * console) {
   139e8:	55                   	push   %ebp
   139e9:	89 e5                	mov    %esp,%ebp
   139eb:	83 ec 10             	sub    $0x10,%esp
	static const cclor_t color_table[] = {
			COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow, // 0-3
			COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
	};

	for (int i = 0; i < console->curr_param_index; i++) {
   139ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   139f5:	eb 78                	jmp    13a6f <set_font_style+0x87>
		int param = console->esc_param[i];
   139f7:	8b 45 08             	mov    0x8(%ebp),%eax
   139fa:	8b 55 fc             	mov    -0x4(%ebp),%edx
   139fd:	83 c2 08             	add    $0x8,%edx
   13a00:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13a04:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if ((param >= 30) && (param <= 37)) {  // 前景色：30-37
   13a07:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13a0b:	7e 1b                	jle    13a28 <set_font_style+0x40>
   13a0d:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13a11:	7f 15                	jg     13a28 <set_font_style+0x40>
			console->foreground = color_table[param - 30];
   13a13:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a16:	83 e8 1e             	sub    $0x1e,%eax
   13a19:	8b 14 85 00 95 01 00 	mov    0x19500(,%eax,4),%edx
   13a20:	8b 45 08             	mov    0x8(%ebp),%eax
   13a23:	89 50 20             	mov    %edx,0x20(%eax)
   13a26:	eb 43                	jmp    13a6b <set_font_style+0x83>
		} else if ((param >= 40) && (param <= 47)) {
   13a28:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13a2c:	7e 1b                	jle    13a49 <set_font_style+0x61>
   13a2e:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13a32:	7f 15                	jg     13a49 <set_font_style+0x61>
			console->background = color_table[param - 40];
   13a34:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a37:	83 e8 28             	sub    $0x28,%eax
   13a3a:	8b 14 85 00 95 01 00 	mov    0x19500(,%eax,4),%edx
   13a41:	8b 45 08             	mov    0x8(%ebp),%eax
   13a44:	89 50 24             	mov    %edx,0x24(%eax)
   13a47:	eb 22                	jmp    13a6b <set_font_style+0x83>
		} else if (param == 39) { // 39=默认前景色
   13a49:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13a4d:	75 0c                	jne    13a5b <set_font_style+0x73>
			console->foreground = COLOR_White;
   13a4f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a52:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13a59:	eb 10                	jmp    13a6b <set_font_style+0x83>
		} else if (param == 49) { // 49=默认背景色
   13a5b:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13a5f:	75 0a                	jne    13a6b <set_font_style+0x83>
			console->background = COLOR_Black;
   13a61:	8b 45 08             	mov    0x8(%ebp),%eax
   13a64:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
	for (int i = 0; i < console->curr_param_index; i++) {
   13a6b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13a6f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a72:	8b 40 50             	mov    0x50(%eax),%eax
   13a75:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13a78:	0f 8c 79 ff ff ff    	jl     139f7 <set_font_style+0xf>
		}
	}
}
   13a7e:	90                   	nop
   13a7f:	c9                   	leave  
   13a80:	c3                   	ret    

00013a81 <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left (console_t * console, int n) {
   13a81:	55                   	push   %ebp
   13a82:	89 e5                	mov    %esp,%ebp
   13a84:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13a87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a8b:	75 07                	jne    13a94 <move_left+0x13>
        n = 1;
   13a8d:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13a94:	8b 45 08             	mov    0x8(%ebp),%eax
   13a97:	8b 40 0c             	mov    0xc(%eax),%eax
   13a9a:	2b 45 0c             	sub    0xc(%ebp),%eax
   13a9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13aa0:	b8 00 00 00 00       	mov    $0x0,%eax
   13aa5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13aa9:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   13aad:	89 c2                	mov    %eax,%edx
   13aaf:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab2:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13ab5:	90                   	nop
   13ab6:	c9                   	leave  
   13ab7:	c3                   	ret    

00013ab8 <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right (console_t * console, int n) {
   13ab8:	55                   	push   %ebp
   13ab9:	89 e5                	mov    %esp,%ebp
   13abb:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13abe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ac2:	75 07                	jne    13acb <move_right+0x13>
        n = 1;
   13ac4:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13acb:	8b 45 08             	mov    0x8(%ebp),%eax
   13ace:	8b 50 0c             	mov    0xc(%eax),%edx
   13ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ad4:	01 d0                	add    %edx,%eax
   13ad6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols) {
   13ad9:	8b 45 08             	mov    0x8(%ebp),%eax
   13adc:	8b 40 14             	mov    0x14(%eax),%eax
   13adf:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13ae2:	7c 11                	jl     13af5 <move_right+0x3d>
        console->cursor_col = console->display_cols - 1;
   13ae4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae7:	8b 40 14             	mov    0x14(%eax),%eax
   13aea:	8d 50 ff             	lea    -0x1(%eax),%edx
   13aed:	8b 45 08             	mov    0x8(%ebp),%eax
   13af0:	89 50 0c             	mov    %edx,0xc(%eax)
    } else {
        console->cursor_col = col;
    }
}
   13af3:	eb 09                	jmp    13afe <move_right+0x46>
        console->cursor_col = col;
   13af5:	8b 45 08             	mov    0x8(%ebp),%eax
   13af8:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13afb:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13afe:	90                   	nop
   13aff:	c9                   	leave  
   13b00:	c3                   	ret    

00013b01 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t * console) {
   13b01:	55                   	push   %ebp
   13b02:	89 e5                	mov    %esp,%ebp
	if (console->curr_param_index >= 1) {
   13b04:	8b 45 08             	mov    0x8(%ebp),%eax
   13b07:	8b 40 50             	mov    0x50(%eax),%eax
   13b0a:	85 c0                	test   %eax,%eax
   13b0c:	7e 0c                	jle    13b1a <move_cursor+0x19>
		console->cursor_row = console->esc_param[0];
   13b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b11:	8b 50 28             	mov    0x28(%eax),%edx
   13b14:	8b 45 08             	mov    0x8(%ebp),%eax
   13b17:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if (console->curr_param_index >= 2) {
   13b1a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1d:	8b 40 50             	mov    0x50(%eax),%eax
   13b20:	83 f8 01             	cmp    $0x1,%eax
   13b23:	7e 0c                	jle    13b31 <move_cursor+0x30>
		console->cursor_col = console->esc_param[1];
   13b25:	8b 45 08             	mov    0x8(%ebp),%eax
   13b28:	8b 50 2c             	mov    0x2c(%eax),%edx
   13b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b2e:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
   13b31:	90                   	nop
   13b32:	5d                   	pop    %ebp
   13b33:	c3                   	ret    

00013b34 <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t * console) {
   13b34:	55                   	push   %ebp
   13b35:	89 e5                	mov    %esp,%ebp
   13b37:	83 ec 10             	sub    $0x10,%esp
	if (console->curr_param_index <= 0) {
   13b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b3d:	8b 40 50             	mov    0x50(%eax),%eax
   13b40:	85 c0                	test   %eax,%eax
   13b42:	7e 3e                	jle    13b82 <erase_in_display+0x4e>
		return;
	}

	int param = console->esc_param[0];
   13b44:	8b 45 08             	mov    0x8(%ebp),%eax
   13b47:	8b 40 28             	mov    0x28(%eax),%eax
   13b4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (param == 2) {
   13b4d:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13b51:	75 30                	jne    13b83 <erase_in_display+0x4f>
		// 擦除整个屏幕
		erase_rows(console, 0, console->display_rows - 1);
   13b53:	8b 45 08             	mov    0x8(%ebp),%eax
   13b56:	8b 40 10             	mov    0x10(%eax),%eax
   13b59:	83 e8 01             	sub    $0x1,%eax
   13b5c:	50                   	push   %eax
   13b5d:	6a 00                	push   $0x0
   13b5f:	ff 75 08             	pushl  0x8(%ebp)
   13b62:	e8 f3 f7 ff ff       	call   1335a <erase_rows>
   13b67:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b6d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13b74:	8b 45 08             	mov    0x8(%ebp),%eax
   13b77:	8b 50 08             	mov    0x8(%eax),%edx
   13b7a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7d:	89 50 0c             	mov    %edx,0xc(%eax)
   13b80:	eb 01                	jmp    13b83 <erase_in_display+0x4f>
		return;
   13b82:	90                   	nop
	}
}
   13b83:	c9                   	leave  
   13b84:	c3                   	ret    

00013b85 <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square (console_t * console, char c) {
   13b85:	55                   	push   %ebp
   13b86:	89 e5                	mov    %esp,%ebp
   13b88:	83 ec 14             	sub    $0x14,%esp
   13b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b8e:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9')) {
   13b91:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13b95:	7e 44                	jle    13bdb <write_esc_square+0x56>
   13b97:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13b9b:	7f 3e                	jg     13bdb <write_esc_square+0x56>
        // 解析当前参数
        int * param = &console->esc_param[console->curr_param_index];
   13b9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba0:	8b 40 50             	mov    0x50(%eax),%eax
   13ba3:	83 c0 08             	add    $0x8,%eax
   13ba6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13bad:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb0:	01 d0                	add    %edx,%eax
   13bb2:	83 c0 08             	add    $0x8,%eax
   13bb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13bb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13bbb:	8b 10                	mov    (%eax),%edx
   13bbd:	89 d0                	mov    %edx,%eax
   13bbf:	c1 e0 02             	shl    $0x2,%eax
   13bc2:	01 d0                	add    %edx,%eax
   13bc4:	01 c0                	add    %eax,%eax
   13bc6:	89 c2                	mov    %eax,%edx
   13bc8:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13bcc:	01 d0                	add    %edx,%eax
   13bce:	8d 50 d0             	lea    -0x30(%eax),%edx
   13bd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13bd4:	89 10                	mov    %edx,(%eax)
    if ((c >= '0') && (c <= '9')) {
   13bd6:	e9 9e 00 00 00       	jmp    13c79 <write_esc_square+0xf4>
    } else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX) {
   13bdb:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13bdf:	75 1c                	jne    13bfd <write_esc_square+0x78>
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	8b 40 50             	mov    0x50(%eax),%eax
   13be7:	83 f8 09             	cmp    $0x9,%eax
   13bea:	7f 11                	jg     13bfd <write_esc_square+0x78>
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13bec:	8b 45 08             	mov    0x8(%ebp),%eax
   13bef:	8b 40 50             	mov    0x50(%eax),%eax
   13bf2:	8d 50 01             	lea    0x1(%eax),%edx
   13bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf8:	89 50 50             	mov    %edx,0x50(%eax)
   13bfb:	eb 7c                	jmp    13c79 <write_esc_square+0xf4>
    } else {
        // 结束上一字符的处理
        console->curr_param_index++;
   13bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   13c00:	8b 40 50             	mov    0x50(%eax),%eax
   13c03:	8d 50 01             	lea    0x1(%eax),%edx
   13c06:	8b 45 08             	mov    0x8(%ebp),%eax
   13c09:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c) {
   13c0c:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13c10:	83 e8 43             	sub    $0x43,%eax
   13c13:	83 f8 2a             	cmp    $0x2a,%eax
   13c16:	77 57                	ja     13c6f <write_esc_square+0xea>
   13c18:	8b 04 85 40 94 01 00 	mov    0x19440(,%eax,4),%eax
   13c1f:	ff e0                	jmp    *%eax
        case 'm': // 设置字符属性
            set_font_style(console);
   13c21:	ff 75 08             	pushl  0x8(%ebp)
   13c24:	e8 bf fd ff ff       	call   139e8 <set_font_style>
   13c29:	83 c4 04             	add    $0x4,%esp
            break;
   13c2c:	eb 41                	jmp    13c6f <write_esc_square+0xea>
        case 'D':	// 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13c2e:	8b 45 08             	mov    0x8(%ebp),%eax
   13c31:	8b 40 28             	mov    0x28(%eax),%eax
   13c34:	50                   	push   %eax
   13c35:	ff 75 08             	pushl  0x8(%ebp)
   13c38:	e8 44 fe ff ff       	call   13a81 <move_left>
   13c3d:	83 c4 08             	add    $0x8,%esp
            break;
   13c40:	eb 2d                	jmp    13c6f <write_esc_square+0xea>
        case 'C':
            move_right(console, console->esc_param[0]);
   13c42:	8b 45 08             	mov    0x8(%ebp),%eax
   13c45:	8b 40 28             	mov    0x28(%eax),%eax
   13c48:	50                   	push   %eax
   13c49:	ff 75 08             	pushl  0x8(%ebp)
   13c4c:	e8 67 fe ff ff       	call   13ab8 <move_right>
   13c51:	83 c4 08             	add    $0x8,%esp
            break;
   13c54:	eb 19                	jmp    13c6f <write_esc_square+0xea>
        case 'H':
        case 'f':
            move_cursor(console);
   13c56:	ff 75 08             	pushl  0x8(%ebp)
   13c59:	e8 a3 fe ff ff       	call   13b01 <move_cursor>
   13c5e:	83 c4 04             	add    $0x4,%esp
            break;
   13c61:	eb 0c                	jmp    13c6f <write_esc_square+0xea>
        case 'J':
            erase_in_display(console);
   13c63:	ff 75 08             	pushl  0x8(%ebp)
   13c66:	e8 c9 fe ff ff       	call   13b34 <erase_in_display>
   13c6b:	83 c4 04             	add    $0x4,%esp
            break;
   13c6e:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   13c72:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13c79:	90                   	nop
   13c7a:	c9                   	leave  
   13c7b:	c3                   	ret    

00013c7c <console_write>:

/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write (tty_t * tty) {
   13c7c:	55                   	push   %ebp
   13c7d:	89 e5                	mov    %esp,%ebp
   13c7f:	83 ec 18             	sub    $0x18,%esp
	console_t * console = console_buf + tty->console_idx;
   13c82:	8b 45 08             	mov    0x8(%ebp),%eax
   13c85:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13c8b:	6b c0 68             	imul   $0x68,%eax,%eax
   13c8e:	05 00 56 03 00       	add    $0x35600,%eax
   13c93:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13c96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c99:	83 c0 54             	add    $0x54,%eax
   13c9c:	83 ec 0c             	sub    $0xc,%esp
   13c9f:	50                   	push   %eax
   13ca0:	e8 90 3f 00 00       	call   17c35 <mutex_lock>
   13ca5:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13ca8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13caf:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb2:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13cb8:	83 ec 08             	sub    $0x8,%esp
   13cbb:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13cbe:	50                   	push   %eax
   13cbf:	52                   	push   %edx
   13cc0:	e8 17 14 00 00       	call   150dc <tty_fifo_get>
   13cc5:	83 c4 10             	add    $0x10,%esp
   13cc8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0) {
   13ccb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13ccf:	79 25                	jns    13cf6 <console_write+0x7a>
                break;
        }
        len++;
    }while (1);

    mutex_unlock(&console->mutex);
   13cd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13cd4:	83 c0 54             	add    $0x54,%eax
   13cd7:	83 ec 0c             	sub    $0xc,%esp
   13cda:	50                   	push   %eax
   13cdb:	e8 ec 3f 00 00       	call   17ccc <mutex_unlock>
   13ce0:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13ce3:	83 ec 0c             	sub    $0xc,%esp
   13ce6:	ff 75 f0             	pushl  -0x10(%ebp)
   13ce9:	e8 fc f4 ff ff       	call   131ea <update_cursor_pos>
   13cee:	83 c4 10             	add    $0x10,%esp
    return len;
   13cf1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cf4:	eb 7b                	jmp    13d71 <console_write+0xf5>
        sem_notify(&tty->osem);
   13cf6:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf9:	05 14 02 00 00       	add    $0x214,%eax
   13cfe:	83 ec 0c             	sub    $0xc,%esp
   13d01:	50                   	push   %eax
   13d02:	e8 20 41 00 00       	call   17e27 <sem_notify>
   13d07:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state) {
   13d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d0d:	8b 40 04             	mov    0x4(%eax),%eax
   13d10:	83 f8 01             	cmp    $0x1,%eax
   13d13:	74 24                	je     13d39 <console_write+0xbd>
   13d15:	83 f8 01             	cmp    $0x1,%eax
   13d18:	72 07                	jb     13d21 <console_write+0xa5>
   13d1a:	83 f8 02             	cmp    $0x2,%eax
   13d1d:	74 32                	je     13d51 <console_write+0xd5>
   13d1f:	eb 47                	jmp    13d68 <console_write+0xec>
                write_normal(console, c);
   13d21:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13d25:	0f be c0             	movsbl %al,%eax
   13d28:	83 ec 08             	sub    $0x8,%esp
   13d2b:	50                   	push   %eax
   13d2c:	ff 75 f0             	pushl  -0x10(%ebp)
   13d2f:	e8 5e fb ff ff       	call   13892 <write_normal>
   13d34:	83 c4 10             	add    $0x10,%esp
                break;
   13d37:	eb 2f                	jmp    13d68 <console_write+0xec>
                write_esc(console, c);
   13d39:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13d3d:	0f be c0             	movsbl %al,%eax
   13d40:	83 ec 08             	sub    $0x8,%esp
   13d43:	50                   	push   %eax
   13d44:	ff 75 f0             	pushl  -0x10(%ebp)
   13d47:	e8 27 fc ff ff       	call   13973 <write_esc>
   13d4c:	83 c4 10             	add    $0x10,%esp
                break;
   13d4f:	eb 17                	jmp    13d68 <console_write+0xec>
                write_esc_square(console, c);
   13d51:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13d55:	0f be c0             	movsbl %al,%eax
   13d58:	83 ec 08             	sub    $0x8,%esp
   13d5b:	50                   	push   %eax
   13d5c:	ff 75 f0             	pushl  -0x10(%ebp)
   13d5f:	e8 21 fe ff ff       	call   13b85 <write_esc_square>
   13d64:	83 c4 10             	add    $0x10,%esp
                break;
   13d67:	90                   	nop
        len++;
   13d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    do {
   13d6c:	e9 3e ff ff ff       	jmp    13caf <console_write+0x33>
}
   13d71:	c9                   	leave  
   13d72:	c3                   	ret    

00013d73 <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close (int dev) {
   13d73:	55                   	push   %ebp
   13d74:	89 e5                	mov    %esp,%ebp
	// 似乎不太需要做点什么
}
   13d76:	90                   	nop
   13d77:	5d                   	pop    %ebp
   13d78:	c3                   	ret    

00013d79 <is_devid_bad>:
};

// 设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad (int dev_id) {
   13d79:	55                   	push   %ebp
   13d7a:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >=  sizeof(dev_tbl) / sizeof(dev_tbl[0]))) {
   13d7c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d80:	78 08                	js     13d8a <is_devid_bad+0x11>
   13d82:	8b 45 08             	mov    0x8(%ebp),%eax
   13d85:	83 f8 7f             	cmp    $0x7f,%eax
   13d88:	76 07                	jbe    13d91 <is_devid_bad+0x18>
        return 1;
   13d8a:	b8 01 00 00 00       	mov    $0x1,%eax
   13d8f:	eb 24                	jmp    13db5 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0) {
   13d91:	8b 55 08             	mov    0x8(%ebp),%edx
   13d94:	89 d0                	mov    %edx,%eax
   13d96:	c1 e0 02             	shl    $0x2,%eax
   13d99:	01 d0                	add    %edx,%eax
   13d9b:	c1 e0 02             	shl    $0x2,%eax
   13d9e:	05 40 59 03 00       	add    $0x35940,%eax
   13da3:	8b 00                	mov    (%eax),%eax
   13da5:	85 c0                	test   %eax,%eax
   13da7:	75 07                	jne    13db0 <is_devid_bad+0x37>
        return 1;
   13da9:	b8 01 00 00 00       	mov    $0x1,%eax
   13dae:	eb 05                	jmp    13db5 <is_devid_bad+0x3c>
    }

    return 0;
   13db0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13db5:	5d                   	pop    %ebp
   13db6:	c3                   	ret    

00013db7 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open (int major, int minor, void * data) {
   13db7:	55                   	push   %ebp
   13db8:	89 e5                	mov    %esp,%ebp
   13dba:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13dbd:	e8 4f f3 ff ff       	call   13111 <irq_enter_protection>
   13dc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t * free_dev = (device_t *)0;
   13dc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13dcc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13dd3:	eb 68                	jmp    13e3d <dev_open+0x86>
        device_t * dev = dev_tbl + i;
   13dd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13dd8:	89 d0                	mov    %edx,%eax
   13dda:	c1 e0 02             	shl    $0x2,%eax
   13ddd:	01 d0                	add    %edx,%eax
   13ddf:	c1 e0 02             	shl    $0x2,%eax
   13de2:	05 40 59 03 00       	add    $0x35940,%eax
   13de7:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0) {
   13dea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ded:	8b 40 10             	mov    0x10(%eax),%eax
   13df0:	85 c0                	test   %eax,%eax
   13df2:	75 08                	jne    13dfc <dev_open+0x45>
            // 纪录空闲值
            free_dev = dev;
   13df4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13df7:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13dfa:	eb 3d                	jmp    13e39 <dev_open+0x82>
        } else if ((dev->desc->major == major) && (dev->minor == minor)) {
   13dfc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13dff:	8b 00                	mov    (%eax),%eax
   13e01:	8b 40 20             	mov    0x20(%eax),%eax
   13e04:	39 45 08             	cmp    %eax,0x8(%ebp)
   13e07:	75 30                	jne    13e39 <dev_open+0x82>
   13e09:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13e0c:	8b 40 08             	mov    0x8(%eax),%eax
   13e0f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13e12:	75 25                	jne    13e39 <dev_open+0x82>
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13e14:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13e17:	8b 40 10             	mov    0x10(%eax),%eax
   13e1a:	8d 50 01             	lea    0x1(%eax),%edx
   13e1d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13e20:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13e23:	83 ec 0c             	sub    $0xc,%esp
   13e26:	ff 75 e4             	pushl  -0x1c(%ebp)
   13e29:	e8 fb f2 ff ff       	call   13129 <irq_leave_protection>
   13e2e:	83 c4 10             	add    $0x10,%esp
            return i;
   13e31:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e34:	e9 c8 00 00 00       	jmp    13f01 <dev_open+0x14a>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13e39:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e40:	83 f8 7f             	cmp    $0x7f,%eax
   13e43:	76 90                	jbe    13dd5 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t * desc = (dev_desc_t *)0;
   13e45:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13e4c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13e53:	eb 24                	jmp    13e79 <dev_open+0xc2>
        dev_desc_t * d = dev_desc_tbl[i];
   13e55:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13e58:	8b 04 85 50 a0 01 00 	mov    0x1a050(,%eax,4),%eax
   13e5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major) {
   13e62:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13e65:	8b 40 20             	mov    0x20(%eax),%eax
   13e68:	39 45 08             	cmp    %eax,0x8(%ebp)
   13e6b:	75 08                	jne    13e75 <dev_open+0xbe>
            desc = d;
   13e6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13e70:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13e73:	eb 0c                	jmp    13e81 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13e75:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13e79:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13e7c:	83 f8 01             	cmp    $0x1,%eax
   13e7f:	76 d4                	jbe    13e55 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev) {
   13e81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13e85:	74 67                	je     13eee <dev_open+0x137>
   13e87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13e8b:	74 61                	je     13eee <dev_open+0x137>
        free_dev->minor = minor;
   13e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e90:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e93:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e99:	8b 55 10             	mov    0x10(%ebp),%edx
   13e9c:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ea2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13ea5:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13ea7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13eaa:	8b 40 24             	mov    0x24(%eax),%eax
   13ead:	83 ec 0c             	sub    $0xc,%esp
   13eb0:	ff 75 f4             	pushl  -0xc(%ebp)
   13eb3:	ff d0                	call   *%eax
   13eb5:	83 c4 10             	add    $0x10,%esp
   13eb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0) {
   13ebb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13ebf:	75 2d                	jne    13eee <dev_open+0x137>
            free_dev->open_count = 1;
   13ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ec4:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13ecb:	83 ec 0c             	sub    $0xc,%esp
   13ece:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ed1:	e8 53 f2 ff ff       	call   13129 <irq_leave_protection>
   13ed6:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13ed9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13edc:	ba 40 59 03 00       	mov    $0x35940,%edx
   13ee1:	29 d0                	sub    %edx,%eax
   13ee3:	c1 f8 02             	sar    $0x2,%eax
   13ee6:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13eec:	eb 13                	jmp    13f01 <dev_open+0x14a>
        }
    }

    irq_leave_protection(state);
   13eee:	83 ec 0c             	sub    $0xc,%esp
   13ef1:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ef4:	e8 30 f2 ff ff       	call   13129 <irq_leave_protection>
   13ef9:	83 c4 10             	add    $0x10,%esp
    return -1;
   13efc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13f01:	c9                   	leave  
   13f02:	c3                   	ret    

00013f03 <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read (int dev_id, int addr, char * buf, int size) {
   13f03:	55                   	push   %ebp
   13f04:	89 e5                	mov    %esp,%ebp
   13f06:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13f09:	ff 75 08             	pushl  0x8(%ebp)
   13f0c:	e8 68 fe ff ff       	call   13d79 <is_devid_bad>
   13f11:	83 c4 04             	add    $0x4,%esp
   13f14:	85 c0                	test   %eax,%eax
   13f16:	74 07                	je     13f1f <dev_read+0x1c>
        return -1;
   13f18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f1d:	eb 2e                	jmp    13f4d <dev_read+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13f1f:	8b 55 08             	mov    0x8(%ebp),%edx
   13f22:	89 d0                	mov    %edx,%eax
   13f24:	c1 e0 02             	shl    $0x2,%eax
   13f27:	01 d0                	add    %edx,%eax
   13f29:	c1 e0 02             	shl    $0x2,%eax
   13f2c:	05 40 59 03 00       	add    $0x35940,%eax
   13f31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f37:	8b 00                	mov    (%eax),%eax
   13f39:	8b 40 28             	mov    0x28(%eax),%eax
   13f3c:	ff 75 14             	pushl  0x14(%ebp)
   13f3f:	ff 75 10             	pushl  0x10(%ebp)
   13f42:	ff 75 0c             	pushl  0xc(%ebp)
   13f45:	ff 75 f4             	pushl  -0xc(%ebp)
   13f48:	ff d0                	call   *%eax
   13f4a:	83 c4 10             	add    $0x10,%esp
}
   13f4d:	c9                   	leave  
   13f4e:	c3                   	ret    

00013f4f <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write (int dev_id, int addr, char * buf, int size) {
   13f4f:	55                   	push   %ebp
   13f50:	89 e5                	mov    %esp,%ebp
   13f52:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13f55:	ff 75 08             	pushl  0x8(%ebp)
   13f58:	e8 1c fe ff ff       	call   13d79 <is_devid_bad>
   13f5d:	83 c4 04             	add    $0x4,%esp
   13f60:	85 c0                	test   %eax,%eax
   13f62:	74 07                	je     13f6b <dev_write+0x1c>
        return -1;
   13f64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f69:	eb 2e                	jmp    13f99 <dev_write+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13f6b:	8b 55 08             	mov    0x8(%ebp),%edx
   13f6e:	89 d0                	mov    %edx,%eax
   13f70:	c1 e0 02             	shl    $0x2,%eax
   13f73:	01 d0                	add    %edx,%eax
   13f75:	c1 e0 02             	shl    $0x2,%eax
   13f78:	05 40 59 03 00       	add    $0x35940,%eax
   13f7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   13f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f83:	8b 00                	mov    (%eax),%eax
   13f85:	8b 40 2c             	mov    0x2c(%eax),%eax
   13f88:	ff 75 14             	pushl  0x14(%ebp)
   13f8b:	ff 75 10             	pushl  0x10(%ebp)
   13f8e:	ff 75 0c             	pushl  0xc(%ebp)
   13f91:	ff 75 f4             	pushl  -0xc(%ebp)
   13f94:	ff d0                	call   *%eax
   13f96:	83 c4 10             	add    $0x10,%esp
}
   13f99:	c9                   	leave  
   13f9a:	c3                   	ret    

00013f9b <dev_control>:

/**
 * @brief 发送控制命令
 */

int dev_control (int dev_id, int cmd, int arg0, int arg1) {
   13f9b:	55                   	push   %ebp
   13f9c:	89 e5                	mov    %esp,%ebp
   13f9e:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fa1:	ff 75 08             	pushl  0x8(%ebp)
   13fa4:	e8 d0 fd ff ff       	call   13d79 <is_devid_bad>
   13fa9:	83 c4 04             	add    $0x4,%esp
   13fac:	85 c0                	test   %eax,%eax
   13fae:	74 07                	je     13fb7 <dev_control+0x1c>
        return -1;
   13fb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13fb5:	eb 2e                	jmp    13fe5 <dev_control+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13fb7:	8b 55 08             	mov    0x8(%ebp),%edx
   13fba:	89 d0                	mov    %edx,%eax
   13fbc:	c1 e0 02             	shl    $0x2,%eax
   13fbf:	01 d0                	add    %edx,%eax
   13fc1:	c1 e0 02             	shl    $0x2,%eax
   13fc4:	05 40 59 03 00       	add    $0x35940,%eax
   13fc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   13fcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fcf:	8b 00                	mov    (%eax),%eax
   13fd1:	8b 40 30             	mov    0x30(%eax),%eax
   13fd4:	ff 75 14             	pushl  0x14(%ebp)
   13fd7:	ff 75 10             	pushl  0x10(%ebp)
   13fda:	ff 75 0c             	pushl  0xc(%ebp)
   13fdd:	ff 75 f4             	pushl  -0xc(%ebp)
   13fe0:	ff d0                	call   *%eax
   13fe2:	83 c4 10             	add    $0x10,%esp
}
   13fe5:	c9                   	leave  
   13fe6:	c3                   	ret    

00013fe7 <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close (int dev_id) {
   13fe7:	55                   	push   %ebp
   13fe8:	89 e5                	mov    %esp,%ebp
   13fea:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fed:	ff 75 08             	pushl  0x8(%ebp)
   13ff0:	e8 84 fd ff ff       	call   13d79 <is_devid_bad>
   13ff5:	83 c4 04             	add    $0x4,%esp
   13ff8:	85 c0                	test   %eax,%eax
   13ffa:	75 6b                	jne    14067 <dev_close+0x80>
        return;
    }

    device_t * dev = dev_tbl + dev_id;
   13ffc:	8b 55 08             	mov    0x8(%ebp),%edx
   13fff:	89 d0                	mov    %edx,%eax
   14001:	c1 e0 02             	shl    $0x2,%eax
   14004:	01 d0                	add    %edx,%eax
   14006:	c1 e0 02             	shl    $0x2,%eax
   14009:	05 40 59 03 00       	add    $0x35940,%eax
   1400e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   14011:	e8 fb f0 ff ff       	call   13111 <irq_enter_protection>
   14016:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {
   14019:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1401c:	8b 40 10             	mov    0x10(%eax),%eax
   1401f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14022:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14025:	89 50 10             	mov    %edx,0x10(%eax)
   14028:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1402b:	8b 40 10             	mov    0x10(%eax),%eax
   1402e:	85 c0                	test   %eax,%eax
   14030:	75 25                	jne    14057 <dev_close+0x70>
        dev->desc->close(dev);
   14032:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14035:	8b 00                	mov    (%eax),%eax
   14037:	8b 40 34             	mov    0x34(%eax),%eax
   1403a:	83 ec 0c             	sub    $0xc,%esp
   1403d:	ff 75 f4             	pushl  -0xc(%ebp)
   14040:	ff d0                	call   *%eax
   14042:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   14045:	83 ec 04             	sub    $0x4,%esp
   14048:	6a 14                	push   $0x14
   1404a:	6a 00                	push   $0x0
   1404c:	ff 75 f4             	pushl  -0xc(%ebp)
   1404f:	e8 fe 42 00 00       	call   18352 <kernel_memset>
   14054:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   14057:	83 ec 0c             	sub    $0xc,%esp
   1405a:	ff 75 f0             	pushl  -0x10(%ebp)
   1405d:	e8 c7 f0 ff ff       	call   13129 <irq_leave_protection>
   14062:	83 c4 10             	add    $0x10,%esp
   14065:	eb 01                	jmp    14068 <dev_close+0x81>
        return;
   14067:	90                   	nop
   14068:	c9                   	leave  
   14069:	c3                   	ret    

0001406a <inb>:
static inline uint8_t inb(uint16_t  port) {
   1406a:	55                   	push   %ebp
   1406b:	89 e5                	mov    %esp,%ebp
   1406d:	83 ec 14             	sub    $0x14,%esp
   14070:	8b 45 08             	mov    0x8(%ebp),%eax
   14073:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14077:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1407b:	89 c2                	mov    %eax,%edx
   1407d:	ec                   	in     (%dx),%al
   1407e:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14081:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14085:	c9                   	leave  
   14086:	c3                   	ret    

00014087 <inw>:
static inline uint16_t inw(uint16_t  port) {
   14087:	55                   	push   %ebp
   14088:	89 e5                	mov    %esp,%ebp
   1408a:	83 ec 14             	sub    $0x14,%esp
   1408d:	8b 45 08             	mov    0x8(%ebp),%eax
   14090:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
   14094:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14098:	89 c2                	mov    %eax,%edx
   1409a:	66 ed                	in     (%dx),%ax
   1409c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	return rv;
   140a0:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   140a4:	c9                   	leave  
   140a5:	c3                   	ret    

000140a6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   140a6:	55                   	push   %ebp
   140a7:	89 e5                	mov    %esp,%ebp
   140a9:	83 ec 08             	sub    $0x8,%esp
   140ac:	8b 55 08             	mov    0x8(%ebp),%edx
   140af:	8b 45 0c             	mov    0xc(%ebp),%eax
   140b2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   140b6:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   140b9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   140bd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   140c1:	ee                   	out    %al,(%dx)
}
   140c2:	90                   	nop
   140c3:	c9                   	leave  
   140c4:	c3                   	ret    

000140c5 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   140c5:	55                   	push   %ebp
   140c6:	89 e5                	mov    %esp,%ebp
   140c8:	83 ec 08             	sub    $0x8,%esp
   140cb:	8b 55 08             	mov    0x8(%ebp),%edx
   140ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   140d1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   140d5:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   140d9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   140dd:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   140e1:	66 ef                	out    %ax,(%dx)
}
   140e3:	90                   	nop
   140e4:	c9                   	leave  
   140e5:	c3                   	ret    

000140e6 <ata_send_cmd>:
static int task_on_op;

/**
 * 发送ata命令，支持多达16位的扇区，对我们目前的程序来书够用了。
 */
static void ata_send_cmd (disk_t * disk, uint32_t start_sector, uint32_t sector_count, int cmd) {
   140e6:	55                   	push   %ebp
   140e7:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);		// 使用LBA寻址，并设置驱动器
   140e9:	8b 45 08             	mov    0x8(%ebp),%eax
   140ec:	8b 40 20             	mov    0x20(%eax),%eax
   140ef:	83 c8 e0             	or     $0xffffffe0,%eax
   140f2:	0f b6 d0             	movzbl %al,%edx
   140f5:	8b 45 08             	mov    0x8(%ebp),%eax
   140f8:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   140fc:	83 c0 06             	add    $0x6,%eax
   140ff:	0f b7 c0             	movzwl %ax,%eax
   14102:	52                   	push   %edx
   14103:	50                   	push   %eax
   14104:	e8 9d ff ff ff       	call   140a6 <outb>
   14109:	83 c4 08             	add    $0x8,%esp

	// 必须先写高字节
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count >> 8));	// 扇区数高8位
   1410c:	8b 45 10             	mov    0x10(%ebp),%eax
   1410f:	c1 e8 08             	shr    $0x8,%eax
   14112:	0f b6 d0             	movzbl %al,%edx
   14115:	8b 45 08             	mov    0x8(%ebp),%eax
   14118:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1411c:	83 c0 02             	add    $0x2,%eax
   1411f:	0f b7 c0             	movzwl %ax,%eax
   14122:	52                   	push   %edx
   14123:	50                   	push   %eax
   14124:	e8 7d ff ff ff       	call   140a6 <outb>
   14129:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 24));		// LBA参数的24~31位
   1412c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1412f:	c1 e8 18             	shr    $0x18,%eax
   14132:	0f b6 d0             	movzbl %al,%edx
   14135:	8b 45 08             	mov    0x8(%ebp),%eax
   14138:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1413c:	83 c0 03             	add    $0x3,%eax
   1413f:	0f b7 c0             	movzwl %ax,%eax
   14142:	52                   	push   %edx
   14143:	50                   	push   %eax
   14144:	e8 5d ff ff ff       	call   140a6 <outb>
   14149:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), 0);									// 高于32位不支持
   1414c:	8b 45 08             	mov    0x8(%ebp),%eax
   1414f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14153:	83 c0 04             	add    $0x4,%eax
   14156:	0f b7 c0             	movzwl %ax,%eax
   14159:	6a 00                	push   $0x0
   1415b:	50                   	push   %eax
   1415c:	e8 45 ff ff ff       	call   140a6 <outb>
   14161:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), 0);										// 高于32位不支持
   14164:	8b 45 08             	mov    0x8(%ebp),%eax
   14167:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1416b:	83 c0 05             	add    $0x5,%eax
   1416e:	0f b7 c0             	movzwl %ax,%eax
   14171:	6a 00                	push   $0x0
   14173:	50                   	push   %eax
   14174:	e8 2d ff ff ff       	call   140a6 <outb>
   14179:	83 c4 08             	add    $0x8,%esp
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count));		// 扇区数量低8位
   1417c:	8b 45 10             	mov    0x10(%ebp),%eax
   1417f:	0f b6 d0             	movzbl %al,%edx
   14182:	8b 45 08             	mov    0x8(%ebp),%eax
   14185:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14189:	83 c0 02             	add    $0x2,%eax
   1418c:	0f b7 c0             	movzwl %ax,%eax
   1418f:	52                   	push   %edx
   14190:	50                   	push   %eax
   14191:	e8 10 ff ff ff       	call   140a6 <outb>
   14196:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 0));			// LBA参数的0-7
   14199:	8b 45 0c             	mov    0xc(%ebp),%eax
   1419c:	0f b6 d0             	movzbl %al,%edx
   1419f:	8b 45 08             	mov    0x8(%ebp),%eax
   141a2:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141a6:	83 c0 03             	add    $0x3,%eax
   141a9:	0f b7 c0             	movzwl %ax,%eax
   141ac:	52                   	push   %edx
   141ad:	50                   	push   %eax
   141ae:	e8 f3 fe ff ff       	call   140a6 <outb>
   141b3:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), (uint8_t) (start_sector >> 8));		// LBA参数的8-15位
   141b6:	8b 45 0c             	mov    0xc(%ebp),%eax
   141b9:	c1 e8 08             	shr    $0x8,%eax
   141bc:	0f b6 d0             	movzbl %al,%edx
   141bf:	8b 45 08             	mov    0x8(%ebp),%eax
   141c2:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141c6:	83 c0 04             	add    $0x4,%eax
   141c9:	0f b7 c0             	movzwl %ax,%eax
   141cc:	52                   	push   %edx
   141cd:	50                   	push   %eax
   141ce:	e8 d3 fe ff ff       	call   140a6 <outb>
   141d3:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), (uint8_t) (start_sector >> 16));		// LBA参数的16-23位
   141d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   141d9:	c1 e8 10             	shr    $0x10,%eax
   141dc:	0f b6 d0             	movzbl %al,%edx
   141df:	8b 45 08             	mov    0x8(%ebp),%eax
   141e2:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141e6:	83 c0 05             	add    $0x5,%eax
   141e9:	0f b7 c0             	movzwl %ax,%eax
   141ec:	52                   	push   %edx
   141ed:	50                   	push   %eax
   141ee:	e8 b3 fe ff ff       	call   140a6 <outb>
   141f3:	83 c4 08             	add    $0x8,%esp

	// 选择对应的主-从磁盘
	outb(DISK_CMD(disk), (uint8_t)cmd);
   141f6:	8b 45 14             	mov    0x14(%ebp),%eax
   141f9:	0f b6 d0             	movzbl %al,%edx
   141fc:	8b 45 08             	mov    0x8(%ebp),%eax
   141ff:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14203:	83 c0 07             	add    $0x7,%eax
   14206:	0f b7 c0             	movzwl %ax,%eax
   14209:	52                   	push   %edx
   1420a:	50                   	push   %eax
   1420b:	e8 96 fe ff ff       	call   140a6 <outb>
   14210:	83 c4 08             	add    $0x8,%esp
}
   14213:	90                   	nop
   14214:	c9                   	leave  
   14215:	c3                   	ret    

00014216 <ata_read_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_read_data (disk_t * disk, void * buf, int size) {
   14216:	55                   	push   %ebp
   14217:	89 e5                	mov    %esp,%ebp
   14219:	53                   	push   %ebx
   1421a:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   1421d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14220:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++) {
   14223:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1422a:	eb 23                	jmp    1424f <ata_read_data+0x39>
        *c++ = inw(DISK_DATA(disk));
   1422c:	8b 45 08             	mov    0x8(%ebp),%eax
   1422f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14233:	0f b7 c0             	movzwl %ax,%eax
   14236:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14239:	8d 53 02             	lea    0x2(%ebx),%edx
   1423c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1423f:	50                   	push   %eax
   14240:	e8 42 fe ff ff       	call   14087 <inw>
   14245:	83 c4 04             	add    $0x4,%esp
   14248:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++) {
   1424b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1424f:	8b 45 10             	mov    0x10(%ebp),%eax
   14252:	89 c2                	mov    %eax,%edx
   14254:	c1 ea 1f             	shr    $0x1f,%edx
   14257:	01 d0                	add    %edx,%eax
   14259:	d1 f8                	sar    %eax
   1425b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1425e:	7c cc                	jl     1422c <ata_read_data+0x16>
    }
}
   14260:	90                   	nop
   14261:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14264:	c9                   	leave  
   14265:	c3                   	ret    

00014266 <ata_write_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_write_data (disk_t * disk, void * buf, int size) {
   14266:	55                   	push   %ebp
   14267:	89 e5                	mov    %esp,%ebp
   14269:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   1426c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1426f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++) {
   14272:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   14279:	eb 27                	jmp    142a2 <ata_write_data+0x3c>
        outw(DISK_DATA(disk), *c++);
   1427b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1427e:	8d 50 02             	lea    0x2(%eax),%edx
   14281:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14284:	0f b7 00             	movzwl (%eax),%eax
   14287:	0f b7 d0             	movzwl %ax,%edx
   1428a:	8b 45 08             	mov    0x8(%ebp),%eax
   1428d:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14291:	0f b7 c0             	movzwl %ax,%eax
   14294:	52                   	push   %edx
   14295:	50                   	push   %eax
   14296:	e8 2a fe ff ff       	call   140c5 <outw>
   1429b:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++) {
   1429e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   142a2:	8b 45 10             	mov    0x10(%ebp),%eax
   142a5:	89 c2                	mov    %eax,%edx
   142a7:	c1 ea 1f             	shr    $0x1f,%edx
   142aa:	01 d0                	add    %edx,%eax
   142ac:	d1 f8                	sar    %eax
   142ae:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   142b1:	7c c8                	jl     1427b <ata_write_data+0x15>
    }
}
   142b3:	90                   	nop
   142b4:	c9                   	leave  
   142b5:	c3                   	ret    

000142b6 <ata_wait_data>:

/**
 * @brief 等待磁盘有数据到达
 */
static inline int ata_wait_data (disk_t * disk) {
   142b6:	55                   	push   %ebp
   142b7:	89 e5                	mov    %esp,%ebp
   142b9:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
	do {
        // 等待数据或者有错误
        status = inb(DISK_STATUS(disk));
   142bc:	8b 45 08             	mov    0x8(%ebp),%eax
   142bf:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142c3:	83 c0 07             	add    $0x7,%eax
   142c6:	0f b7 c0             	movzwl %ax,%eax
   142c9:	50                   	push   %eax
   142ca:	e8 9b fd ff ff       	call   1406a <inb>
   142cf:	83 c4 04             	add    $0x4,%esp
   142d2:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR))
   142d5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   142d9:	25 89 00 00 00       	and    $0x89,%eax
   142de:	3d 80 00 00 00       	cmp    $0x80,%eax
   142e3:	75 02                	jne    142e7 <ata_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   142e5:	eb d5                	jmp    142bc <ata_wait_data+0x6>
                        != DISK_STATUS_BUSY) {
            break;
   142e7:	90                   	nop
        }
    }while (1);

    // 检查是否有错误
    return (status & DISK_STATUS_ERR) ? -1 : 0;
   142e8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   142ec:	83 e0 01             	and    $0x1,%eax
   142ef:	85 c0                	test   %eax,%eax
   142f1:	74 07                	je     142fa <ata_wait_data+0x44>
   142f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142f8:	eb 05                	jmp    142ff <ata_wait_data+0x49>
   142fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   142ff:	c9                   	leave  
   14300:	c3                   	ret    

00014301 <print_disk_info>:

/**
 * @brief 打印磁盘信息
 */
static void print_disk_info (disk_t * disk) {
   14301:	55                   	push   %ebp
   14302:	89 e5                	mov    %esp,%ebp
   14304:	53                   	push   %ebx
   14305:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   14308:	8b 45 08             	mov    0x8(%ebp),%eax
   1430b:	83 ec 08             	sub    $0x8,%esp
   1430e:	50                   	push   %eax
   1430f:	68 20 95 01 00       	push   $0x19520
   14314:	e8 e3 45 00 00       	call   188fc <log_printf>
   14319:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   1431c:	8b 45 08             	mov    0x8(%ebp),%eax
   1431f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14323:	0f b7 c0             	movzwl %ax,%eax
   14326:	83 ec 08             	sub    $0x8,%esp
   14329:	50                   	push   %eax
   1432a:	68 24 95 01 00       	push   $0x19524
   1432f:	e8 c8 45 00 00       	call   188fc <log_printf>
   14334:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 /1024);
   14337:	8b 45 08             	mov    0x8(%ebp),%eax
   1433a:	8b 50 2c             	mov    0x2c(%eax),%edx
   1433d:	8b 45 08             	mov    0x8(%ebp),%eax
   14340:	8b 40 28             	mov    0x28(%eax),%eax
   14343:	0f af c2             	imul   %edx,%eax
   14346:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   1434c:	85 c0                	test   %eax,%eax
   1434e:	0f 48 c2             	cmovs  %edx,%eax
   14351:	c1 f8 14             	sar    $0x14,%eax
   14354:	83 ec 08             	sub    $0x8,%esp
   14357:	50                   	push   %eax
   14358:	68 34 95 01 00       	push   $0x19534
   1435d:	e8 9a 45 00 00       	call   188fc <log_printf>
   14362:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   14365:	8b 45 08             	mov    0x8(%ebp),%eax
   14368:	8b 40 20             	mov    0x20(%eax),%eax
   1436b:	85 c0                	test   %eax,%eax
   1436d:	75 07                	jne    14376 <print_disk_info+0x75>
   1436f:	b8 47 95 01 00       	mov    $0x19547,%eax
   14374:	eb 05                	jmp    1437b <print_disk_info+0x7a>
   14376:	b8 4e 95 01 00       	mov    $0x1954e,%eax
   1437b:	83 ec 08             	sub    $0x8,%esp
   1437e:	50                   	push   %eax
   1437f:	68 54 95 01 00       	push   $0x19554
   14384:	e8 73 45 00 00       	call   188fc <log_printf>
   14389:	83 c4 10             	add    $0x10,%esp

    // 显示分区信息
    log_printf("  Part info:");
   1438c:	83 ec 0c             	sub    $0xc,%esp
   1438f:	68 60 95 01 00       	push   $0x19560
   14394:	e8 63 45 00 00       	call   188fc <log_printf>
   14399:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   1439c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   143a3:	eb 4e                	jmp    143f3 <print_disk_info+0xf2>
        partinfo_t * part_info = disk->partinfo + i;
   143a5:	8b 45 08             	mov    0x8(%ebp),%eax
   143a8:	8d 48 30             	lea    0x30(%eax),%ecx
   143ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
   143ae:	89 d0                	mov    %edx,%eax
   143b0:	01 c0                	add    %eax,%eax
   143b2:	01 d0                	add    %edx,%eax
   143b4:	c1 e0 04             	shl    $0x4,%eax
   143b7:	01 c8                	add    %ecx,%eax
   143b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID) {
   143bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   143bf:	8b 40 24             	mov    0x24(%eax),%eax
   143c2:	85 c0                	test   %eax,%eax
   143c4:	74 29                	je     143ef <print_disk_info+0xee>
            log_printf("    %s: type: %x, start sector: %d, count %d",
   143c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   143c9:	8b 58 2c             	mov    0x2c(%eax),%ebx
   143cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   143cf:	8b 48 28             	mov    0x28(%eax),%ecx
                    part_info->name, part_info->type,
   143d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   143d5:	8b 50 24             	mov    0x24(%eax),%edx
   143d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   143db:	83 ec 0c             	sub    $0xc,%esp
   143de:	53                   	push   %ebx
   143df:	51                   	push   %ecx
   143e0:	52                   	push   %edx
   143e1:	50                   	push   %eax
   143e2:	68 70 95 01 00       	push   $0x19570
   143e7:	e8 10 45 00 00       	call   188fc <log_printf>
   143ec:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   143ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   143f3:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   143f7:	7e ac                	jle    143a5 <print_disk_info+0xa4>
                    part_info->start_sector, part_info->total_sector);
        }
    }
}
   143f9:	90                   	nop
   143fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   143fd:	c9                   	leave  
   143fe:	c3                   	ret    

000143ff <detect_part_info>:

/**
 * 获取指定序号的分区信息
 * 注意，该操作依赖物理分区分配，如果设备的分区结构有变化，则序号也会改变，得到的结果不同
 */
static int detect_part_info(disk_t * disk) {
   143ff:	55                   	push   %ebp
   14400:	89 e5                	mov    %esp,%ebp
   14402:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    // 读取mbr区
    ata_send_cmd(disk, 0, 1, DISK_CMD_READ);
   14408:	6a 24                	push   $0x24
   1440a:	6a 01                	push   $0x1
   1440c:	6a 00                	push   $0x0
   1440e:	ff 75 08             	pushl  0x8(%ebp)
   14411:	e8 d0 fc ff ff       	call   140e6 <ata_send_cmd>
   14416:	83 c4 10             	add    $0x10,%esp
    int err = ata_wait_data(disk);
   14419:	ff 75 08             	pushl  0x8(%ebp)
   1441c:	e8 95 fe ff ff       	call   142b6 <ata_wait_data>
   14421:	83 c4 04             	add    $0x4,%esp
   14424:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   14427:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1442b:	79 18                	jns    14445 <detect_part_info+0x46>
        log_printf("read mbr failed");
   1442d:	83 ec 0c             	sub    $0xc,%esp
   14430:	68 9d 95 01 00       	push   $0x1959d
   14435:	e8 c2 44 00 00       	call   188fc <log_printf>
   1443a:	83 c4 10             	add    $0x10,%esp
        return err;
   1443d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14440:	e9 d1 00 00 00       	jmp    14516 <detect_part_info+0x117>
    }
    ata_read_data(disk, &mbr, sizeof(mbr));
   14445:	83 ec 04             	sub    $0x4,%esp
   14448:	68 00 02 00 00       	push   $0x200
   1444d:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14453:	50                   	push   %eax
   14454:	ff 75 08             	pushl  0x8(%ebp)
   14457:	e8 ba fd ff ff       	call   14216 <ata_read_data>
   1445c:	83 c4 10             	add    $0x10,%esp

	// 遍历4个主分区描述，不考虑支持扩展分区
	part_item_t * item = mbr.part_item;
   1445f:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14465:	05 be 01 00 00       	add    $0x1be,%eax
   1446a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t * part_info = disk->partinfo + 1;
   1446d:	8b 45 08             	mov    0x8(%ebp),%eax
   14470:	83 c0 30             	add    $0x30,%eax
   14473:	83 c0 30             	add    $0x30,%eax
   14476:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   14479:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   14480:	e9 87 00 00 00       	jmp    1450c <detect_part_info+0x10d>
		part_info->type = item->system_id;
   14485:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14488:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1448c:	0f b6 d0             	movzbl %al,%edx
   1448f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14492:	89 50 24             	mov    %edx,0x24(%eax)

        // 没有分区，清空part_info
		if (part_info->type == FS_INVALID) {
   14495:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14498:	8b 40 24             	mov    0x24(%eax),%eax
   1449b:	85 c0                	test   %eax,%eax
   1449d:	75 20                	jne    144bf <detect_part_info+0xc0>
			part_info->total_sector = 0;
   1449f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a2:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   144a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144ac:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   144b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144b6:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   144bd:	eb 41                	jmp    14500 <detect_part_info+0x101>
        } else {
            // 在主分区中找到，复制信息
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   144bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   144c2:	8d 48 01             	lea    0x1(%eax),%ecx
   144c5:	8b 55 08             	mov    0x8(%ebp),%edx
   144c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144cb:	51                   	push   %ecx
   144cc:	52                   	push   %edx
   144cd:	68 ad 95 01 00       	push   $0x195ad
   144d2:	50                   	push   %eax
   144d3:	e8 58 40 00 00       	call   18530 <kernel_sprintf>
   144d8:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   144db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   144de:	8b 40 08             	mov    0x8(%eax),%eax
   144e1:	89 c2                	mov    %eax,%edx
   144e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144e6:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   144e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   144ec:	8b 40 0c             	mov    0xc(%eax),%eax
   144ef:	89 c2                	mov    %eax,%edx
   144f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144f4:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   144f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144fa:	8b 55 08             	mov    0x8(%ebp),%edx
   144fd:	89 50 20             	mov    %edx,0x20(%eax)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   14500:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   14504:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   14508:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   1450c:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   14510:	0f 8e 6f ff ff ff    	jle    14485 <detect_part_info+0x86>
        }
	}
}
   14516:	c9                   	leave  
   14517:	c3                   	ret    

00014518 <identify_disk>:

/**
 * @brief 检测磁盘相关的信息
 */
static int identify_disk (disk_t * disk) {
   14518:	55                   	push   %ebp
   14519:	89 e5                	mov    %esp,%ebp
   1451b:	81 ec 18 02 00 00    	sub    $0x218,%esp
    ata_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   14521:	68 ec 00 00 00       	push   $0xec
   14526:	6a 00                	push   $0x0
   14528:	6a 00                	push   $0x0
   1452a:	ff 75 08             	pushl  0x8(%ebp)
   1452d:	e8 b4 fb ff ff       	call   140e6 <ata_send_cmd>
   14532:	83 c4 10             	add    $0x10,%esp

    // 检测状态，如果为0，则控制器不存在
    int err = inb(DISK_STATUS(disk));
   14535:	8b 45 08             	mov    0x8(%ebp),%eax
   14538:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1453c:	83 c0 07             	add    $0x7,%eax
   1453f:	0f b7 c0             	movzwl %ax,%eax
   14542:	50                   	push   %eax
   14543:	e8 22 fb ff ff       	call   1406a <inb>
   14548:	83 c4 04             	add    $0x4,%esp
   1454b:	0f b6 c0             	movzbl %al,%eax
   1454e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   14551:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14555:	75 1e                	jne    14575 <identify_disk+0x5d>
        log_printf("%s doesn't exist\n", disk->name);
   14557:	8b 45 08             	mov    0x8(%ebp),%eax
   1455a:	83 ec 08             	sub    $0x8,%esp
   1455d:	50                   	push   %eax
   1455e:	68 b2 95 01 00       	push   $0x195b2
   14563:	e8 94 43 00 00       	call   188fc <log_printf>
   14568:	83 c4 10             	add    $0x10,%esp
        return -1;
   1456b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14570:	e9 c8 00 00 00       	jmp    1463d <identify_disk+0x125>
    }

    // 等待数据就绪, 此时中断还未开启，因此暂时可以使用查询模式
    err = ata_wait_data(disk);
   14575:	83 ec 0c             	sub    $0xc,%esp
   14578:	ff 75 08             	pushl  0x8(%ebp)
   1457b:	e8 36 fd ff ff       	call   142b6 <ata_wait_data>
   14580:	83 c4 10             	add    $0x10,%esp
   14583:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   14586:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1458a:	79 1c                	jns    145a8 <identify_disk+0x90>
        log_printf("disk[%s]: read failed!\n", disk->name);
   1458c:	8b 45 08             	mov    0x8(%ebp),%eax
   1458f:	83 ec 08             	sub    $0x8,%esp
   14592:	50                   	push   %eax
   14593:	68 c4 95 01 00       	push   $0x195c4
   14598:	e8 5f 43 00 00       	call   188fc <log_printf>
   1459d:	83 c4 10             	add    $0x10,%esp
        return err;
   145a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145a3:	e9 95 00 00 00       	jmp    1463d <identify_disk+0x125>
    }

    // 读取返回的数据，特别是uint16_t 100 through 103
    // 测试用的盘： 总共102400 = 0x19000， 实测会多一个扇区，为vhd磁盘格式增加的一个扇区
    uint16_t buf[256];
    ata_read_data(disk, buf, sizeof(buf));
   145a8:	83 ec 04             	sub    $0x4,%esp
   145ab:	68 00 02 00 00       	push   $0x200
   145b0:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   145b6:	50                   	push   %eax
   145b7:	ff 75 08             	pushl  0x8(%ebp)
   145ba:	e8 57 fc ff ff       	call   14216 <ata_read_data>
   145bf:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   145c2:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   145c8:	05 c8 00 00 00       	add    $0xc8,%eax
   145cd:	8b 00                	mov    (%eax),%eax
   145cf:	89 c2                	mov    %eax,%edx
   145d1:	8b 45 08             	mov    0x8(%ebp),%eax
   145d4:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;            // 固定为512字节大小
   145d7:	8b 45 08             	mov    0x8(%ebp),%eax
   145da:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    // 分区0保存了整个磁盘的信息
    partinfo_t * part = disk->partinfo + 0;
   145e1:	8b 45 08             	mov    0x8(%ebp),%eax
   145e4:	83 c0 30             	add    $0x30,%eax
   145e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   145ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145ed:	8b 55 08             	mov    0x8(%ebp),%edx
   145f0:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   145f3:	8b 55 08             	mov    0x8(%ebp),%edx
   145f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145f9:	6a 00                	push   $0x0
   145fb:	52                   	push   %edx
   145fc:	68 ad 95 01 00       	push   $0x195ad
   14601:	50                   	push   %eax
   14602:	e8 29 3f 00 00       	call   18530 <kernel_sprintf>
   14607:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   1460a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1460d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   14614:	8b 45 08             	mov    0x8(%ebp),%eax
   14617:	8b 50 2c             	mov    0x2c(%eax),%edx
   1461a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1461d:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   14620:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14623:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    // 接下来识别硬盘上的分区信息
    detect_part_info(disk);
   1462a:	83 ec 0c             	sub    $0xc,%esp
   1462d:	ff 75 08             	pushl  0x8(%ebp)
   14630:	e8 ca fd ff ff       	call   143ff <detect_part_info>
   14635:	83 c4 10             	add    $0x10,%esp
    return 0;
   14638:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1463d:	c9                   	leave  
   1463e:	c3                   	ret    

0001463f <disk_init>:

/**
 * @brief 磁盘初始化及检测
 * 以下只是将相关磁盘相关的信息给读取到内存中
 */
void disk_init (void) {
   1463f:	55                   	push   %ebp
   14640:	89 e5                	mov    %esp,%ebp
   14642:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14645:	83 ec 0c             	sub    $0xc,%esp
   14648:	68 dc 95 01 00       	push   $0x195dc
   1464d:	e8 aa 42 00 00       	call   188fc <log_printf>
   14652:	83 c4 10             	add    $0x10,%esp

    // 清空所有disk，以免数据错乱。不过引导程序应该有清0的，这里为安全再清一遍
    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14655:	83 ec 04             	sub    $0x4,%esp
   14658:	68 50 02 00 00       	push   $0x250
   1465d:	6a 00                	push   $0x0
   1465f:	68 40 63 03 00       	push   $0x36340
   14664:	e8 e9 3c 00 00       	call   18352 <kernel_memset>
   14669:	83 c4 10             	add    $0x10,%esp

    // 信号量和锁
    mutex_init(&mutex);
   1466c:	83 ec 0c             	sub    $0xc,%esp
   1466f:	68 90 65 03 00       	push   $0x36590
   14674:	e8 8e 35 00 00       	call   17c07 <mutex_init>
   14679:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0);       // 没有操作完成
   1467c:	83 ec 08             	sub    $0x8,%esp
   1467f:	6a 00                	push   $0x0
   14681:	68 a4 65 03 00       	push   $0x365a4
   14686:	e8 0b 37 00 00       	call   17d96 <sem_init>
   1468b:	83 c4 10             	add    $0x10,%esp

    // 检测各个硬盘, 读取硬件是否存在，有其相关信息
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   1468e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14695:	e9 90 00 00 00       	jmp    1472a <disk_init+0xeb>
        disk_t * disk = disk_buf + i;
   1469a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1469d:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   146a3:	05 40 63 03 00       	add    $0x36340,%eax
   146a8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 先初始化各字段
        kernel_sprintf(disk->name, "sd%c", i + 'a');
   146ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   146ae:	8d 50 61             	lea    0x61(%eax),%edx
   146b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146b4:	83 ec 04             	sub    $0x4,%esp
   146b7:	52                   	push   %edx
   146b8:	68 ed 95 01 00       	push   $0x195ed
   146bd:	50                   	push   %eax
   146be:	e8 6d 3e 00 00       	call   18530 <kernel_sprintf>
   146c3:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   146c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   146ca:	75 07                	jne    146d3 <disk_init+0x94>
   146cc:	ba 00 00 00 00       	mov    $0x0,%edx
   146d1:	eb 05                	jmp    146d8 <disk_init+0x99>
   146d3:	ba 10 00 00 00       	mov    $0x10,%edx
   146d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146db:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   146de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e1:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   146e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ea:	c7 80 20 01 00 00 90 	movl   $0x36590,0x120(%eax)
   146f1:	65 03 00 
        disk->op_sem = &op_sem;
   146f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f7:	c7 80 24 01 00 00 a4 	movl   $0x365a4,0x124(%eax)
   146fe:	65 03 00 

        // 识别磁盘，有错不处理，直接跳过
        int err = identify_disk(disk);
   14701:	83 ec 0c             	sub    $0xc,%esp
   14704:	ff 75 f0             	pushl  -0x10(%ebp)
   14707:	e8 0c fe ff ff       	call   14518 <identify_disk>
   1470c:	83 c4 10             	add    $0x10,%esp
   1470f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0) {
   14712:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14716:	75 0e                	jne    14726 <disk_init+0xe7>
            print_disk_info(disk);
   14718:	83 ec 0c             	sub    $0xc,%esp
   1471b:	ff 75 f0             	pushl  -0x10(%ebp)
   1471e:	e8 de fb ff ff       	call   14301 <print_disk_info>
   14723:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   14726:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1472a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1472e:	0f 8e 66 ff ff ff    	jle    1469a <disk_init+0x5b>
        }
    }
}
   14734:	90                   	nop
   14735:	c9                   	leave  
   14736:	c3                   	ret    

00014737 <disk_open>:


/**
 * @brief 打开磁盘设备
 */
int disk_open (device_t * dev) {
   14737:	55                   	push   %ebp
   14738:	89 e5                	mov    %esp,%ebp
   1473a:	83 ec 18             	sub    $0x18,%esp
    int disk_idx = (dev->minor >> 4) - 0xa;
   1473d:	8b 45 08             	mov    0x8(%ebp),%eax
   14740:	8b 40 08             	mov    0x8(%eax),%eax
   14743:	c1 f8 04             	sar    $0x4,%eax
   14746:	83 e8 0a             	sub    $0xa,%eax
   14749:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   1474c:	8b 45 08             	mov    0x8(%ebp),%eax
   1474f:	8b 40 08             	mov    0x8(%eax),%eax
   14752:	83 e0 0f             	and    $0xf,%eax
   14755:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT)) {
   14758:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1475c:	7f 06                	jg     14764 <disk_open+0x2d>
   1475e:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14762:	7e 21                	jle    14785 <disk_open+0x4e>
        log_printf("device minor error: %d", dev->minor);
   14764:	8b 45 08             	mov    0x8(%ebp),%eax
   14767:	8b 40 08             	mov    0x8(%eax),%eax
   1476a:	83 ec 08             	sub    $0x8,%esp
   1476d:	50                   	push   %eax
   1476e:	68 f2 95 01 00       	push   $0x195f2
   14773:	e8 84 41 00 00       	call   188fc <log_printf>
   14778:	83 c4 10             	add    $0x10,%esp
        return -1;
   1477b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14780:	e9 a5 00 00 00       	jmp    1482a <disk_open+0xf3>
    }

    disk_t * disk = disk_buf + disk_idx;
   14785:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14788:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   1478e:	05 40 63 03 00       	add    $0x36340,%eax
   14793:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0) {
   14796:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14799:	8b 40 28             	mov    0x28(%eax),%eax
   1479c:	85 c0                	test   %eax,%eax
   1479e:	75 1e                	jne    147be <disk_open+0x87>
        log_printf("disk not exist. device:sd%x", dev->minor);
   147a0:	8b 45 08             	mov    0x8(%ebp),%eax
   147a3:	8b 40 08             	mov    0x8(%eax),%eax
   147a6:	83 ec 08             	sub    $0x8,%esp
   147a9:	50                   	push   %eax
   147aa:	68 09 96 01 00       	push   $0x19609
   147af:	e8 48 41 00 00       	call   188fc <log_printf>
   147b4:	83 c4 10             	add    $0x10,%esp
        return -1;
   147b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147bc:	eb 6c                	jmp    1482a <disk_open+0xf3>
    }

    partinfo_t * part_info = disk->partinfo + part_idx;
   147be:	8b 45 ec             	mov    -0x14(%ebp),%eax
   147c1:	8d 48 30             	lea    0x30(%eax),%ecx
   147c4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   147c7:	89 d0                	mov    %edx,%eax
   147c9:	01 c0                	add    %eax,%eax
   147cb:	01 d0                	add    %edx,%eax
   147cd:	c1 e0 04             	shl    $0x4,%eax
   147d0:	01 c8                	add    %ecx,%eax
   147d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0) {
   147d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   147d8:	8b 40 2c             	mov    0x2c(%eax),%eax
   147db:	85 c0                	test   %eax,%eax
   147dd:	75 1e                	jne    147fd <disk_open+0xc6>
        log_printf("part not exist. device:sd%x", dev->minor);
   147df:	8b 45 08             	mov    0x8(%ebp),%eax
   147e2:	8b 40 08             	mov    0x8(%eax),%eax
   147e5:	83 ec 08             	sub    $0x8,%esp
   147e8:	50                   	push   %eax
   147e9:	68 25 96 01 00       	push   $0x19625
   147ee:	e8 09 41 00 00       	call   188fc <log_printf>
   147f3:	83 c4 10             	add    $0x10,%esp
        return -1;
   147f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147fb:	eb 2d                	jmp    1482a <disk_open+0xf3>
    }

    // 磁盘存在，建立关联
    dev->data = part_info;
   147fd:	8b 45 08             	mov    0x8(%ebp),%eax
   14800:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14803:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   14806:	83 ec 08             	sub    $0x8,%esp
   14809:	68 c4 02 01 00       	push   $0x102c4
   1480e:	6a 2e                	push   $0x2e
   14810:	e8 9a e7 ff ff       	call   12faf <irq_install>
   14815:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   14818:	83 ec 0c             	sub    $0xc,%esp
   1481b:	6a 2e                	push   $0x2e
   1481d:	e8 c7 e7 ff ff       	call   12fe9 <irq_enable>
   14822:	83 c4 10             	add    $0x10,%esp
    return 0;
   14825:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1482a:	c9                   	leave  
   1482b:	c3                   	ret    

0001482c <disk_read>:

/**
 * @brief 读磁盘
 */
int disk_read (device_t * dev, int start_sector, char * buf, int count) {
   1482c:	55                   	push   %ebp
   1482d:	89 e5                	mov    %esp,%ebp
   1482f:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14832:	8b 45 08             	mov    0x8(%ebp),%eax
   14835:	8b 40 0c             	mov    0xc(%eax),%eax
   14838:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   1483b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1483f:	75 21                	jne    14862 <disk_read+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14841:	8b 45 08             	mov    0x8(%ebp),%eax
   14844:	8b 40 08             	mov    0x8(%eax),%eax
   14847:	83 ec 08             	sub    $0x8,%esp
   1484a:	50                   	push   %eax
   1484b:	68 44 96 01 00       	push   $0x19644
   14850:	e8 a7 40 00 00       	call   188fc <log_printf>
   14855:	83 c4 10             	add    $0x10,%esp
        return -1;
   14858:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1485d:	e9 08 01 00 00       	jmp    1496a <disk_read+0x13e>
    }

    disk_t * disk = part_info->disk;
   14862:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14865:	8b 40 20             	mov    0x20(%eax),%eax
   14868:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   1486b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1486f:	75 21                	jne    14892 <disk_read+0x66>
        log_printf("No disk for device %d", dev->minor);
   14871:	8b 45 08             	mov    0x8(%ebp),%eax
   14874:	8b 40 08             	mov    0x8(%eax),%eax
   14877:	83 ec 08             	sub    $0x8,%esp
   1487a:	50                   	push   %eax
   1487b:	68 66 96 01 00       	push   $0x19666
   14880:	e8 77 40 00 00       	call   188fc <log_printf>
   14885:	83 c4 10             	add    $0x10,%esp
        return -1;
   14888:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1488d:	e9 d8 00 00 00       	jmp    1496a <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   14892:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14895:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1489b:	83 ec 0c             	sub    $0xc,%esp
   1489e:	50                   	push   %eax
   1489f:	e8 91 33 00 00       	call   17c35 <mutex_lock>
   148a4:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   148a7:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   148ae:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   148b1:	8b 45 14             	mov    0x14(%ebp),%eax
   148b4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   148b7:	8b 4a 28             	mov    0x28(%edx),%ecx
   148ba:	8b 55 0c             	mov    0xc(%ebp),%edx
   148bd:	01 ca                	add    %ecx,%edx
   148bf:	6a 24                	push   $0x24
   148c1:	50                   	push   %eax
   148c2:	52                   	push   %edx
   148c3:	ff 75 ec             	pushl  -0x14(%ebp)
   148c6:	e8 1b f8 ff ff       	call   140e6 <ata_send_cmd>
   148cb:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   148ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   148d5:	eb 73                	jmp    1494a <disk_read+0x11e>
        // 利用信号量等待中断通知，然后再读取数据
        if (task_current()) {
   148d7:	e8 30 ce ff ff       	call   1170c <task_current>
   148dc:	85 c0                	test   %eax,%eax
   148de:	74 15                	je     148f5 <disk_read+0xc9>
            sem_wait(disk->op_sem);
   148e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148e3:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   148e9:	83 ec 0c             	sub    $0xc,%esp
   148ec:	50                   	push   %eax
   148ed:	e8 c7 34 00 00       	call   17db9 <sem_wait>
   148f2:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   148f5:	83 ec 0c             	sub    $0xc,%esp
   148f8:	ff 75 ec             	pushl  -0x14(%ebp)
   148fb:	e8 b6 f9 ff ff       	call   142b6 <ata_wait_data>
   14900:	83 c4 10             	add    $0x10,%esp
   14903:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14906:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1490a:	79 19                	jns    14925 <disk_read+0xf9>
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   1490c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1490f:	ff 75 14             	pushl  0x14(%ebp)
   14912:	ff 75 0c             	pushl  0xc(%ebp)
   14915:	50                   	push   %eax
   14916:	68 7c 96 01 00       	push   $0x1967c
   1491b:	e8 dc 3f 00 00       	call   188fc <log_printf>
   14920:	83 c4 10             	add    $0x10,%esp
            break;
   14923:	eb 2d                	jmp    14952 <disk_read+0x126>
        }

        // 此处再读取数据
        ata_read_data(disk, buf, disk->sector_size);
   14925:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14928:	8b 40 28             	mov    0x28(%eax),%eax
   1492b:	83 ec 04             	sub    $0x4,%esp
   1492e:	50                   	push   %eax
   1492f:	ff 75 10             	pushl  0x10(%ebp)
   14932:	ff 75 ec             	pushl  -0x14(%ebp)
   14935:	e8 dc f8 ff ff       	call   14216 <ata_read_data>
   1493a:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   1493d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14941:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14944:	8b 40 28             	mov    0x28(%eax),%eax
   14947:	01 45 10             	add    %eax,0x10(%ebp)
   1494a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1494d:	3b 45 14             	cmp    0x14(%ebp),%eax
   14950:	7c 85                	jl     148d7 <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   14952:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14955:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1495b:	83 ec 0c             	sub    $0xc,%esp
   1495e:	50                   	push   %eax
   1495f:	e8 68 33 00 00       	call   17ccc <mutex_unlock>
   14964:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14967:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1496a:	c9                   	leave  
   1496b:	c3                   	ret    

0001496c <disk_write>:

/**
 * @brief 写扇区
 */
int disk_write (device_t * dev, int start_sector, char * buf, int count) {
   1496c:	55                   	push   %ebp
   1496d:	89 e5                	mov    %esp,%ebp
   1496f:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14972:	8b 45 08             	mov    0x8(%ebp),%eax
   14975:	8b 40 0c             	mov    0xc(%eax),%eax
   14978:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   1497b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1497f:	75 21                	jne    149a2 <disk_write+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14981:	8b 45 08             	mov    0x8(%ebp),%eax
   14984:	8b 40 08             	mov    0x8(%eax),%eax
   14987:	83 ec 08             	sub    $0x8,%esp
   1498a:	50                   	push   %eax
   1498b:	68 44 96 01 00       	push   $0x19644
   14990:	e8 67 3f 00 00       	call   188fc <log_printf>
   14995:	83 c4 10             	add    $0x10,%esp
        return -1;
   14998:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1499d:	e9 08 01 00 00       	jmp    14aaa <disk_write+0x13e>
    }

    disk_t * disk = part_info->disk;
   149a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149a5:	8b 40 20             	mov    0x20(%eax),%eax
   149a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   149ab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   149af:	75 21                	jne    149d2 <disk_write+0x66>
        log_printf("No disk for device %d", dev->minor);
   149b1:	8b 45 08             	mov    0x8(%ebp),%eax
   149b4:	8b 40 08             	mov    0x8(%eax),%eax
   149b7:	83 ec 08             	sub    $0x8,%esp
   149ba:	50                   	push   %eax
   149bb:	68 66 96 01 00       	push   $0x19666
   149c0:	e8 37 3f 00 00       	call   188fc <log_printf>
   149c5:	83 c4 10             	add    $0x10,%esp
        return -1;
   149c8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   149cd:	e9 d8 00 00 00       	jmp    14aaa <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   149d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149d5:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   149db:	83 ec 0c             	sub    $0xc,%esp
   149de:	50                   	push   %eax
   149df:	e8 51 32 00 00       	call   17c35 <mutex_lock>
   149e4:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   149e7:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   149ee:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   149f1:	8b 45 14             	mov    0x14(%ebp),%eax
   149f4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   149f7:	8b 4a 28             	mov    0x28(%edx),%ecx
   149fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   149fd:	01 ca                	add    %ecx,%edx
   149ff:	6a 34                	push   $0x34
   14a01:	50                   	push   %eax
   14a02:	52                   	push   %edx
   14a03:	ff 75 ec             	pushl  -0x14(%ebp)
   14a06:	e8 db f6 ff ff       	call   140e6 <ata_send_cmd>
   14a0b:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14a15:	eb 73                	jmp    14a8a <disk_write+0x11e>
        // 先写数据
        ata_write_data(disk, buf, disk->sector_size);
   14a17:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a1a:	8b 40 28             	mov    0x28(%eax),%eax
   14a1d:	83 ec 04             	sub    $0x4,%esp
   14a20:	50                   	push   %eax
   14a21:	ff 75 10             	pushl  0x10(%ebp)
   14a24:	ff 75 ec             	pushl  -0x14(%ebp)
   14a27:	e8 3a f8 ff ff       	call   14266 <ata_write_data>
   14a2c:	83 c4 10             	add    $0x10,%esp

        // 利用信号量等待中断通知，等待写完成
        if (task_current()) {
   14a2f:	e8 d8 cc ff ff       	call   1170c <task_current>
   14a34:	85 c0                	test   %eax,%eax
   14a36:	74 15                	je     14a4d <disk_write+0xe1>
            sem_wait(disk->op_sem);
   14a38:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a3b:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14a41:	83 ec 0c             	sub    $0xc,%esp
   14a44:	50                   	push   %eax
   14a45:	e8 6f 33 00 00       	call   17db9 <sem_wait>
   14a4a:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   14a4d:	83 ec 0c             	sub    $0xc,%esp
   14a50:	ff 75 ec             	pushl  -0x14(%ebp)
   14a53:	e8 5e f8 ff ff       	call   142b6 <ata_wait_data>
   14a58:	83 c4 10             	add    $0x10,%esp
   14a5b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14a5e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14a62:	79 19                	jns    14a7d <disk_write+0x111>
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a67:	ff 75 14             	pushl  0x14(%ebp)
   14a6a:	ff 75 0c             	pushl  0xc(%ebp)
   14a6d:	50                   	push   %eax
   14a6e:	68 ac 96 01 00       	push   $0x196ac
   14a73:	e8 84 3e 00 00       	call   188fc <log_printf>
   14a78:	83 c4 10             	add    $0x10,%esp
            break;
   14a7b:	eb 15                	jmp    14a92 <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a7d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a81:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a84:	8b 40 28             	mov    0x28(%eax),%eax
   14a87:	01 45 10             	add    %eax,0x10(%ebp)
   14a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a8d:	3b 45 14             	cmp    0x14(%ebp),%eax
   14a90:	7c 85                	jl     14a17 <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14a92:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a95:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a9b:	83 ec 0c             	sub    $0xc,%esp
   14a9e:	50                   	push   %eax
   14a9f:	e8 28 32 00 00       	call   17ccc <mutex_unlock>
   14aa4:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14aaa:	c9                   	leave  
   14aab:	c3                   	ret    

00014aac <disk_control>:

/**
 * @brief 向磁盘发命令
 *
 */
int disk_control (device_t * dev, int cmd, int arg0, int arg1) {
   14aac:	55                   	push   %ebp
   14aad:	89 e5                	mov    %esp,%ebp
    return 0;
   14aaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14ab4:	5d                   	pop    %ebp
   14ab5:	c3                   	ret    

00014ab6 <disk_close>:

/**
 * @brief 关闭磁盘
 *
 */
void disk_close (device_t * dev) {
   14ab6:	55                   	push   %ebp
   14ab7:	89 e5                	mov    %esp,%ebp
}
   14ab9:	90                   	nop
   14aba:	5d                   	pop    %ebp
   14abb:	c3                   	ret    

00014abc <do_handler_ide_primary>:

/**
 * @brief 磁盘主通道中断处理
 */
void do_handler_ide_primary (exception_frame_t *frame)  {
   14abc:	55                   	push   %ebp
   14abd:	89 e5                	mov    %esp,%ebp
   14abf:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14ac2:	83 ec 0c             	sub    $0xc,%esp
   14ac5:	6a 2e                	push   $0x2e
   14ac7:	e8 0a e3 ff ff       	call   12dd6 <pic_send_eoi>
   14acc:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current()) {
   14acf:	a1 b4 65 03 00       	mov    0x365b4,%eax
   14ad4:	85 c0                	test   %eax,%eax
   14ad6:	74 19                	je     14af1 <do_handler_ide_primary+0x35>
   14ad8:	e8 2f cc ff ff       	call   1170c <task_current>
   14add:	85 c0                	test   %eax,%eax
   14adf:	74 10                	je     14af1 <do_handler_ide_primary+0x35>
        sem_notify(&op_sem);
   14ae1:	83 ec 0c             	sub    $0xc,%esp
   14ae4:	68 a4 65 03 00       	push   $0x365a4
   14ae9:	e8 39 33 00 00       	call   17e27 <sem_notify>
   14aee:	83 c4 10             	add    $0x10,%esp
    }
}
   14af1:	90                   	nop
   14af2:	c9                   	leave  
   14af3:	c3                   	ret    

00014af4 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14af4:	55                   	push   %ebp
   14af5:	89 e5                	mov    %esp,%ebp
   14af7:	83 ec 14             	sub    $0x14,%esp
   14afa:	8b 45 08             	mov    0x8(%ebp),%eax
   14afd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14b01:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14b05:	89 c2                	mov    %eax,%edx
   14b07:	ec                   	in     (%dx),%al
   14b08:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14b0b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14b0f:	c9                   	leave  
   14b10:	c3                   	ret    

00014b11 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14b11:	55                   	push   %ebp
   14b12:	89 e5                	mov    %esp,%ebp
   14b14:	83 ec 08             	sub    $0x8,%esp
   14b17:	8b 55 08             	mov    0x8(%ebp),%edx
   14b1a:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b1d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14b21:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14b24:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14b28:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14b2c:	ee                   	out    %al,(%dx)
}
   14b2d:	90                   	nop
   14b2e:	c9                   	leave  
   14b2f:	c3                   	ret    

00014b30 <get_key>:
        [0x34] = {'.', '>'},
        [0x35] = {'/', '?'},
        [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code) {
   14b30:	55                   	push   %ebp
   14b31:	89 e5                	mov    %esp,%ebp
   14b33:	83 ec 04             	sub    $0x4,%esp
   14b36:	8b 45 08             	mov    0x8(%ebp),%eax
   14b39:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14b3c:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14b40:	83 e0 7f             	and    $0x7f,%eax
}
   14b43:	c9                   	leave  
   14b44:	c3                   	ret    

00014b45 <is_make_code>:

static inline int is_make_code(uint8_t key_code) {
   14b45:	55                   	push   %ebp
   14b46:	89 e5                	mov    %esp,%ebp
   14b48:	83 ec 04             	sub    $0x4,%esp
   14b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   14b4e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14b51:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14b55:	f7 d0                	not    %eax
   14b57:	c0 e8 07             	shr    $0x7,%al
   14b5a:	0f b6 c0             	movzbl %al,%eax
}
   14b5d:	c9                   	leave  
   14b5e:	c3                   	ret    

00014b5f <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void) {
   14b5f:	55                   	push   %ebp
   14b60:	89 e5                	mov    %esp,%ebp
   14b62:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000; 
   14b65:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14b6c:	eb 14                	jmp    14b82 <kbd_wait_send_ready+0x23>
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0) {
   14b6e:	6a 64                	push   $0x64
   14b70:	e8 7f ff ff ff       	call   14af4 <inb>
   14b75:	83 c4 04             	add    $0x4,%esp
   14b78:	0f b6 c0             	movzbl %al,%eax
   14b7b:	83 e0 02             	and    $0x2,%eax
   14b7e:	85 c0                	test   %eax,%eax
   14b80:	74 0f                	je     14b91 <kbd_wait_send_ready+0x32>
    while (time_out--) {
   14b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14b85:	8d 50 ff             	lea    -0x1(%eax),%edx
   14b88:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14b8b:	85 c0                	test   %eax,%eax
   14b8d:	75 df                	jne    14b6e <kbd_wait_send_ready+0xf>
   14b8f:	eb 01                	jmp    14b92 <kbd_wait_send_ready+0x33>
            return;
   14b91:	90                   	nop
        }
    }
}
   14b92:	c9                   	leave  
   14b93:	c3                   	ret    

00014b94 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data) {
   14b94:	55                   	push   %ebp
   14b95:	89 e5                	mov    %esp,%ebp
   14b97:	83 ec 08             	sub    $0x8,%esp
   14b9a:	8b 55 08             	mov    0x8(%ebp),%edx
   14b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ba0:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14ba3:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14ba6:	e8 b4 ff ff ff       	call   14b5f <kbd_wait_send_ready>
    outb(port, data);
   14bab:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14baf:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14bb3:	52                   	push   %edx
   14bb4:	50                   	push   %eax
   14bb5:	e8 57 ff ff ff       	call   14b11 <outb>
   14bba:	83 c4 08             	add    $0x8,%esp
}
   14bbd:	90                   	nop
   14bbe:	c9                   	leave  
   14bbf:	c3                   	ret    

00014bc0 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void) {
   14bc0:	55                   	push   %ebp
   14bc1:	89 e5                	mov    %esp,%ebp
   14bc3:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14bc6:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14bcd:	eb 14                	jmp    14be3 <kbd_wait_recv_ready+0x23>
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY) {
   14bcf:	6a 64                	push   $0x64
   14bd1:	e8 1e ff ff ff       	call   14af4 <inb>
   14bd6:	83 c4 04             	add    $0x4,%esp
   14bd9:	0f b6 c0             	movzbl %al,%eax
   14bdc:	83 e0 01             	and    $0x1,%eax
   14bdf:	85 c0                	test   %eax,%eax
   14be1:	75 0f                	jne    14bf2 <kbd_wait_recv_ready+0x32>
    while (time_out--) {
   14be3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14be6:	8d 50 ff             	lea    -0x1(%eax),%edx
   14be9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14bec:	85 c0                	test   %eax,%eax
   14bee:	75 df                	jne    14bcf <kbd_wait_recv_ready+0xf>
   14bf0:	eb 01                	jmp    14bf3 <kbd_wait_recv_ready+0x33>
            return;
   14bf2:	90                   	nop
        }
    }
}
   14bf3:	c9                   	leave  
   14bf4:	c3                   	ret    

00014bf5 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void) {
   14bf5:	55                   	push   %ebp
   14bf6:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14bf8:	e8 c3 ff ff ff       	call   14bc0 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14bfd:	6a 60                	push   $0x60
   14bff:	e8 f0 fe ff ff       	call   14af4 <inb>
   14c04:	83 c4 04             	add    $0x4,%esp
}
   14c07:	c9                   	leave  
   14c08:	c3                   	ret    

00014c09 <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status (void) {
   14c09:	55                   	push   %ebp
   14c0a:	89 e5                	mov    %esp,%ebp
   14c0c:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14c0f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14c16:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14c1d:	0f b6 c0             	movzbl %al,%eax
   14c20:	83 e0 01             	and    $0x1,%eax
   14c23:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14c26:	68 ed 00 00 00       	push   $0xed
   14c2b:	6a 60                	push   $0x60
   14c2d:	e8 62 ff ff ff       	call   14b94 <kbd_write>
   14c32:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14c35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14c38:	0f b6 c0             	movzbl %al,%eax
   14c3b:	50                   	push   %eax
   14c3c:	6a 60                	push   $0x60
   14c3e:	e8 51 ff ff ff       	call   14b94 <kbd_write>
   14c43:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14c46:	e8 aa ff ff ff       	call   14bf5 <kbd_read>
}
   14c4b:	90                   	nop
   14c4c:	c9                   	leave  
   14c4d:	c3                   	ret    

00014c4e <do_fx_key>:

static void do_fx_key (int key) {
   14c4e:	55                   	push   %ebp
   14c4f:	89 e5                	mov    %esp,%ebp
   14c51:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14c54:	8b 45 08             	mov    0x8(%ebp),%eax
   14c57:	83 e8 3b             	sub    $0x3b,%eax
   14c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14c5d:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14c64:	83 e0 20             	and    $0x20,%eax
   14c67:	84 c0                	test   %al,%al
   14c69:	75 0e                	jne    14c79 <do_fx_key+0x2b>
   14c6b:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14c72:	83 e0 40             	and    $0x40,%eax
   14c75:	84 c0                	test   %al,%al
   14c77:	74 0e                	je     14c87 <do_fx_key+0x39>
        tty_select(index);
   14c79:	83 ec 0c             	sub    $0xc,%esp
   14c7c:	ff 75 f4             	pushl  -0xc(%ebp)
   14c7f:	e8 85 09 00 00       	call   15609 <tty_select>
   14c84:	83 c4 10             	add    $0x10,%esp
    }
}
   14c87:	90                   	nop
   14c88:	c9                   	leave  
   14c89:	c3                   	ret    

00014c8a <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key (uint8_t raw_code) {
   14c8a:	55                   	push   %ebp
   14c8b:	89 e5                	mov    %esp,%ebp
   14c8d:	83 ec 28             	sub    $0x28,%esp
   14c90:	8b 45 08             	mov    0x8(%ebp),%eax
   14c93:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);		// 去掉最高位
   14c96:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14c9a:	50                   	push   %eax
   14c9b:	e8 90 fe ff ff       	call   14b30 <get_key>
   14ca0:	83 c4 04             	add    $0x4,%esp
   14ca3:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code);
   14ca6:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14caa:	50                   	push   %eax
   14cab:	e8 95 fe ff ff       	call   14b45 <is_make_code>
   14cb0:	83 c4 04             	add    $0x4,%esp
   14cb3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
	switch (key) {
   14cb6:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14cba:	83 e8 1d             	sub    $0x1d,%eax
   14cbd:	83 f8 25             	cmp    $0x25,%eax
   14cc0:	0f 87 f9 00 00 00    	ja     14dbf <do_normal_key+0x135>
   14cc6:	8b 04 85 e0 98 01 00 	mov    0x198e0(,%eax,4),%eax
   14ccd:	ff e0                	jmp    *%eax
	    // shift, alt, ctrl键，记录标志位
	case KEY_RSHIFT:
		kbd_state.rshift_press = is_make;  // 仅设置标志位
   14ccf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cd2:	c1 e0 07             	shl    $0x7,%eax
   14cd5:	c0 f8 07             	sar    $0x7,%al
   14cd8:	83 e0 01             	and    $0x1,%eax
   14cdb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14ce2:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ce9:	83 e0 fb             	and    $0xfffffffb,%eax
   14cec:	09 d0                	or     %edx,%eax
   14cee:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14cf3:	e9 5f 01 00 00       	jmp    14e57 <do_normal_key+0x1cd>
	case KEY_LSHIFT:
		kbd_state.lshift_press = is_make;  // 仅设置标志位
   14cf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cfb:	c1 e0 07             	shl    $0x7,%eax
   14cfe:	c0 f8 07             	sar    $0x7,%al
   14d01:	83 e0 01             	and    $0x1,%eax
   14d04:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14d07:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d0e:	83 e0 fd             	and    $0xfffffffd,%eax
   14d11:	09 d0                	or     %edx,%eax
   14d13:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14d18:	e9 3a 01 00 00       	jmp    14e57 <do_normal_key+0x1cd>
    case KEY_CAPS:  // 大小写键，设置大小写状态
		if (is_make) {
   14d1d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14d21:	0f 84 2c 01 00 00    	je     14e53 <do_normal_key+0x1c9>
			kbd_state.caps_lock = ~kbd_state.caps_lock;
   14d27:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d2e:	c1 e0 07             	shl    $0x7,%eax
   14d31:	c0 f8 07             	sar    $0x7,%al
   14d34:	f7 d0                	not    %eax
   14d36:	c1 e0 07             	shl    $0x7,%eax
   14d39:	c0 f8 07             	sar    $0x7,%al
   14d3c:	83 e0 01             	and    $0x1,%eax
   14d3f:	89 c2                	mov    %eax,%edx
   14d41:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d48:	83 e0 fe             	and    $0xfffffffe,%eax
   14d4b:	09 d0                	or     %edx,%eax
   14d4d:	a2 b8 65 03 00       	mov    %al,0x365b8
			update_led_status();
   14d52:	e8 b2 fe ff ff       	call   14c09 <update_led_status>
		}
		break;
   14d57:	e9 f7 00 00 00       	jmp    14e53 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make;  // 仅设置标志位
   14d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d5f:	c1 e0 07             	shl    $0x7,%eax
   14d62:	c0 f8 07             	sar    $0x7,%al
   14d65:	83 e0 01             	and    $0x1,%eax
   14d68:	c1 e0 04             	shl    $0x4,%eax
   14d6b:	89 c2                	mov    %eax,%edx
   14d6d:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d74:	83 e0 ef             	and    $0xffffffef,%eax
   14d77:	09 d0                	or     %edx,%eax
   14d79:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14d7e:	e9 d4 00 00 00       	jmp    14e57 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make;  // 仅设置标志位
   14d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d86:	c1 e0 07             	shl    $0x7,%eax
   14d89:	c0 f8 07             	sar    $0x7,%al
   14d8c:	83 e0 01             	and    $0x1,%eax
   14d8f:	c1 e0 05             	shl    $0x5,%eax
   14d92:	89 c2                	mov    %eax,%edx
   14d94:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d9b:	83 e0 df             	and    $0xffffffdf,%eax
   14d9e:	09 d0                	or     %edx,%eax
   14da0:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14da5:	e9 ad 00 00 00       	jmp    14e57 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
         do_fx_key(key);
   14daa:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14dae:	83 ec 0c             	sub    $0xc,%esp
   14db1:	50                   	push   %eax
   14db2:	e8 97 fe ff ff       	call   14c4e <do_fx_key>
   14db7:	83 c4 10             	add    $0x10,%esp
        break;
   14dba:	e9 98 00 00 00       	jmp    14e57 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make) {
   14dbf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14dc3:	0f 84 8d 00 00 00    	je     14e56 <do_normal_key+0x1cc>
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14dc9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dd0:	83 e0 04             	and    $0x4,%eax
   14dd3:	84 c0                	test   %al,%al
   14dd5:	75 0e                	jne    14de5 <do_normal_key+0x15b>
   14dd7:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dde:	83 e0 02             	and    $0x2,%eax
   14de1:	84 c0                	test   %al,%al
   14de3:	74 11                	je     14df6 <do_normal_key+0x16c>
                key = map_table[key].func;  // 第2功能
   14de5:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14de9:	0f b6 84 00 e1 96 01 	movzbl 0x196e1(%eax,%eax,1),%eax
   14df0:	00 
   14df1:	88 45 f7             	mov    %al,-0x9(%ebp)
   14df4:	eb 0f                	jmp    14e05 <do_normal_key+0x17b>
            }else {
                key = map_table[key].normal;  // 第1功能
   14df6:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14dfa:	0f b6 84 00 e0 96 01 	movzbl 0x196e0(%eax,%eax,1),%eax
   14e01:	00 
   14e02:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock) {
   14e05:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e0c:	83 e0 01             	and    $0x1,%eax
   14e0f:	84 c0                	test   %al,%al
   14e11:	74 2e                	je     14e41 <do_normal_key+0x1b7>
                if ((key >= 'A') && (key <= 'Z')) {
   14e13:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14e17:	7e 12                	jle    14e2b <do_normal_key+0x1a1>
   14e19:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14e1d:	7f 0c                	jg     14e2b <do_normal_key+0x1a1>
                    // 大写转小写
                    key = key - 'A' + 'a';
   14e1f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14e23:	83 c0 20             	add    $0x20,%eax
   14e26:	88 45 f7             	mov    %al,-0x9(%ebp)
   14e29:	eb 16                	jmp    14e41 <do_normal_key+0x1b7>
                } else if ((key >= 'a') && (key <= 'z')) {
   14e2b:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14e2f:	7e 10                	jle    14e41 <do_normal_key+0x1b7>
   14e31:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14e35:	7f 0a                	jg     14e41 <do_normal_key+0x1b7>
                    // 小写转大小
                    key = key - 'a' + 'A';
   14e37:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14e3b:	83 e8 20             	sub    $0x20,%eax
   14e3e:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            //log_printf("key=%c", key);
            tty_in(key);
   14e41:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e45:	83 ec 0c             	sub    $0xc,%esp
   14e48:	50                   	push   %eax
   14e49:	e8 4e 07 00 00       	call   1559c <tty_in>
   14e4e:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14e51:	eb 03                	jmp    14e56 <do_normal_key+0x1cc>
		break;
   14e53:	90                   	nop
   14e54:	eb 01                	jmp    14e57 <do_normal_key+0x1cd>
        break;
   14e56:	90                   	nop
    }
}
   14e57:	90                   	nop
   14e58:	c9                   	leave  
   14e59:	c3                   	ret    

00014e5a <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key (uint8_t raw_code) {
   14e5a:	55                   	push   %ebp
   14e5b:	89 e5                	mov    %esp,%ebp
   14e5d:	83 ec 14             	sub    $0x14,%esp
   14e60:	8b 45 08             	mov    0x8(%ebp),%eax
   14e63:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);			// 去掉最高位
   14e66:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14e6a:	50                   	push   %eax
   14e6b:	e8 c0 fc ff ff       	call   14b30 <get_key>
   14e70:	83 c4 04             	add    $0x4,%esp
   14e73:	0f be c0             	movsbl %al,%eax
   14e76:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code);	// 按下或释放
   14e79:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14e7d:	50                   	push   %eax
   14e7e:	e8 c2 fc ff ff       	call   14b45 <is_make_code>
   14e83:	83 c4 04             	add    $0x4,%esp
   14e86:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key) {
   14e89:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14e8c:	83 f8 1d             	cmp    $0x1d,%eax
   14e8f:	74 07                	je     14e98 <do_e0_key+0x3e>
   14e91:	83 f8 38             	cmp    $0x38,%eax
   14e94:	74 26                	je     14ebc <do_e0_key+0x62>
            break;
        case KEY_ALT:
            kbd_state.ralt_press = is_make;  // 仅设置标志位
            break;
    }
}
   14e96:	eb 49                	jmp    14ee1 <do_e0_key+0x87>
            kbd_state.rctrl_press = is_make;  // 仅设置标志位
   14e98:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14e9b:	c1 e0 07             	shl    $0x7,%eax
   14e9e:	c0 f8 07             	sar    $0x7,%al
   14ea1:	83 e0 01             	and    $0x1,%eax
   14ea4:	c1 e0 06             	shl    $0x6,%eax
   14ea7:	89 c2                	mov    %eax,%edx
   14ea9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14eb0:	83 e0 bf             	and    $0xffffffbf,%eax
   14eb3:	09 d0                	or     %edx,%eax
   14eb5:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14eba:	eb 25                	jmp    14ee1 <do_e0_key+0x87>
            kbd_state.ralt_press = is_make;  // 仅设置标志位
   14ebc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14ebf:	c1 e0 07             	shl    $0x7,%eax
   14ec2:	c0 f8 07             	sar    $0x7,%al
   14ec5:	83 e0 01             	and    $0x1,%eax
   14ec8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14ecf:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ed6:	83 e0 f7             	and    $0xfffffff7,%eax
   14ed9:	09 d0                	or     %edx,%eax
   14edb:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14ee0:	90                   	nop
}
   14ee1:	90                   	nop
   14ee2:	c9                   	leave  
   14ee3:	c3                   	ret    

00014ee4 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame) {
   14ee4:	55                   	push   %ebp
   14ee5:	89 e5                	mov    %esp,%ebp
   14ee7:	83 ec 18             	sub    $0x18,%esp
		BEGIN_E0,			// 收到e0字符，以e0开头的2字节或4字节(包括e0)
		BEGIN_E1,			// 收到e1字符，以e1开头的6字节(包括e1)
    }recv_state = NORMAL;

	// 检查是否有数据，无数据则退出
	uint8_t status = inb(KBD_PORT_STAT);
   14eea:	6a 64                	push   $0x64
   14eec:	e8 03 fc ff ff       	call   14af4 <inb>
   14ef1:	83 c4 04             	add    $0x4,%esp
   14ef4:	88 45 f7             	mov    %al,-0x9(%ebp)
	if (!(status & KBD_STAT_RECV_READY)) {
   14ef7:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14efb:	83 e0 01             	and    $0x1,%eax
   14efe:	85 c0                	test   %eax,%eax
   14f00:	75 12                	jne    14f14 <do_handler_kbd+0x30>
        pic_send_eoi(IRQ1_KEYBOARD);
   14f02:	83 ec 0c             	sub    $0xc,%esp
   14f05:	6a 21                	push   $0x21
   14f07:	e8 ca de ff ff       	call   12dd6 <pic_send_eoi>
   14f0c:	83 c4 10             	add    $0x10,%esp
		return;
   14f0f:	e9 90 00 00 00       	jmp    14fa4 <do_handler_kbd+0xc0>
	}

	// 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14f14:	83 ec 0c             	sub    $0xc,%esp
   14f17:	6a 60                	push   $0x60
   14f19:	e8 d6 fb ff ff       	call   14af4 <inb>
   14f1e:	83 c4 10             	add    $0x10,%esp
   14f21:	88 45 f6             	mov    %al,-0xa(%ebp)

	// 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
	// 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14f24:	83 ec 0c             	sub    $0xc,%esp
   14f27:	6a 21                	push   $0x21
   14f29:	e8 a8 de ff ff       	call   12dd6 <pic_send_eoi>
   14f2e:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
	if (raw_code == KEY_E0) {
   14f31:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   14f35:	75 0c                	jne    14f43 <do_handler_kbd+0x5f>
		// E0字符
		recv_state = BEGIN_E0;
   14f37:	c7 05 bc 65 03 00 01 	movl   $0x1,0x365bc
   14f3e:	00 00 00 
   14f41:	eb 61                	jmp    14fa4 <do_handler_kbd+0xc0>
	} else if (raw_code == KEY_E1) {
   14f43:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   14f47:	75 0c                	jne    14f55 <do_handler_kbd+0x71>
		// E1字符，不处理
		recv_state = BEGIN_E1;
   14f49:	c7 05 bc 65 03 00 02 	movl   $0x2,0x365bc
   14f50:	00 00 00 
   14f53:	eb 4f                	jmp    14fa4 <do_handler_kbd+0xc0>
	} else {
		switch (recv_state) {
   14f55:	a1 bc 65 03 00       	mov    0x365bc,%eax
   14f5a:	83 f8 01             	cmp    $0x1,%eax
   14f5d:	74 1e                	je     14f7d <do_handler_kbd+0x99>
   14f5f:	83 f8 01             	cmp    $0x1,%eax
   14f62:	72 07                	jb     14f6b <do_handler_kbd+0x87>
   14f64:	83 f8 02             	cmp    $0x2,%eax
   14f67:	74 30                	je     14f99 <do_handler_kbd+0xb5>
   14f69:	eb 39                	jmp    14fa4 <do_handler_kbd+0xc0>
		case NORMAL:
			do_normal_key(raw_code);
   14f6b:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   14f6f:	83 ec 0c             	sub    $0xc,%esp
   14f72:	50                   	push   %eax
   14f73:	e8 12 fd ff ff       	call   14c8a <do_normal_key>
   14f78:	83 c4 10             	add    $0x10,%esp
			break;
   14f7b:	eb 27                	jmp    14fa4 <do_handler_kbd+0xc0>
		case BEGIN_E0: // 不处理print scr
			do_e0_key(raw_code);
   14f7d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   14f81:	83 ec 0c             	sub    $0xc,%esp
   14f84:	50                   	push   %eax
   14f85:	e8 d0 fe ff ff       	call   14e5a <do_e0_key>
   14f8a:	83 c4 10             	add    $0x10,%esp
			recv_state = NORMAL;
   14f8d:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   14f94:	00 00 00 
			break;
   14f97:	eb 0b                	jmp    14fa4 <do_handler_kbd+0xc0>
		case BEGIN_E1:  // 不处理pause
			recv_state = NORMAL;
   14f99:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   14fa0:	00 00 00 
			break;
   14fa3:	90                   	nop
		}
	}
}
   14fa4:	c9                   	leave  
   14fa5:	c3                   	ret    

00014fa6 <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void) {
   14fa6:	55                   	push   %ebp
   14fa7:	89 e5                	mov    %esp,%ebp
   14fa9:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited) {
   14fac:	a1 c0 65 03 00       	mov    0x365c0,%eax
   14fb1:	85 c0                	test   %eax,%eax
   14fb3:	75 2e                	jne    14fe3 <kbd_init+0x3d>
        update_led_status();
   14fb5:	e8 4f fc ff ff       	call   14c09 <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   14fba:	83 ec 08             	sub    $0x8,%esp
   14fbd:	68 a5 02 01 00       	push   $0x102a5
   14fc2:	6a 21                	push   $0x21
   14fc4:	e8 e6 df ff ff       	call   12faf <irq_install>
   14fc9:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   14fcc:	83 ec 0c             	sub    $0xc,%esp
   14fcf:	6a 21                	push   $0x21
   14fd1:	e8 13 e0 ff ff       	call   12fe9 <irq_enable>
   14fd6:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   14fd9:	c7 05 c0 65 03 00 01 	movl   $0x1,0x365c0
   14fe0:	00 00 00 
    }
}
   14fe3:	90                   	nop
   14fe4:	c9                   	leave  
   14fe5:	c3                   	ret    

00014fe6 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14fe6:	55                   	push   %ebp
   14fe7:	89 e5                	mov    %esp,%ebp
   14fe9:	83 ec 08             	sub    $0x8,%esp
   14fec:	8b 55 08             	mov    0x8(%ebp),%edx
   14fef:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ff2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14ff6:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14ff9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14ffd:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   15001:	ee                   	out    %al,(%dx)
}
   15002:	90                   	nop
   15003:	c9                   	leave  
   15004:	c3                   	ret    

00015005 <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   15005:	55                   	push   %ebp
   15006:	89 e5                	mov    %esp,%ebp
   15008:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1500b:	a1 c4 65 03 00       	mov    0x365c4,%eax
   15010:	83 c0 01             	add    $0x1,%eax
   15013:	a3 c4 65 03 00       	mov    %eax,0x365c4

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续噢应
    pic_send_eoi(IRQ0_TIMER);
   15018:	83 ec 0c             	sub    $0xc,%esp
   1501b:	6a 20                	push   $0x20
   1501d:	e8 b4 dd ff ff       	call   12dd6 <pic_send_eoi>
   15022:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   15025:	e8 35 c8 ff ff       	call   1185f <task_time_tick>
}
   1502a:	90                   	nop
   1502b:	c9                   	leave  
   1502c:	c3                   	ret    

0001502d <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   1502d:	55                   	push   %ebp
   1502e:	89 e5                	mov    %esp,%ebp
   15030:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   15033:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 2023-3-18 写错了，应该是模式3或者模式2
    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1503a:	6a 36                	push   $0x36
   1503c:	6a 43                	push   $0x43
   1503e:	e8 a3 ff ff ff       	call   14fe6 <outb>
   15043:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   15046:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15049:	0f b6 c0             	movzbl %al,%eax
   1504c:	50                   	push   %eax
   1504d:	6a 40                	push   $0x40
   1504f:	e8 92 ff ff ff       	call   14fe6 <outb>
   15054:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   15057:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1505a:	c1 e8 08             	shr    $0x8,%eax
   1505d:	0f b6 c0             	movzbl %al,%eax
   15060:	50                   	push   %eax
   15061:	6a 40                	push   $0x40
   15063:	e8 7e ff ff ff       	call   14fe6 <outb>
   15068:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1506b:	83 ec 08             	sub    $0x8,%esp
   1506e:	68 86 02 01 00       	push   $0x10286
   15073:	6a 20                	push   $0x20
   15075:	e8 35 df ff ff       	call   12faf <irq_install>
   1507a:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1507d:	83 ec 0c             	sub    $0xc,%esp
   15080:	6a 20                	push   $0x20
   15082:	e8 62 df ff ff       	call   12fe9 <irq_enable>
   15087:	83 c4 10             	add    $0x10,%esp
}
   1508a:	90                   	nop
   1508b:	c9                   	leave  
   1508c:	c3                   	ret    

0001508d <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   1508d:	55                   	push   %ebp
   1508e:	89 e5                	mov    %esp,%ebp
   15090:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15093:	c7 05 c4 65 03 00 00 	movl   $0x0,0x365c4
   1509a:	00 00 00 

    init_pit();
   1509d:	e8 8b ff ff ff       	call   1502d <init_pit>
}
   150a2:	90                   	nop
   150a3:	c9                   	leave  
   150a4:	c3                   	ret    

000150a5 <tty_fifo_init>:
static int curr_tty = 0;

/**
 * @brief FIFO初始化
 */
void tty_fifo_init (tty_fifo_t * fifo, char * buf, int size) {
   150a5:	55                   	push   %ebp
   150a6:	89 e5                	mov    %esp,%ebp
	fifo->buf = buf;
   150a8:	8b 45 08             	mov    0x8(%ebp),%eax
   150ab:	8b 55 0c             	mov    0xc(%ebp),%edx
   150ae:	89 10                	mov    %edx,(%eax)
	fifo->count = 0;
   150b0:	8b 45 08             	mov    0x8(%ebp),%eax
   150b3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	fifo->size = size;
   150ba:	8b 45 08             	mov    0x8(%ebp),%eax
   150bd:	8b 55 10             	mov    0x10(%ebp),%edx
   150c0:	89 50 04             	mov    %edx,0x4(%eax)
	fifo->read = fifo->write = 0;
   150c3:	8b 45 08             	mov    0x8(%ebp),%eax
   150c6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   150cd:	8b 45 08             	mov    0x8(%ebp),%eax
   150d0:	8b 50 0c             	mov    0xc(%eax),%edx
   150d3:	8b 45 08             	mov    0x8(%ebp),%eax
   150d6:	89 50 08             	mov    %edx,0x8(%eax)
}
   150d9:	90                   	nop
   150da:	5d                   	pop    %ebp
   150db:	c3                   	ret    

000150dc <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get (tty_fifo_t * fifo, char * c) {
   150dc:	55                   	push   %ebp
   150dd:	89 e5                	mov    %esp,%ebp
   150df:	53                   	push   %ebx
   150e0:	83 ec 14             	sub    $0x14,%esp
	if (fifo->count <= 0) {
   150e3:	8b 45 08             	mov    0x8(%ebp),%eax
   150e6:	8b 40 10             	mov    0x10(%eax),%eax
   150e9:	85 c0                	test   %eax,%eax
   150eb:	7f 07                	jg     150f4 <tty_fifo_get+0x18>
		return -1;
   150ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   150f2:	eb 62                	jmp    15156 <tty_fifo_get+0x7a>
	}

	irq_state_t state = irq_enter_protection();
   150f4:	e8 18 e0 ff ff       	call   13111 <irq_enter_protection>
   150f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*c = fifo->buf[fifo->read++];
   150fc:	8b 45 08             	mov    0x8(%ebp),%eax
   150ff:	8b 18                	mov    (%eax),%ebx
   15101:	8b 45 08             	mov    0x8(%ebp),%eax
   15104:	8b 40 08             	mov    0x8(%eax),%eax
   15107:	8d 48 01             	lea    0x1(%eax),%ecx
   1510a:	8b 55 08             	mov    0x8(%ebp),%edx
   1510d:	89 4a 08             	mov    %ecx,0x8(%edx)
   15110:	01 d8                	add    %ebx,%eax
   15112:	0f b6 10             	movzbl (%eax),%edx
   15115:	8b 45 0c             	mov    0xc(%ebp),%eax
   15118:	88 10                	mov    %dl,(%eax)
	if (fifo->read >= fifo->size) {
   1511a:	8b 45 08             	mov    0x8(%ebp),%eax
   1511d:	8b 50 08             	mov    0x8(%eax),%edx
   15120:	8b 45 08             	mov    0x8(%ebp),%eax
   15123:	8b 40 04             	mov    0x4(%eax),%eax
   15126:	39 c2                	cmp    %eax,%edx
   15128:	7c 0a                	jl     15134 <tty_fifo_get+0x58>
		fifo->read = 0;
   1512a:	8b 45 08             	mov    0x8(%ebp),%eax
   1512d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	fifo->count--;
   15134:	8b 45 08             	mov    0x8(%ebp),%eax
   15137:	8b 40 10             	mov    0x10(%eax),%eax
   1513a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1513d:	8b 45 08             	mov    0x8(%ebp),%eax
   15140:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   15143:	83 ec 0c             	sub    $0xc,%esp
   15146:	ff 75 f4             	pushl  -0xc(%ebp)
   15149:	e8 db df ff ff       	call   13129 <irq_leave_protection>
   1514e:	83 c4 10             	add    $0x10,%esp
	return 0;
   15151:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15156:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15159:	c9                   	leave  
   1515a:	c3                   	ret    

0001515b <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put (tty_fifo_t * fifo, char c) {
   1515b:	55                   	push   %ebp
   1515c:	89 e5                	mov    %esp,%ebp
   1515e:	53                   	push   %ebx
   1515f:	83 ec 24             	sub    $0x24,%esp
   15162:	8b 45 0c             	mov    0xc(%ebp),%eax
   15165:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (fifo->count >= fifo->size) {
   15168:	8b 45 08             	mov    0x8(%ebp),%eax
   1516b:	8b 50 10             	mov    0x10(%eax),%edx
   1516e:	8b 45 08             	mov    0x8(%ebp),%eax
   15171:	8b 40 04             	mov    0x4(%eax),%eax
   15174:	39 c2                	cmp    %eax,%edx
   15176:	7c 07                	jl     1517f <tty_fifo_put+0x24>
		return -1;
   15178:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1517d:	eb 61                	jmp    151e0 <tty_fifo_put+0x85>
	}

	irq_state_t state = irq_enter_protection();
   1517f:	e8 8d df ff ff       	call   13111 <irq_enter_protection>
   15184:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fifo->buf[fifo->write++] = c;
   15187:	8b 45 08             	mov    0x8(%ebp),%eax
   1518a:	8b 18                	mov    (%eax),%ebx
   1518c:	8b 45 08             	mov    0x8(%ebp),%eax
   1518f:	8b 40 0c             	mov    0xc(%eax),%eax
   15192:	8d 48 01             	lea    0x1(%eax),%ecx
   15195:	8b 55 08             	mov    0x8(%ebp),%edx
   15198:	89 4a 0c             	mov    %ecx,0xc(%edx)
   1519b:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1519e:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   151a2:	88 02                	mov    %al,(%edx)
	if (fifo->write >= fifo->size) {
   151a4:	8b 45 08             	mov    0x8(%ebp),%eax
   151a7:	8b 50 0c             	mov    0xc(%eax),%edx
   151aa:	8b 45 08             	mov    0x8(%ebp),%eax
   151ad:	8b 40 04             	mov    0x4(%eax),%eax
   151b0:	39 c2                	cmp    %eax,%edx
   151b2:	7c 0a                	jl     151be <tty_fifo_put+0x63>
		fifo->write = 0;
   151b4:	8b 45 08             	mov    0x8(%ebp),%eax
   151b7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	fifo->count++;
   151be:	8b 45 08             	mov    0x8(%ebp),%eax
   151c1:	8b 40 10             	mov    0x10(%eax),%eax
   151c4:	8d 50 01             	lea    0x1(%eax),%edx
   151c7:	8b 45 08             	mov    0x8(%ebp),%eax
   151ca:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   151cd:	83 ec 0c             	sub    $0xc,%esp
   151d0:	ff 75 f4             	pushl  -0xc(%ebp)
   151d3:	e8 51 df ff ff       	call   13129 <irq_leave_protection>
   151d8:	83 c4 10             	add    $0x10,%esp

	return 0;
   151db:	b8 00 00 00 00       	mov    $0x0,%eax
}
   151e0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   151e3:	c9                   	leave  
   151e4:	c3                   	ret    

000151e5 <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t * get_tty (device_t * dev) {
   151e5:	55                   	push   %ebp
   151e6:	89 e5                	mov    %esp,%ebp
   151e8:	83 ec 18             	sub    $0x18,%esp
	int tty = dev->minor;
   151eb:	8b 45 08             	mov    0x8(%ebp),%eax
   151ee:	8b 40 08             	mov    0x8(%eax),%eax
   151f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count)) {
   151f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   151f8:	78 10                	js     1520a <get_tty+0x25>
   151fa:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   151fe:	7f 0a                	jg     1520a <get_tty+0x25>
   15200:	8b 45 08             	mov    0x8(%ebp),%eax
   15203:	8b 40 10             	mov    0x10(%eax),%eax
   15206:	85 c0                	test   %eax,%eax
   15208:	75 1a                	jne    15224 <get_tty+0x3f>
		log_printf("tty is not opened. tty = %d", tty);
   1520a:	83 ec 08             	sub    $0x8,%esp
   1520d:	ff 75 f4             	pushl  -0xc(%ebp)
   15210:	68 78 99 01 00       	push   $0x19978
   15215:	e8 e2 36 00 00       	call   188fc <log_printf>
   1521a:	83 c4 10             	add    $0x10,%esp
		return (tty_t *)0;
   1521d:	b8 00 00 00 00       	mov    $0x0,%eax
   15222:	eb 0e                	jmp    15232 <get_tty+0x4d>
	}

	return tty_devs + tty;
   15224:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15227:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1522d:	05 e0 65 03 00       	add    $0x365e0,%eax
}
   15232:	c9                   	leave  
   15233:	c3                   	ret    

00015234 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open (device_t * dev)  {
   15234:	55                   	push   %ebp
   15235:	89 e5                	mov    %esp,%ebp
   15237:	83 ec 18             	sub    $0x18,%esp
	int idx = dev->minor;
   1523a:	8b 45 08             	mov    0x8(%ebp),%eax
   1523d:	8b 40 08             	mov    0x8(%eax),%eax
   15240:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((idx < 0) || (idx >= TTY_NR)) {
   15243:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15247:	78 06                	js     1524f <tty_open+0x1b>
   15249:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1524d:	7e 1d                	jle    1526c <tty_open+0x38>
		log_printf("open tty failed. incorrect tty num = %d", idx);
   1524f:	83 ec 08             	sub    $0x8,%esp
   15252:	ff 75 f4             	pushl  -0xc(%ebp)
   15255:	68 94 99 01 00       	push   $0x19994
   1525a:	e8 9d 36 00 00       	call   188fc <log_printf>
   1525f:	83 c4 10             	add    $0x10,%esp
		return -1;
   15262:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15267:	e9 bf 00 00 00       	jmp    1532b <tty_open+0xf7>
	}

	tty_t * tty = tty_devs + idx;
   1526c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1526f:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15275:	05 e0 65 03 00       	add    $0x365e0,%eax
   1527a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   1527d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15280:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15283:	81 c2 00 02 00 00    	add    $0x200,%edx
   15289:	83 ec 04             	sub    $0x4,%esp
   1528c:	68 00 02 00 00       	push   $0x200
   15291:	50                   	push   %eax
   15292:	52                   	push   %edx
   15293:	e8 0d fe ff ff       	call   150a5 <tty_fifo_init>
   15298:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->osem, TTY_OBUF_SIZE);
   1529b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1529e:	05 14 02 00 00       	add    $0x214,%eax
   152a3:	83 ec 08             	sub    $0x8,%esp
   152a6:	68 00 02 00 00       	push   $0x200
   152ab:	50                   	push   %eax
   152ac:	e8 e5 2a 00 00       	call   17d96 <sem_init>
   152b1:	83 c4 10             	add    $0x10,%esp
	tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   152b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152b7:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   152bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152c0:	05 24 04 00 00       	add    $0x424,%eax
   152c5:	83 ec 04             	sub    $0x4,%esp
   152c8:	68 00 02 00 00       	push   $0x200
   152cd:	52                   	push   %edx
   152ce:	50                   	push   %eax
   152cf:	e8 d1 fd ff ff       	call   150a5 <tty_fifo_init>
   152d4:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->isem, 0);
   152d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152da:	05 38 04 00 00       	add    $0x438,%eax
   152df:	83 ec 08             	sub    $0x8,%esp
   152e2:	6a 00                	push   $0x0
   152e4:	50                   	push   %eax
   152e5:	e8 ac 2a 00 00       	call   17d96 <sem_init>
   152ea:	83 c4 10             	add    $0x10,%esp

	tty->iflags = TTY_INLCR | TTY_IECHO;
   152ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152f0:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   152f7:	00 00 00 
	tty->oflags = TTY_OCRLF;
   152fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152fd:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   15304:	00 00 00 

	tty->console_idx = idx;
   15307:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1530a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1530d:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

	kbd_init();
   15313:	e8 8e fc ff ff       	call   14fa6 <kbd_init>
	console_init(idx);
   15318:	83 ec 0c             	sub    $0xc,%esp
   1531b:	ff 75 f4             	pushl  -0xc(%ebp)
   1531e:	e8 4e e4 ff ff       	call   13771 <console_init>
   15323:	83 c4 10             	add    $0x10,%esp
	return 0;
   15326:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1532b:	c9                   	leave  
   1532c:	c3                   	ret    

0001532d <tty_write>:


/**
 * @brief 向tty写入数据
 */
int tty_write (device_t * dev, int addr, char * buf, int size) {
   1532d:	55                   	push   %ebp
   1532e:	89 e5                	mov    %esp,%ebp
   15330:	83 ec 28             	sub    $0x28,%esp
	if (size < 0) {
   15333:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15337:	79 0a                	jns    15343 <tty_write+0x16>
		return -1;
   15339:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1533e:	e9 d5 00 00 00       	jmp    15418 <tty_write+0xeb>
	}

	tty_t * tty = get_tty(dev);
   15343:	83 ec 0c             	sub    $0xc,%esp
   15346:	ff 75 08             	pushl  0x8(%ebp)
   15349:	e8 97 fe ff ff       	call   151e5 <get_tty>
   1534e:	83 c4 10             	add    $0x10,%esp
   15351:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int len = 0;
   15354:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// 先将所有数据写入缓存中
	while (size) {
   1535b:	e9 a5 00 00 00       	jmp    15405 <tty_write+0xd8>
		char c = *buf++;
   15360:	8b 45 10             	mov    0x10(%ebp),%eax
   15363:	8d 50 01             	lea    0x1(%eax),%edx
   15366:	89 55 10             	mov    %edx,0x10(%ebp)
   15369:	0f b6 00             	movzbl (%eax),%eax
   1536c:	88 45 ef             	mov    %al,-0x11(%ebp)

		// 如果遇到\n，根据配置决定是否转换成\r\n
		if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   1536f:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15373:	75 43                	jne    153b8 <tty_write+0x8b>
   15375:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15378:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   1537e:	83 e0 01             	and    $0x1,%eax
   15381:	85 c0                	test   %eax,%eax
   15383:	74 33                	je     153b8 <tty_write+0x8b>
			sem_wait(&tty->osem);
   15385:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15388:	05 14 02 00 00       	add    $0x214,%eax
   1538d:	83 ec 0c             	sub    $0xc,%esp
   15390:	50                   	push   %eax
   15391:	e8 23 2a 00 00       	call   17db9 <sem_wait>
   15396:	83 c4 10             	add    $0x10,%esp
			int err = tty_fifo_put(&tty->ofifo, '\r');
   15399:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1539c:	05 00 02 00 00       	add    $0x200,%eax
   153a1:	83 ec 08             	sub    $0x8,%esp
   153a4:	6a 0d                	push   $0xd
   153a6:	50                   	push   %eax
   153a7:	e8 af fd ff ff       	call   1515b <tty_fifo_put>
   153ac:	83 c4 10             	add    $0x10,%esp
   153af:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (err < 0) {
   153b2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   153b6:	78 59                	js     15411 <tty_write+0xe4>
				break;
			}
		}

		// 写入当前字符
		sem_wait(&tty->osem);
   153b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153bb:	05 14 02 00 00       	add    $0x214,%eax
   153c0:	83 ec 0c             	sub    $0xc,%esp
   153c3:	50                   	push   %eax
   153c4:	e8 f0 29 00 00       	call   17db9 <sem_wait>
   153c9:	83 c4 10             	add    $0x10,%esp
		int err = tty_fifo_put(&tty->ofifo, c);
   153cc:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   153d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   153d3:	81 c2 00 02 00 00    	add    $0x200,%edx
   153d9:	83 ec 08             	sub    $0x8,%esp
   153dc:	50                   	push   %eax
   153dd:	52                   	push   %edx
   153de:	e8 78 fd ff ff       	call   1515b <tty_fifo_put>
   153e3:	83 c4 10             	add    $0x10,%esp
   153e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (err < 0) {
   153e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   153ed:	78 25                	js     15414 <tty_write+0xe7>
			break;
		}

		len++;
   153ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		size--;
   153f3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

		// 启动输出, 这里是直接由console直接输出，无需中断
		console_write(tty);
   153f7:	83 ec 0c             	sub    $0xc,%esp
   153fa:	ff 75 f0             	pushl  -0x10(%ebp)
   153fd:	e8 7a e8 ff ff       	call   13c7c <console_write>
   15402:	83 c4 10             	add    $0x10,%esp
	while (size) {
   15405:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15409:	0f 85 51 ff ff ff    	jne    15360 <tty_write+0x33>
   1540f:	eb 04                	jmp    15415 <tty_write+0xe8>
				break;
   15411:	90                   	nop
   15412:	eb 01                	jmp    15415 <tty_write+0xe8>
			break;
   15414:	90                   	nop
	}

	return len;
   15415:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   15418:	c9                   	leave  
   15419:	c3                   	ret    

0001541a <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read (device_t * dev, int addr, char * buf, int size) {
   1541a:	55                   	push   %ebp
   1541b:	89 e5                	mov    %esp,%ebp
   1541d:	83 ec 18             	sub    $0x18,%esp
	if (size < 0) {
   15420:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15424:	79 0a                	jns    15430 <tty_read+0x16>
		return -1;
   15426:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1542b:	e9 09 01 00 00       	jmp    15539 <tty_read+0x11f>
	}

	tty_t * tty = get_tty(dev);
   15430:	83 ec 0c             	sub    $0xc,%esp
   15433:	ff 75 08             	pushl  0x8(%ebp)
   15436:	e8 aa fd ff ff       	call   151e5 <get_tty>
   1543b:	83 c4 10             	add    $0x10,%esp
   1543e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char * pbuf = buf;
   15441:	8b 45 10             	mov    0x10(%ebp),%eax
   15444:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
   15447:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	// 不断读取，直到遇到文件结束符或者行结束符
	while (len < size) {
   1544e:	e9 d7 00 00 00       	jmp    1552a <tty_read+0x110>
		// 等待可用的数据
		sem_wait(&tty->isem);
   15453:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15456:	05 38 04 00 00       	add    $0x438,%eax
   1545b:	83 ec 0c             	sub    $0xc,%esp
   1545e:	50                   	push   %eax
   1545f:	e8 55 29 00 00       	call   17db9 <sem_wait>
   15464:	83 c4 10             	add    $0x10,%esp

		// 取出数据
		char ch;
		tty_fifo_get(&tty->ififo, &ch);
   15467:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1546a:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   15470:	83 ec 08             	sub    $0x8,%esp
   15473:	8d 45 eb             	lea    -0x15(%ebp),%eax
   15476:	50                   	push   %eax
   15477:	52                   	push   %edx
   15478:	e8 5f fc ff ff       	call   150dc <tty_fifo_get>
   1547d:	83 c4 10             	add    $0x10,%esp
		switch (ch) {
   15480:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15484:	0f be c0             	movsbl %al,%eax
   15487:	83 f8 0a             	cmp    $0xa,%eax
   1548a:	74 1a                	je     154a6 <tty_read+0x8c>
   1548c:	83 f8 7f             	cmp    $0x7f,%eax
   1548f:	75 52                	jne    154e3 <tty_read+0xc9>
			case ASCII_DEL:
				if (len == 0) {
   15491:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15495:	75 05                	jne    1549c <tty_read+0x82>
   15497:	e9 8e 00 00 00       	jmp    1552a <tty_read+0x110>
					continue;
				}
				len--;
   1549c:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
				pbuf--;
   154a0:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
				break;
   154a4:	eb 51                	jmp    154f7 <tty_read+0xdd>
			case '\n':
				if ((tty->iflags & TTY_INLCR) && (len < size - 1)) {	// \n变成\r\n
   154a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   154a9:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   154af:	83 e0 01             	and    $0x1,%eax
   154b2:	85 c0                	test   %eax,%eax
   154b4:	74 1b                	je     154d1 <tty_read+0xb7>
   154b6:	8b 45 14             	mov    0x14(%ebp),%eax
   154b9:	83 e8 01             	sub    $0x1,%eax
   154bc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   154bf:	7d 10                	jge    154d1 <tty_read+0xb7>
					*pbuf++ = '\r';
   154c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154c4:	8d 50 01             	lea    0x1(%eax),%edx
   154c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   154ca:	c6 00 0d             	movb   $0xd,(%eax)
					len++;
   154cd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				}
				*pbuf++ = '\n';
   154d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154d4:	8d 50 01             	lea    0x1(%eax),%edx
   154d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
   154da:	c6 00 0a             	movb   $0xa,(%eax)
				len++;
   154dd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   154e1:	eb 14                	jmp    154f7 <tty_read+0xdd>
			default:
				*pbuf++ = ch;
   154e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154e6:	8d 50 01             	lea    0x1(%eax),%edx
   154e9:	89 55 f4             	mov    %edx,-0xc(%ebp)
   154ec:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   154f0:	88 10                	mov    %dl,(%eax)
				len++;
   154f2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   154f6:	90                   	nop
		}

		if (tty->iflags & TTY_IECHO) {
   154f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   154fa:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15500:	83 e0 04             	and    $0x4,%eax
   15503:	85 c0                	test   %eax,%eax
   15505:	74 13                	je     1551a <tty_read+0x100>
		    tty_write(dev, 0, &ch, 1);
   15507:	6a 01                	push   $0x1
   15509:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1550c:	50                   	push   %eax
   1550d:	6a 00                	push   $0x0
   1550f:	ff 75 08             	pushl  0x8(%ebp)
   15512:	e8 16 fe ff ff       	call   1532d <tty_write>
   15517:	83 c4 10             	add    $0x10,%esp
		}

		// 遇到一行结束，也直接跳出
		if ((ch == '\r') || (ch == '\n')) {
   1551a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1551e:	3c 0d                	cmp    $0xd,%al
   15520:	74 14                	je     15536 <tty_read+0x11c>
   15522:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15526:	3c 0a                	cmp    $0xa,%al
   15528:	74 0c                	je     15536 <tty_read+0x11c>
	while (len < size) {
   1552a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1552d:	3b 45 14             	cmp    0x14(%ebp),%eax
   15530:	0f 8c 1d ff ff ff    	jl     15453 <tty_read+0x39>
			break;
		}
	}

	return len;
   15536:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   15539:	c9                   	leave  
   1553a:	c3                   	ret    

0001553b <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control (device_t * dev, int cmd, int arg0, int arg1) {
   1553b:	55                   	push   %ebp
   1553c:	89 e5                	mov    %esp,%ebp
   1553e:	83 ec 18             	sub    $0x18,%esp
	tty_t * tty = get_tty(dev);
   15541:	83 ec 0c             	sub    $0xc,%esp
   15544:	ff 75 08             	pushl  0x8(%ebp)
   15547:	e8 99 fc ff ff       	call   151e5 <get_tty>
   1554c:	83 c4 10             	add    $0x10,%esp
   1554f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	switch (cmd) {
   15552:	8b 45 0c             	mov    0xc(%ebp),%eax
   15555:	83 f8 01             	cmp    $0x1,%eax
   15558:	74 02                	je     1555c <tty_control+0x21>
		} else {
			tty->iflags &= ~TTY_IECHO;
		}
		break;
	default:
		break;
   1555a:	eb 37                	jmp    15593 <tty_control+0x58>
		if (arg0) {
   1555c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15560:	74 19                	je     1557b <tty_control+0x40>
			tty->iflags |= TTY_IECHO;
   15562:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15565:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   1556b:	83 c8 04             	or     $0x4,%eax
   1556e:	89 c2                	mov    %eax,%edx
   15570:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15573:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
		break;
   15579:	eb 17                	jmp    15592 <tty_control+0x57>
			tty->iflags &= ~TTY_IECHO;
   1557b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1557e:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15584:	83 e0 fb             	and    $0xfffffffb,%eax
   15587:	89 c2                	mov    %eax,%edx
   15589:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1558c:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
		break;
   15592:	90                   	nop
	}
}
   15593:	90                   	nop
   15594:	c9                   	leave  
   15595:	c3                   	ret    

00015596 <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close (device_t * dev) {
   15596:	55                   	push   %ebp
   15597:	89 e5                	mov    %esp,%ebp

}
   15599:	90                   	nop
   1559a:	5d                   	pop    %ebp
   1559b:	c3                   	ret    

0001559c <tty_in>:

/**
 * @brief 输入tty字符
 */
void                            tty_in (char ch) {
   1559c:	55                   	push   %ebp
   1559d:	89 e5                	mov    %esp,%ebp
   1559f:	83 ec 28             	sub    $0x28,%esp
   155a2:	8b 45 08             	mov    0x8(%ebp),%eax
   155a5:	88 45 e4             	mov    %al,-0x1c(%ebp)
	tty_t * tty = tty_devs + curr_tty;
   155a8:	a1 80 88 03 00       	mov    0x38880,%eax
   155ad:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   155b3:	05 e0 65 03 00       	add    $0x365e0,%eax
   155b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 辅助队列要有空闲空间可代写入
	if (sem_count(&tty->isem) >= TTY_IBUF_SIZE) {
   155bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155be:	05 38 04 00 00       	add    $0x438,%eax
   155c3:	83 ec 0c             	sub    $0xc,%esp
   155c6:	50                   	push   %eax
   155c7:	e8 df 28 00 00       	call   17eab <sem_count>
   155cc:	83 c4 10             	add    $0x10,%esp
   155cf:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   155d4:	7f 30                	jg     15606 <tty_in+0x6a>
		return;
	}

	// 写入辅助队列，通知数据到达
	tty_fifo_put(&tty->ififo, ch);
   155d6:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   155da:	8b 55 f4             	mov    -0xc(%ebp),%edx
   155dd:	81 c2 24 04 00 00    	add    $0x424,%edx
   155e3:	83 ec 08             	sub    $0x8,%esp
   155e6:	50                   	push   %eax
   155e7:	52                   	push   %edx
   155e8:	e8 6e fb ff ff       	call   1515b <tty_fifo_put>
   155ed:	83 c4 10             	add    $0x10,%esp
	sem_notify(&tty->isem);
   155f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155f3:	05 38 04 00 00       	add    $0x438,%eax
   155f8:	83 ec 0c             	sub    $0xc,%esp
   155fb:	50                   	push   %eax
   155fc:	e8 26 28 00 00       	call   17e27 <sem_notify>
   15601:	83 c4 10             	add    $0x10,%esp
   15604:	eb 01                	jmp    15607 <tty_in+0x6b>
		return;
   15606:	90                   	nop
}
   15607:	c9                   	leave  
   15608:	c3                   	ret    

00015609 <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select (int tty) {
   15609:	55                   	push   %ebp
   1560a:	89 e5                	mov    %esp,%ebp
   1560c:	83 ec 08             	sub    $0x8,%esp
	if (tty != curr_tty) {
   1560f:	a1 80 88 03 00       	mov    0x38880,%eax
   15614:	39 45 08             	cmp    %eax,0x8(%ebp)
   15617:	74 16                	je     1562f <tty_select+0x26>
		console_select(tty);
   15619:	83 ec 0c             	sub    $0xc,%esp
   1561c:	ff 75 08             	pushl  0x8(%ebp)
   1561f:	e8 87 dc ff ff       	call   132ab <console_select>
   15624:	83 c4 10             	add    $0x10,%esp
		curr_tty = tty;
   15627:	8b 45 08             	mov    0x8(%ebp),%eax
   1562a:	a3 80 88 03 00       	mov    %eax,0x38880
	}
}
   1562f:	90                   	nop
   15630:	c9                   	leave  
   15631:	c3                   	ret    

00015632 <devfs_mount>:
};
/**
 * @brief 挂载指定设备
 * 设备文件系统，不需要考虑major和minor
 */
int devfs_mount (struct _fs_t * fs, int major, int minor) {
   15632:	55                   	push   %ebp
   15633:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   15635:	8b 45 08             	mov    0x8(%ebp),%eax
   15638:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   1563f:	00 00 00 
    return 0;
   15642:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15647:	5d                   	pop    %ebp
   15648:	c3                   	ret    

00015649 <devfs_unmount>:

/**
 * @brief 卸载指定的设备
 * @param fs 
 */
void devfs_unmount (struct _fs_t * fs) {
   15649:	55                   	push   %ebp
   1564a:	89 e5                	mov    %esp,%ebp
}
   1564c:	90                   	nop
   1564d:	5d                   	pop    %ebp
   1564e:	c3                   	ret    

0001564f <devfs_open>:

/**
 * @brief 打开指定的设备以进行读写
 */
int devfs_open (struct _fs_t * fs, const char * path, file_t * file) {   
   1564f:	55                   	push   %ebp
   15650:	89 e5                	mov    %esp,%ebp
   15652:	83 ec 28             	sub    $0x28,%esp
    // 遍历所有支持的设备类型列表，根据path中的路径，找到相应的设备类型
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15655:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1565c:	e9 04 01 00 00       	jmp    15765 <devfs_open+0x116>
        devfs_type_t * type = devfs_type_list + i;
   15661:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15664:	89 d0                	mov    %edx,%eax
   15666:	01 c0                	add    %eax,%eax
   15668:	01 d0                	add    %edx,%eax
   1566a:	c1 e0 02             	shl    $0x2,%eax
   1566d:	05 e0 a0 01 00       	add    $0x1a0e0,%eax
   15672:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 查找相同的名称，然后从中提取后续部分，转换成字符串
        int type_name_len = kernel_strlen(type->name);
   15675:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15678:	8b 00                	mov    (%eax),%eax
   1567a:	83 ec 0c             	sub    $0xc,%esp
   1567d:	50                   	push   %eax
   1567e:	e8 c7 2b 00 00       	call   1824a <kernel_strlen>
   15683:	83 c4 10             	add    $0x10,%esp
   15686:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 如果存在挂载点路径，则跳过该路径，取下级子目录
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   15689:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1568c:	8b 00                	mov    (%eax),%eax
   1568e:	83 ec 04             	sub    $0x4,%esp
   15691:	ff 75 ec             	pushl  -0x14(%ebp)
   15694:	50                   	push   %eax
   15695:	ff 75 0c             	pushl  0xc(%ebp)
   15698:	e8 e8 2b 00 00       	call   18285 <kernel_strncmp>
   1569d:	83 c4 10             	add    $0x10,%esp
   156a0:	85 c0                	test   %eax,%eax
   156a2:	0f 85 b9 00 00 00    	jne    15761 <devfs_open+0x112>
            int minor;

            // 转换得到设备子序号
            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0) {
   156a8:	83 ec 0c             	sub    $0xc,%esp
   156ab:	ff 75 0c             	pushl  0xc(%ebp)
   156ae:	e8 97 2b 00 00       	call   1824a <kernel_strlen>
   156b3:	83 c4 10             	add    $0x10,%esp
   156b6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   156b9:	7d 34                	jge    156ef <devfs_open+0xa0>
   156bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
   156be:	8b 45 0c             	mov    0xc(%ebp),%eax
   156c1:	01 c2                	add    %eax,%edx
   156c3:	83 ec 08             	sub    $0x8,%esp
   156c6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   156c9:	50                   	push   %eax
   156ca:	52                   	push   %edx
   156cb:	e8 f1 1a 00 00       	call   171c1 <path_to_num>
   156d0:	83 c4 10             	add    $0x10,%esp
   156d3:	85 c0                	test   %eax,%eax
   156d5:	79 18                	jns    156ef <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   156d7:	83 ec 08             	sub    $0x8,%esp
   156da:	ff 75 0c             	pushl  0xc(%ebp)
   156dd:	68 c0 99 01 00       	push   $0x199c0
   156e2:	e8 15 32 00 00       	call   188fc <log_printf>
   156e7:	83 c4 10             	add    $0x10,%esp
                break;
   156ea:	e9 80 00 00 00       	jmp    1576f <devfs_open+0x120>
            }

            // 打开设备
            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   156ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   156f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156f5:	8b 40 04             	mov    0x4(%eax),%eax
   156f8:	83 ec 04             	sub    $0x4,%esp
   156fb:	6a 00                	push   $0x0
   156fd:	52                   	push   %edx
   156fe:	50                   	push   %eax
   156ff:	e8 b3 e6 ff ff       	call   13db7 <dev_open>
   15704:	83 c4 10             	add    $0x10,%esp
   15707:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   1570a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1570e:	79 16                	jns    15726 <devfs_open+0xd7>
                log_printf("Open device failed:%s", path);
   15710:	83 ec 08             	sub    $0x8,%esp
   15713:	ff 75 0c             	pushl  0xc(%ebp)
   15716:	68 da 99 01 00       	push   $0x199da
   1571b:	e8 dc 31 00 00       	call   188fc <log_printf>
   15720:	83 c4 10             	add    $0x10,%esp
                break;
   15723:	90                   	nop
   15724:	eb 49                	jmp    1576f <devfs_open+0x120>
            }

            // 纪录所在的设备号
            file->dev_id = dev_id;
   15726:	8b 45 10             	mov    0x10(%ebp),%eax
   15729:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1572c:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   1572f:	8b 45 10             	mov    0x10(%ebp),%eax
   15732:	8b 55 08             	mov    0x8(%ebp),%edx
   15735:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   15738:	8b 45 10             	mov    0x10(%ebp),%eax
   1573b:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   15742:	8b 45 10             	mov    0x10(%ebp),%eax
   15745:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   1574c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1574f:	8b 40 08             	mov    0x8(%eax),%eax
   15752:	89 c2                	mov    %eax,%edx
   15754:	8b 45 10             	mov    0x10(%ebp),%eax
   15757:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   1575a:	b8 00 00 00 00       	mov    $0x0,%eax
   1575f:	eb 13                	jmp    15774 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15761:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15765:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15769:	0f 84 f2 fe ff ff    	je     15661 <devfs_open+0x12>
        }
    }

    return -1;
   1576f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15774:	c9                   	leave  
   15775:	c3                   	ret    

00015776 <devfs_read>:

/**
 * @brief 读写指定的文件系统
 */
int devfs_read (char * buf, int size, file_t * file) {
   15776:	55                   	push   %ebp
   15777:	89 e5                	mov    %esp,%ebp
   15779:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   1577c:	8b 45 10             	mov    0x10(%ebp),%eax
   1577f:	8b 50 30             	mov    0x30(%eax),%edx
   15782:	8b 45 10             	mov    0x10(%ebp),%eax
   15785:	8b 40 2c             	mov    0x2c(%eax),%eax
   15788:	ff 75 0c             	pushl  0xc(%ebp)
   1578b:	ff 75 08             	pushl  0x8(%ebp)
   1578e:	52                   	push   %edx
   1578f:	50                   	push   %eax
   15790:	e8 6e e7 ff ff       	call   13f03 <dev_read>
   15795:	83 c4 10             	add    $0x10,%esp
}
   15798:	c9                   	leave  
   15799:	c3                   	ret    

0001579a <devfs_write>:

/**
 * @brief 写设备文件系统
 */
int devfs_write (char * buf, int size, file_t * file) {
   1579a:	55                   	push   %ebp
   1579b:	89 e5                	mov    %esp,%ebp
   1579d:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   157a0:	8b 45 10             	mov    0x10(%ebp),%eax
   157a3:	8b 50 30             	mov    0x30(%eax),%edx
   157a6:	8b 45 10             	mov    0x10(%ebp),%eax
   157a9:	8b 40 2c             	mov    0x2c(%eax),%eax
   157ac:	ff 75 0c             	pushl  0xc(%ebp)
   157af:	ff 75 08             	pushl  0x8(%ebp)
   157b2:	52                   	push   %edx
   157b3:	50                   	push   %eax
   157b4:	e8 96 e7 ff ff       	call   13f4f <dev_write>
   157b9:	83 c4 10             	add    $0x10,%esp
}
   157bc:	c9                   	leave  
   157bd:	c3                   	ret    

000157be <devfs_close>:

/**
 * @brief 关闭设备文件
 */
void devfs_close (file_t * file) {
   157be:	55                   	push   %ebp
   157bf:	89 e5                	mov    %esp,%ebp
   157c1:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   157c4:	8b 45 08             	mov    0x8(%ebp),%eax
   157c7:	8b 40 2c             	mov    0x2c(%eax),%eax
   157ca:	83 ec 0c             	sub    $0xc,%esp
   157cd:	50                   	push   %eax
   157ce:	e8 14 e8 ff ff       	call   13fe7 <dev_close>
   157d3:	83 c4 10             	add    $0x10,%esp
}
   157d6:	90                   	nop
   157d7:	c9                   	leave  
   157d8:	c3                   	ret    

000157d9 <devfs_seek>:

/**
 * @brief 文件读写定位
 */
int devfs_seek (file_t * file, uint32_t offset, int dir) {
   157d9:	55                   	push   %ebp
   157da:	89 e5                	mov    %esp,%ebp
    return -1;  // 不支持定位
   157dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   157e1:	5d                   	pop    %ebp
   157e2:	c3                   	ret    

000157e3 <devfs_stat>:

/**
 * @brief 获取文件信息
 */
int devfs_stat(file_t * file, struct stat *st) {
   157e3:	55                   	push   %ebp
   157e4:	89 e5                	mov    %esp,%ebp
    return -1;
   157e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   157eb:	5d                   	pop    %ebp
   157ec:	c3                   	ret    

000157ed <devfs_ioctl>:

/**
 * @brief IO设备控制
 */
int devfs_ioctl(file_t * file, int cmd, int arg0, int arg1) {
   157ed:	55                   	push   %ebp
   157ee:	89 e5                	mov    %esp,%ebp
   157f0:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   157f3:	8b 45 08             	mov    0x8(%ebp),%eax
   157f6:	8b 40 2c             	mov    0x2c(%eax),%eax
   157f9:	ff 75 14             	pushl  0x14(%ebp)
   157fc:	ff 75 10             	pushl  0x10(%ebp)
   157ff:	ff 75 0c             	pushl  0xc(%ebp)
   15802:	50                   	push   %eax
   15803:	e8 93 e7 ff ff       	call   13f9b <dev_control>
   15808:	83 c4 10             	add    $0x10,%esp
}
   1580b:	c9                   	leave  
   1580c:	c3                   	ret    

0001580d <up2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   1580d:	55                   	push   %ebp
   1580e:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   15810:	8b 55 08             	mov    0x8(%ebp),%edx
   15813:	8b 45 0c             	mov    0xc(%ebp),%eax
   15816:	01 d0                	add    %edx,%eax
   15818:	8d 50 ff             	lea    -0x1(%eax),%edx
   1581b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1581e:	f7 d8                	neg    %eax
   15820:	21 d0                	and    %edx,%eax
}
   15822:	5d                   	pop    %ebp
   15823:	c3                   	ret    

00015824 <bread_sector>:
#include <sys/fcntl.h>

/**
 * @brief 缓存读取磁盘数据，用于目录的遍历等
 */
static int bread_sector (fat_t * fat, int sector) {
   15824:	55                   	push   %ebp
   15825:	89 e5                	mov    %esp,%ebp
   15827:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector) {
   1582a:	8b 45 08             	mov    0x8(%ebp),%eax
   1582d:	8b 40 28             	mov    0x28(%eax),%eax
   15830:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15833:	75 07                	jne    1583c <bread_sector+0x18>
        return 0;
   15835:	b8 00 00 00 00       	mov    $0x0,%eax
   1583a:	eb 3f                	jmp    1587b <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   1583c:	8b 45 08             	mov    0x8(%ebp),%eax
   1583f:	8b 50 24             	mov    0x24(%eax),%edx
   15842:	8b 45 08             	mov    0x8(%ebp),%eax
   15845:	8b 40 2c             	mov    0x2c(%eax),%eax
   15848:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1584e:	6a 01                	push   $0x1
   15850:	52                   	push   %edx
   15851:	ff 75 0c             	pushl  0xc(%ebp)
   15854:	50                   	push   %eax
   15855:	e8 a9 e6 ff ff       	call   13f03 <dev_read>
   1585a:	83 c4 10             	add    $0x10,%esp
   1585d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15860:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15864:	75 10                	jne    15876 <bread_sector+0x52>
        fat->curr_sector = sector;
   15866:	8b 45 08             	mov    0x8(%ebp),%eax
   15869:	8b 55 0c             	mov    0xc(%ebp),%edx
   1586c:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   1586f:	b8 00 00 00 00       	mov    $0x0,%eax
   15874:	eb 05                	jmp    1587b <bread_sector+0x57>
    }
    return -1;
   15876:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1587b:	c9                   	leave  
   1587c:	c3                   	ret    

0001587d <bwrite_secotr>:

/**
 * @brief 写缓存
 */
static int bwrite_secotr (fat_t * fat, int sector) {
   1587d:	55                   	push   %ebp
   1587e:	89 e5                	mov    %esp,%ebp
   15880:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15883:	8b 45 08             	mov    0x8(%ebp),%eax
   15886:	8b 50 24             	mov    0x24(%eax),%edx
   15889:	8b 45 08             	mov    0x8(%ebp),%eax
   1588c:	8b 40 2c             	mov    0x2c(%eax),%eax
   1588f:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15895:	6a 01                	push   $0x1
   15897:	52                   	push   %edx
   15898:	ff 75 0c             	pushl  0xc(%ebp)
   1589b:	50                   	push   %eax
   1589c:	e8 ae e6 ff ff       	call   13f4f <dev_write>
   158a1:	83 c4 10             	add    $0x10,%esp
   158a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return (cnt == 1) ? 0 : -1;
   158a7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   158ab:	75 07                	jne    158b4 <bwrite_secotr+0x37>
   158ad:	b8 00 00 00 00       	mov    $0x0,%eax
   158b2:	eb 05                	jmp    158b9 <bwrite_secotr+0x3c>
   158b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   158b9:	c9                   	leave  
   158ba:	c3                   	ret    

000158bb <cluster_is_valid>:

/**
 * 检查指定簇是否可用，非占用或坏簇
 */
int cluster_is_valid (cluster_t cluster) {
   158bb:	55                   	push   %ebp
   158bc:	89 e5                	mov    %esp,%ebp
   158be:	83 ec 04             	sub    $0x4,%esp
   158c1:	8b 45 08             	mov    0x8(%ebp),%eax
   158c4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < 0xFFF8) && (cluster >= 0x2);     // 值是否正确
   158c8:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   158cd:	77 0e                	ja     158dd <cluster_is_valid+0x22>
   158cf:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   158d4:	76 07                	jbe    158dd <cluster_is_valid+0x22>
   158d6:	b8 01 00 00 00       	mov    $0x1,%eax
   158db:	eb 05                	jmp    158e2 <cluster_is_valid+0x27>
   158dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   158e2:	c9                   	leave  
   158e3:	c3                   	ret    

000158e4 <cluster_get_next>:

/**
 * 获取指定簇的下一个簇
 */
int cluster_get_next (fat_t * fat, cluster_t curr) {
   158e4:	55                   	push   %ebp
   158e5:	89 e5                	mov    %esp,%ebp
   158e7:	83 ec 28             	sub    $0x28,%esp
   158ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   158ed:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr)) {
   158f1:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   158f5:	50                   	push   %eax
   158f6:	e8 c0 ff ff ff       	call   158bb <cluster_is_valid>
   158fb:	83 c4 04             	add    $0x4,%esp
   158fe:	85 c0                	test   %eax,%eax
   15900:	75 0a                	jne    1590c <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15902:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15907:	e9 94 00 00 00       	jmp    159a0 <cluster_get_next+0xbc>
    }

    // 取fat表中的扇区号和在扇区中的偏移
    int offset = curr * sizeof(cluster_t);
   1590c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15910:	01 c0                	add    %eax,%eax
   15912:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15915:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15918:	8b 55 08             	mov    0x8(%ebp),%edx
   1591b:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1591e:	ba 00 00 00 00       	mov    $0x0,%edx
   15923:	f7 f1                	div    %ecx
   15925:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15928:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1592b:	8b 55 08             	mov    0x8(%ebp),%edx
   1592e:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15931:	ba 00 00 00 00       	mov    $0x0,%edx
   15936:	f7 f1                	div    %ecx
   15938:	89 d0                	mov    %edx,%eax
   1593a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (sector >= fat->tbl_sectors) {
   1593d:	8b 45 08             	mov    0x8(%ebp),%eax
   15940:	8b 50 08             	mov    0x8(%eax),%edx
   15943:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15946:	39 c2                	cmp    %eax,%edx
   15948:	77 1c                	ja     15966 <cluster_get_next+0x82>
        log_printf("cluster too big. %d", curr);
   1594a:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   1594e:	83 ec 08             	sub    $0x8,%esp
   15951:	50                   	push   %eax
   15952:	68 f0 99 01 00       	push   $0x199f0
   15957:	e8 a0 2f 00 00       	call   188fc <log_printf>
   1595c:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   1595f:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15964:	eb 3a                	jmp    159a0 <cluster_get_next+0xbc>
    }

    // 读扇区，然后取其中簇数据
    int err = bread_sector(fat, fat->tbl_start + sector);
   15966:	8b 45 08             	mov    0x8(%ebp),%eax
   15969:	8b 10                	mov    (%eax),%edx
   1596b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1596e:	01 d0                	add    %edx,%eax
   15970:	83 ec 08             	sub    $0x8,%esp
   15973:	50                   	push   %eax
   15974:	ff 75 08             	pushl  0x8(%ebp)
   15977:	e8 a8 fe ff ff       	call   15824 <bread_sector>
   1597c:	83 c4 10             	add    $0x10,%esp
   1597f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15982:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15986:	79 07                	jns    1598f <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15988:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   1598d:	eb 11                	jmp    159a0 <cluster_get_next+0xbc>
    }

    return *(cluster_t*)(fat->fat_buffer + off_sector);
   1598f:	8b 45 08             	mov    0x8(%ebp),%eax
   15992:	8b 50 24             	mov    0x24(%eax),%edx
   15995:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15998:	01 d0                	add    %edx,%eax
   1599a:	0f b7 00             	movzwl (%eax),%eax
   1599d:	0f b7 c0             	movzwl %ax,%eax
}
   159a0:	c9                   	leave  
   159a1:	c3                   	ret    

000159a2 <cluster_set_next>:

/**
 * @brief 设置簇的下一簇
 */
int cluster_set_next (fat_t * fat, cluster_t curr, cluster_t next) {
   159a2:	55                   	push   %ebp
   159a3:	89 e5                	mov    %esp,%ebp
   159a5:	83 ec 38             	sub    $0x38,%esp
   159a8:	8b 55 0c             	mov    0xc(%ebp),%edx
   159ab:	8b 45 10             	mov    0x10(%ebp),%eax
   159ae:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   159b2:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr)) {
   159b6:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   159ba:	50                   	push   %eax
   159bb:	e8 fb fe ff ff       	call   158bb <cluster_is_valid>
   159c0:	83 c4 04             	add    $0x4,%esp
   159c3:	85 c0                	test   %eax,%eax
   159c5:	75 0a                	jne    159d1 <cluster_set_next+0x2f>
        return -1;
   159c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   159cc:	e9 fe 00 00 00       	jmp    15acf <cluster_set_next+0x12d>
    }

    int offset = curr * sizeof(cluster_t);
   159d1:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   159d5:	01 c0                	add    %eax,%eax
   159d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sec;
   159da:	8b 45 ec             	mov    -0x14(%ebp),%eax
   159dd:	8b 55 08             	mov    0x8(%ebp),%edx
   159e0:	8b 4a 0c             	mov    0xc(%edx),%ecx
   159e3:	ba 00 00 00 00       	mov    $0x0,%edx
   159e8:	f7 f1                	div    %ecx
   159ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   159ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
   159f0:	8b 55 08             	mov    0x8(%ebp),%edx
   159f3:	8b 4a 0c             	mov    0xc(%edx),%ecx
   159f6:	ba 00 00 00 00       	mov    $0x0,%edx
   159fb:	f7 f1                	div    %ecx
   159fd:	89 d0                	mov    %edx,%eax
   159ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sector >= fat->tbl_sectors) {
   15a02:	8b 45 08             	mov    0x8(%ebp),%eax
   15a05:	8b 50 08             	mov    0x8(%eax),%edx
   15a08:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a0b:	39 c2                	cmp    %eax,%edx
   15a0d:	77 1f                	ja     15a2e <cluster_set_next+0x8c>
        log_printf("cluster too big. %d", curr);
   15a0f:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15a13:	83 ec 08             	sub    $0x8,%esp
   15a16:	50                   	push   %eax
   15a17:	68 f0 99 01 00       	push   $0x199f0
   15a1c:	e8 db 2e 00 00       	call   188fc <log_printf>
   15a21:	83 c4 10             	add    $0x10,%esp
        return -1;
   15a24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15a29:	e9 a1 00 00 00       	jmp    15acf <cluster_set_next+0x12d>
    }

    // 读缓存
    int err = bread_sector(fat, fat->tbl_start + sector);
   15a2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15a31:	8b 10                	mov    (%eax),%edx
   15a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a36:	01 d0                	add    %edx,%eax
   15a38:	83 ec 08             	sub    $0x8,%esp
   15a3b:	50                   	push   %eax
   15a3c:	ff 75 08             	pushl  0x8(%ebp)
   15a3f:	e8 e0 fd ff ff       	call   15824 <bread_sector>
   15a44:	83 c4 10             	add    $0x10,%esp
   15a47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15a4a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15a4e:	79 07                	jns    15a57 <cluster_set_next+0xb5>
        return -1;
   15a50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15a55:	eb 78                	jmp    15acf <cluster_set_next+0x12d>
    }

    // 改next
    *(cluster_t*)(fat->fat_buffer + off_sector) = next;
   15a57:	8b 45 08             	mov    0x8(%ebp),%eax
   15a5a:	8b 50 24             	mov    0x24(%eax),%edx
   15a5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15a60:	01 c2                	add    %eax,%edx
   15a62:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15a66:	66 89 02             	mov    %ax,(%edx)

    // 回写到多个表中
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15a69:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15a70:	eb 4b                	jmp    15abd <cluster_set_next+0x11b>
        err = bwrite_secotr(fat, fat->tbl_start + sector);
   15a72:	8b 45 08             	mov    0x8(%ebp),%eax
   15a75:	8b 10                	mov    (%eax),%edx
   15a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a7a:	01 d0                	add    %edx,%eax
   15a7c:	83 ec 08             	sub    $0x8,%esp
   15a7f:	50                   	push   %eax
   15a80:	ff 75 08             	pushl  0x8(%ebp)
   15a83:	e8 f5 fd ff ff       	call   1587d <bwrite_secotr>
   15a88:	83 c4 10             	add    $0x10,%esp
   15a8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15a8e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15a92:	79 17                	jns    15aab <cluster_set_next+0x109>
            log_printf("write cluster failed.");
   15a94:	83 ec 0c             	sub    $0xc,%esp
   15a97:	68 04 9a 01 00       	push   $0x19a04
   15a9c:	e8 5b 2e 00 00       	call   188fc <log_printf>
   15aa1:	83 c4 10             	add    $0x10,%esp
            return -1;
   15aa4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15aa9:	eb 24                	jmp    15acf <cluster_set_next+0x12d>
        }
        sector += fat->tbl_sectors;
   15aab:	8b 45 08             	mov    0x8(%ebp),%eax
   15aae:	8b 50 08             	mov    0x8(%eax),%edx
   15ab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ab4:	01 d0                	add    %edx,%eax
   15ab6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15ab9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15abd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ac0:	8b 50 04             	mov    0x4(%eax),%edx
   15ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15ac6:	39 c2                	cmp    %eax,%edx
   15ac8:	77 a8                	ja     15a72 <cluster_set_next+0xd0>
    }
    return 0;
   15aca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15acf:	c9                   	leave  
   15ad0:	c3                   	ret    

00015ad1 <cluster_free_chain>:

/**
 * @brief 释放cluster链
 */
void cluster_free_chain(fat_t * fat, cluster_t start) {
   15ad1:	55                   	push   %ebp
   15ad2:	89 e5                	mov    %esp,%ebp
   15ad4:	83 ec 28             	sub    $0x28,%esp
   15ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ada:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15ade:	eb 34                	jmp    15b14 <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15ae0:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ae4:	83 ec 08             	sub    $0x8,%esp
   15ae7:	50                   	push   %eax
   15ae8:	ff 75 08             	pushl  0x8(%ebp)
   15aeb:	e8 f4 fd ff ff       	call   158e4 <cluster_get_next>
   15af0:	83 c4 10             	add    $0x10,%esp
   15af3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   15af7:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15afb:	83 ec 04             	sub    $0x4,%esp
   15afe:	6a 00                	push   $0x0
   15b00:	50                   	push   %eax
   15b01:	ff 75 08             	pushl  0x8(%ebp)
   15b04:	e8 99 fe ff ff       	call   159a2 <cluster_set_next>
   15b09:	83 c4 10             	add    $0x10,%esp
        start = next;
   15b0c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15b10:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15b14:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15b18:	83 ec 0c             	sub    $0xc,%esp
   15b1b:	50                   	push   %eax
   15b1c:	e8 9a fd ff ff       	call   158bb <cluster_is_valid>
   15b21:	83 c4 10             	add    $0x10,%esp
   15b24:	85 c0                	test   %eax,%eax
   15b26:	75 b8                	jne    15ae0 <cluster_free_chain+0xf>
    }
}
   15b28:	90                   	nop
   15b29:	c9                   	leave  
   15b2a:	c3                   	ret    

00015b2b <cluster_alloc_free>:

/**
 * @brief 找一个空闲的cluster
 */
cluster_t cluster_alloc_free (fat_t * fat, int cnt) {
   15b2b:	55                   	push   %ebp
   15b2c:	89 e5                	mov    %esp,%ebp
   15b2e:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   15b31:	8b 45 08             	mov    0x8(%ebp),%eax
   15b34:	8b 50 08             	mov    0x8(%eax),%edx
   15b37:	8b 45 08             	mov    0x8(%ebp),%eax
   15b3a:	8b 40 0c             	mov    0xc(%eax),%eax
   15b3d:	0f af c2             	imul   %edx,%eax
   15b40:	d1 e8                	shr    %eax
   15b42:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   15b45:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   15b4b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15b4f:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15b53:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   15b59:	e9 a0 00 00 00       	jmp    15bfe <cluster_alloc_free+0xd3>
        cluster_t free = cluster_get_next(fat, curr);
   15b5e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15b62:	83 ec 08             	sub    $0x8,%esp
   15b65:	50                   	push   %eax
   15b66:	ff 75 08             	pushl  0x8(%ebp)
   15b69:	e8 76 fd ff ff       	call   158e4 <cluster_get_next>
   15b6e:	83 c4 10             	add    $0x10,%esp
   15b71:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE) {
   15b75:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15b7a:	75 77                	jne    15bf3 <cluster_alloc_free+0xc8>
            // 记录首个簇
            if (!cluster_is_valid(start)) {
   15b7c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15b80:	83 ec 0c             	sub    $0xc,%esp
   15b83:	50                   	push   %eax
   15b84:	e8 32 fd ff ff       	call   158bb <cluster_is_valid>
   15b89:	83 c4 10             	add    $0x10,%esp
   15b8c:	85 c0                	test   %eax,%eax
   15b8e:	75 08                	jne    15b98 <cluster_alloc_free+0x6d>
                start = curr;
   15b90:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15b94:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            } 
        
            // 前一簇如果有效，则设置。否则忽略掉
            if (cluster_is_valid(pre)) {
   15b98:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15b9c:	83 ec 0c             	sub    $0xc,%esp
   15b9f:	50                   	push   %eax
   15ba0:	e8 16 fd ff ff       	call   158bb <cluster_is_valid>
   15ba5:	83 c4 10             	add    $0x10,%esp
   15ba8:	85 c0                	test   %eax,%eax
   15baa:	74 3b                	je     15be7 <cluster_alloc_free+0xbc>
                // 找到空表项，设置前一表项的链接
                int err = cluster_set_next(fat, pre, curr);
   15bac:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   15bb0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15bb4:	83 ec 04             	sub    $0x4,%esp
   15bb7:	52                   	push   %edx
   15bb8:	50                   	push   %eax
   15bb9:	ff 75 08             	pushl  0x8(%ebp)
   15bbc:	e8 e1 fd ff ff       	call   159a2 <cluster_set_next>
   15bc1:	83 c4 10             	add    $0x10,%esp
   15bc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15bc7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15bcb:	79 1a                	jns    15be7 <cluster_alloc_free+0xbc>
                    cluster_free_chain(fat, start);
   15bcd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15bd1:	83 ec 08             	sub    $0x8,%esp
   15bd4:	50                   	push   %eax
   15bd5:	ff 75 08             	pushl  0x8(%ebp)
   15bd8:	e8 f4 fe ff ff       	call   15ad1 <cluster_free_chain>
   15bdd:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15be0:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15be5:	eb 6f                	jmp    15c56 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   15be7:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15beb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   15bef:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15bf3:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15bf7:	83 c0 01             	add    $0x1,%eax
   15bfa:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   15bfe:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15c02:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15c05:	7e 0a                	jle    15c11 <cluster_alloc_free+0xe6>
   15c07:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15c0b:	0f 85 4d ff ff ff    	jne    15b5e <cluster_alloc_free+0x33>
        }
    }

    // 最后的结点
    if (cnt == 0) {
   15c11:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15c15:	75 27                	jne    15c3e <cluster_alloc_free+0x113>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15c17:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15c1b:	83 ec 04             	sub    $0x4,%esp
   15c1e:	68 f8 ff 00 00       	push   $0xfff8
   15c23:	50                   	push   %eax
   15c24:	ff 75 08             	pushl  0x8(%ebp)
   15c27:	e8 76 fd ff ff       	call   159a2 <cluster_set_next>
   15c2c:	83 c4 10             	add    $0x10,%esp
   15c2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0) {
   15c32:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15c36:	75 06                	jne    15c3e <cluster_alloc_free+0x113>
            return start;
   15c38:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15c3c:	eb 18                	jmp    15c56 <cluster_alloc_free+0x12b>
        }
    }

    // 失败，空间不够等问题
    cluster_free_chain(fat, start);
   15c3e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15c42:	83 ec 08             	sub    $0x8,%esp
   15c45:	50                   	push   %eax
   15c46:	ff 75 08             	pushl  0x8(%ebp)
   15c49:	e8 83 fe ff ff       	call   15ad1 <cluster_free_chain>
   15c4e:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   15c51:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   15c56:	c9                   	leave  
   15c57:	c3                   	ret    

00015c58 <to_sfn>:

/**
 * @brief 转换文件名为diritem中的短文件名，如a.txt 转换成a      txt
 */
static void to_sfn(char* dest, const char* src) {
   15c58:	55                   	push   %ebp
   15c59:	89 e5                	mov    %esp,%ebp
   15c5b:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15c5e:	83 ec 04             	sub    $0x4,%esp
   15c61:	6a 0b                	push   $0xb
   15c63:	6a 20                	push   $0x20
   15c65:	ff 75 08             	pushl  0x8(%ebp)
   15c68:	e8 e5 26 00 00       	call   18352 <kernel_memset>
   15c6d:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char * curr = dest;
   15c70:	8b 45 08             	mov    0x8(%ebp),%eax
   15c73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15c76:	8b 45 08             	mov    0x8(%ebp),%eax
   15c79:	83 c0 0b             	add    $0xb,%eax
   15c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15c7f:	eb 49                	jmp    15cca <to_sfn+0x72>
        char c = *src++;
   15c81:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c84:	8d 50 01             	lea    0x1(%eax),%edx
   15c87:	89 55 0c             	mov    %edx,0xc(%ebp)
   15c8a:	0f b6 00             	movzbl (%eax),%eax
   15c8d:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15c90:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15c94:	83 f8 2e             	cmp    $0x2e,%eax
   15c97:	75 0b                	jne    15ca4 <to_sfn+0x4c>
        case '.':       // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15c99:	8b 45 08             	mov    0x8(%ebp),%eax
   15c9c:	83 c0 08             	add    $0x8,%eax
   15c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15ca2:	eb 26                	jmp    15cca <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15ca4:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15ca8:	7e 10                	jle    15cba <to_sfn+0x62>
   15caa:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15cae:	7f 0a                	jg     15cba <to_sfn+0x62>
                c = c - 'a' + 'A';
   15cb0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15cb4:	83 e8 20             	sub    $0x20,%eax
   15cb7:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15cba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cbd:	8d 50 01             	lea    0x1(%eax),%edx
   15cc0:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15cc3:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15cc7:	88 10                	mov    %dl,(%eax)
            break;
   15cc9:	90                   	nop
    while (*src && (curr < end)) {
   15cca:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ccd:	0f b6 00             	movzbl (%eax),%eax
   15cd0:	84 c0                	test   %al,%al
   15cd2:	74 08                	je     15cdc <to_sfn+0x84>
   15cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15cd7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15cda:	72 a5                	jb     15c81 <to_sfn+0x29>
        }
    }
}
   15cdc:	90                   	nop
   15cdd:	c9                   	leave  
   15cde:	c3                   	ret    

00015cdf <diritem_name_match>:

/**
 * @brief 判断item项是否与指定的名称相匹配
 */
int diritem_name_match (diritem_t * item, const char * path) {
   15cdf:	55                   	push   %ebp
   15ce0:	89 e5                	mov    %esp,%ebp
   15ce2:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15ce5:	83 ec 08             	sub    $0x8,%esp
   15ce8:	ff 75 0c             	pushl  0xc(%ebp)
   15ceb:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15cee:	50                   	push   %eax
   15cef:	e8 64 ff ff ff       	call   15c58 <to_sfn>
   15cf4:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15cf7:	8b 45 08             	mov    0x8(%ebp),%eax
   15cfa:	83 ec 04             	sub    $0x4,%esp
   15cfd:	6a 0b                	push   $0xb
   15cff:	50                   	push   %eax
   15d00:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15d03:	50                   	push   %eax
   15d04:	e8 8a 26 00 00       	call   18393 <kernel_memcmp>
   15d09:	83 c4 10             	add    $0x10,%esp
   15d0c:	85 c0                	test   %eax,%eax
   15d0e:	0f 94 c0             	sete   %al
   15d11:	0f b6 c0             	movzbl %al,%eax
}
   15d14:	c9                   	leave  
   15d15:	c3                   	ret    

00015d16 <diritem_init>:

/**
 * 缺省初始化driitem
 */
int diritem_init(diritem_t * item, uint8_t attr,const char * name) {
   15d16:	55                   	push   %ebp
   15d17:	89 e5                	mov    %esp,%ebp
   15d19:	83 ec 18             	sub    $0x18,%esp
   15d1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d1f:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15d22:	8b 45 08             	mov    0x8(%ebp),%eax
   15d25:	83 ec 08             	sub    $0x8,%esp
   15d28:	ff 75 10             	pushl  0x10(%ebp)
   15d2b:	50                   	push   %eax
   15d2c:	e8 27 ff ff ff       	call   15c58 <to_sfn>
   15d31:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t )(FAT_CLUSTER_INVALID >> 16);
   15d34:	8b 45 08             	mov    0x8(%ebp),%eax
   15d37:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(FAT_CLUSTER_INVALID & 0xFFFF);
   15d3d:	8b 45 08             	mov    0x8(%ebp),%eax
   15d40:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15d46:	8b 45 08             	mov    0x8(%ebp),%eax
   15d49:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15d50:	8b 45 08             	mov    0x8(%ebp),%eax
   15d53:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15d57:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15d5a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d5d:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    // 时间写固定值，简单方便
    item->DIR_CrtTime = 0;
   15d61:	8b 45 08             	mov    0x8(%ebp),%eax
   15d64:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15d6a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d6d:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15d73:	8b 45 08             	mov    0x8(%ebp),%eax
   15d76:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15d7a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d7d:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15d81:	8b 45 08             	mov    0x8(%ebp),%eax
   15d84:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15d88:	8b 45 08             	mov    0x8(%ebp),%eax
   15d8b:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15d8f:	8b 45 08             	mov    0x8(%ebp),%eax
   15d92:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15d96:	8b 45 08             	mov    0x8(%ebp),%eax
   15d99:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15d9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15da2:	c9                   	leave  
   15da3:	c3                   	ret    

00015da4 <diritem_get_name>:

/**
 * @brief 获取diritem中的名称，转换成合适
 */
void diritem_get_name (diritem_t * item, char * dest) {
   15da4:	55                   	push   %ebp
   15da5:	89 e5                	mov    %esp,%ebp
   15da7:	83 ec 18             	sub    $0x18,%esp
    char * c = dest;
   15daa:	8b 45 0c             	mov    0xc(%ebp),%eax
   15dad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * ext = (char *)0;
   15db0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1);     // 最多11个字符
   15db7:	83 ec 04             	sub    $0x4,%esp
   15dba:	6a 0c                	push   $0xc
   15dbc:	6a 00                	push   $0x0
   15dbe:	ff 75 0c             	pushl  0xc(%ebp)
   15dc1:	e8 8c 25 00 00       	call   18352 <kernel_memset>
   15dc6:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++) {
   15dc9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15dd0:	eb 43                	jmp    15e15 <diritem_get_name+0x71>
        if (item->DIR_Name[i] != ' ') {
   15dd2:	8b 55 08             	mov    0x8(%ebp),%edx
   15dd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15dd8:	01 d0                	add    %edx,%eax
   15dda:	0f b6 00             	movzbl (%eax),%eax
   15ddd:	3c 20                	cmp    $0x20,%al
   15ddf:	74 18                	je     15df9 <diritem_get_name+0x55>
            *c++ = item->DIR_Name[i];
   15de1:	8b 55 08             	mov    0x8(%ebp),%edx
   15de4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15de7:	01 d0                	add    %edx,%eax
   15de9:	0f b6 08             	movzbl (%eax),%ecx
   15dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15def:	8d 50 01             	lea    0x1(%eax),%edx
   15df2:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15df5:	89 ca                	mov    %ecx,%edx
   15df7:	88 10                	mov    %dl,(%eax)
        }

        if (i == 7) {
   15df9:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15dfd:	75 12                	jne    15e11 <diritem_get_name+0x6d>
            ext = c;
   15dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e02:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   15e05:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e08:	8d 50 01             	lea    0x1(%eax),%edx
   15e0b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15e0e:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++) {
   15e11:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15e15:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15e19:	7e b7                	jle    15dd2 <diritem_get_name+0x2e>
        }
    }

    // 没有扩展名的情况
    if (ext && (ext[1] == '\0')) {
   15e1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15e1f:	74 13                	je     15e34 <diritem_get_name+0x90>
   15e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e24:	83 c0 01             	add    $0x1,%eax
   15e27:	0f b6 00             	movzbl (%eax),%eax
   15e2a:	84 c0                	test   %al,%al
   15e2c:	75 06                	jne    15e34 <diritem_get_name+0x90>
        ext[0] = '\0';
   15e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e31:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   15e34:	90                   	nop
   15e35:	c9                   	leave  
   15e36:	c3                   	ret    

00015e37 <diritem_get_type>:

/**
 * @brief 获取文件类型
 */
file_type_t diritem_get_type (diritem_t * item) {
   15e37:	55                   	push   %ebp
   15e38:	89 e5                	mov    %esp,%ebp
   15e3a:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15e3d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 长文件名和volum id
    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM)) {
   15e44:	8b 45 08             	mov    0x8(%ebp),%eax
   15e47:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15e4b:	0f b6 c0             	movzbl %al,%eax
   15e4e:	83 e0 0e             	and    $0xe,%eax
   15e51:	85 c0                	test   %eax,%eax
   15e53:	74 07                	je     15e5c <diritem_get_type+0x25>
        return FILE_UNKNOWN;
   15e55:	b8 00 00 00 00       	mov    $0x0,%eax
   15e5a:	eb 1d                	jmp    15e79 <diritem_get_type+0x42>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e5f:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15e63:	0f b6 c0             	movzbl %al,%eax
   15e66:	83 e0 10             	and    $0x10,%eax
   15e69:	85 c0                	test   %eax,%eax
   15e6b:	74 07                	je     15e74 <diritem_get_type+0x3d>
   15e6d:	b8 03 00 00 00       	mov    $0x3,%eax
   15e72:	eb 05                	jmp    15e79 <diritem_get_type+0x42>
   15e74:	b8 02 00 00 00       	mov    $0x2,%eax
}
   15e79:	c9                   	leave  
   15e7a:	c3                   	ret    

00015e7b <read_dir_entry>:

/**
 * @brief 在root目录中读取diritem
 */
static diritem_t * read_dir_entry (fat_t * fat, int index) {
   15e7b:	55                   	push   %ebp
   15e7c:	89 e5                	mov    %esp,%ebp
   15e7e:	53                   	push   %ebx
   15e7f:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   15e82:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15e86:	78 0d                	js     15e95 <read_dir_entry+0x1a>
   15e88:	8b 45 08             	mov    0x8(%ebp),%eax
   15e8b:	8b 50 14             	mov    0x14(%eax),%edx
   15e8e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e91:	39 c2                	cmp    %eax,%edx
   15e93:	77 07                	ja     15e9c <read_dir_entry+0x21>
        return (diritem_t *)0;
   15e95:	b8 00 00 00 00       	mov    $0x0,%eax
   15e9a:	eb 5a                	jmp    15ef6 <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   15e9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e9f:	c1 e0 05             	shl    $0x5,%eax
   15ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   15ea5:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea8:	8b 48 18             	mov    0x18(%eax),%ecx
   15eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15eae:	8b 55 08             	mov    0x8(%ebp),%edx
   15eb1:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15eb4:	ba 00 00 00 00       	mov    $0x0,%edx
   15eb9:	f7 f3                	div    %ebx
   15ebb:	01 c8                	add    %ecx,%eax
   15ebd:	83 ec 08             	sub    $0x8,%esp
   15ec0:	50                   	push   %eax
   15ec1:	ff 75 08             	pushl  0x8(%ebp)
   15ec4:	e8 5b f9 ff ff       	call   15824 <bread_sector>
   15ec9:	83 c4 10             	add    $0x10,%esp
   15ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
   15ecf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15ed3:	79 07                	jns    15edc <read_dir_entry+0x61>
        return (diritem_t *)0;
   15ed5:	b8 00 00 00 00       	mov    $0x0,%eax
   15eda:	eb 1a                	jmp    15ef6 <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   15edc:	8b 45 08             	mov    0x8(%ebp),%eax
   15edf:	8b 48 24             	mov    0x24(%eax),%ecx
   15ee2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ee5:	8b 55 08             	mov    0x8(%ebp),%edx
   15ee8:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15eeb:	ba 00 00 00 00       	mov    $0x0,%edx
   15ef0:	f7 f3                	div    %ebx
   15ef2:	89 d0                	mov    %edx,%eax
   15ef4:	01 c8                	add    %ecx,%eax
}
   15ef6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15ef9:	c9                   	leave  
   15efa:	c3                   	ret    

00015efb <write_dir_entry>:

/**
 * @brief 写dir目录项
 */
static int write_dir_entry (fat_t * fat, diritem_t * item, int index) {
   15efb:	55                   	push   %ebp
   15efc:	89 e5                	mov    %esp,%ebp
   15efe:	53                   	push   %ebx
   15eff:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   15f02:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15f06:	78 0d                	js     15f15 <write_dir_entry+0x1a>
   15f08:	8b 45 08             	mov    0x8(%ebp),%eax
   15f0b:	8b 50 14             	mov    0x14(%eax),%edx
   15f0e:	8b 45 10             	mov    0x10(%ebp),%eax
   15f11:	39 c2                	cmp    %eax,%edx
   15f13:	77 0a                	ja     15f1f <write_dir_entry+0x24>
        return -1;
   15f15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15f1a:	e9 81 00 00 00       	jmp    15fa0 <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   15f1f:	8b 45 10             	mov    0x10(%ebp),%eax
   15f22:	c1 e0 05             	shl    $0x5,%eax
   15f25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   15f28:	8b 45 08             	mov    0x8(%ebp),%eax
   15f2b:	8b 48 18             	mov    0x18(%eax),%ecx
   15f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f31:	8b 55 08             	mov    0x8(%ebp),%edx
   15f34:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15f37:	ba 00 00 00 00       	mov    $0x0,%edx
   15f3c:	f7 f3                	div    %ebx
   15f3e:	01 c8                	add    %ecx,%eax
   15f40:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   15f43:	83 ec 08             	sub    $0x8,%esp
   15f46:	ff 75 f0             	pushl  -0x10(%ebp)
   15f49:	ff 75 08             	pushl  0x8(%ebp)
   15f4c:	e8 d3 f8 ff ff       	call   15824 <bread_sector>
   15f51:	83 c4 10             	add    $0x10,%esp
   15f54:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   15f57:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15f5b:	79 07                	jns    15f64 <write_dir_entry+0x69>
        return -1;
   15f5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15f62:	eb 3c                	jmp    15fa0 <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   15f64:	8b 45 08             	mov    0x8(%ebp),%eax
   15f67:	8b 48 24             	mov    0x24(%eax),%ecx
   15f6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f6d:	8b 55 08             	mov    0x8(%ebp),%edx
   15f70:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15f73:	ba 00 00 00 00       	mov    $0x0,%edx
   15f78:	f7 f3                	div    %ebx
   15f7a:	89 d0                	mov    %edx,%eax
   15f7c:	01 c8                	add    %ecx,%eax
   15f7e:	83 ec 04             	sub    $0x4,%esp
   15f81:	6a 20                	push   $0x20
   15f83:	ff 75 0c             	pushl  0xc(%ebp)
   15f86:	50                   	push   %eax
   15f87:	e8 77 23 00 00       	call   18303 <kernel_memcpy>
   15f8c:	83 c4 10             	add    $0x10,%esp
    return bwrite_secotr(fat, sector);
   15f8f:	83 ec 08             	sub    $0x8,%esp
   15f92:	ff 75 f0             	pushl  -0x10(%ebp)
   15f95:	ff 75 08             	pushl  0x8(%ebp)
   15f98:	e8 e0 f8 ff ff       	call   1587d <bwrite_secotr>
   15f9d:	83 c4 10             	add    $0x10,%esp
}
   15fa0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15fa3:	c9                   	leave  
   15fa4:	c3                   	ret    

00015fa5 <expand_file>:


/**
 * @brief 更改文件大小, 此时当前族号已经到达了最后的簇号
 */
static int expand_file(file_t * file, int inc_bytes) {
   15fa5:	55                   	push   %ebp
   15fa6:	89 e5                	mov    %esp,%ebp
   15fa8:	53                   	push   %ebx
   15fa9:	83 ec 24             	sub    $0x24,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   15fac:	8b 45 08             	mov    0x8(%ebp),%eax
   15faf:	8b 40 44             	mov    0x44(%eax),%eax
   15fb2:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   15fb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0)) {
   15fbb:	8b 45 08             	mov    0x8(%ebp),%eax
   15fbe:	8b 40 24             	mov    0x24(%eax),%eax
   15fc1:	85 c0                	test   %eax,%eax
   15fc3:	74 19                	je     15fde <expand_file+0x39>
   15fc5:	8b 45 08             	mov    0x8(%ebp),%eax
   15fc8:	8b 40 24             	mov    0x24(%eax),%eax
   15fcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15fce:	8b 4a 20             	mov    0x20(%edx),%ecx
   15fd1:	ba 00 00 00 00       	mov    $0x0,%edx
   15fd6:	f7 f1                	div    %ecx
   15fd8:	89 d0                	mov    %edx,%eax
   15fda:	85 c0                	test   %eax,%eax
   15fdc:	75 29                	jne    16007 <expand_file+0x62>
        // 文件为空，或者刚好达到的簇的末尾
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size; 
   15fde:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15fe1:	8b 50 20             	mov    0x20(%eax),%edx
   15fe4:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fe7:	52                   	push   %edx
   15fe8:	50                   	push   %eax
   15fe9:	e8 1f f8 ff ff       	call   1580d <up2>
   15fee:	83 c4 08             	add    $0x8,%esp
   15ff1:	89 c1                	mov    %eax,%ecx
   15ff3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15ff6:	8b 58 20             	mov    0x20(%eax),%ebx
   15ff9:	89 c8                	mov    %ecx,%eax
   15ffb:	ba 00 00 00 00       	mov    $0x0,%edx
   16000:	f7 f3                	div    %ebx
   16002:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16005:	eb 6b                	jmp    16072 <expand_file+0xcd>
    } else {
        // 文件非空，当前簇的空闲量，如果空间够增长，则直接退出了
        // 例如：大小为2048，再扩充1024,簇大小为1024
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   16007:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1600a:	8b 48 20             	mov    0x20(%eax),%ecx
   1600d:	8b 45 08             	mov    0x8(%ebp),%eax
   16010:	8b 40 24             	mov    0x24(%eax),%eax
   16013:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16016:	8b 5a 20             	mov    0x20(%edx),%ebx
   16019:	ba 00 00 00 00       	mov    $0x0,%edx
   1601e:	f7 f3                	div    %ebx
   16020:	89 d0                	mov    %edx,%eax
   16022:	29 c1                	sub    %eax,%ecx
   16024:	89 c8                	mov    %ecx,%eax
   16026:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree > inc_bytes) {
   16029:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1602c:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1602f:	7e 0a                	jle    1603b <expand_file+0x96>
            return 0;
   16031:	b8 00 00 00 00       	mov    $0x0,%eax
   16036:	e9 da 00 00 00       	jmp    16115 <expand_file+0x170>
        }

        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size;
   1603b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1603e:	8b 40 20             	mov    0x20(%eax),%eax
   16041:	8b 55 0c             	mov    0xc(%ebp),%edx
   16044:	2b 55 ec             	sub    -0x14(%ebp),%edx
   16047:	50                   	push   %eax
   16048:	52                   	push   %edx
   16049:	e8 bf f7 ff ff       	call   1580d <up2>
   1604e:	83 c4 08             	add    $0x8,%esp
   16051:	89 c1                	mov    %eax,%ecx
   16053:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16056:	8b 58 20             	mov    0x20(%eax),%ebx
   16059:	89 c8                	mov    %ecx,%eax
   1605b:	ba 00 00 00 00       	mov    $0x0,%edx
   16060:	f7 f3                	div    %ebx
   16062:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (cluster_cnt == 0) {
   16065:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16069:	75 07                	jne    16072 <expand_file+0xcd>
            cluster_cnt = 1;
   1606b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        }
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   16072:	83 ec 08             	sub    $0x8,%esp
   16075:	ff 75 f4             	pushl  -0xc(%ebp)
   16078:	ff 75 f0             	pushl  -0x10(%ebp)
   1607b:	e8 ab fa ff ff       	call   15b2b <cluster_alloc_free>
   16080:	83 c4 10             	add    $0x10,%esp
   16083:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   16087:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   1608b:	83 ec 0c             	sub    $0xc,%esp
   1608e:	50                   	push   %eax
   1608f:	e8 27 f8 ff ff       	call   158bb <cluster_is_valid>
   16094:	83 c4 10             	add    $0x10,%esp
   16097:	85 c0                	test   %eax,%eax
   16099:	75 17                	jne    160b2 <expand_file+0x10d>
        log_printf("no cluster for file write");
   1609b:	83 ec 0c             	sub    $0xc,%esp
   1609e:	68 1a 9a 01 00       	push   $0x19a1a
   160a3:	e8 54 28 00 00       	call   188fc <log_printf>
   160a8:	83 c4 10             	add    $0x10,%esp
        return -1;
   160ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   160b0:	eb 63                	jmp    16115 <expand_file+0x170>
    }

    // 在文件关闭时，回写
    if (!cluster_is_valid(file->sblk)) {
   160b2:	8b 45 08             	mov    0x8(%ebp),%eax
   160b5:	8b 40 34             	mov    0x34(%eax),%eax
   160b8:	0f b7 c0             	movzwl %ax,%eax
   160bb:	83 ec 0c             	sub    $0xc,%esp
   160be:	50                   	push   %eax
   160bf:	e8 f7 f7 ff ff       	call   158bb <cluster_is_valid>
   160c4:	83 c4 10             	add    $0x10,%esp
   160c7:	85 c0                	test   %eax,%eax
   160c9:	75 18                	jne    160e3 <expand_file+0x13e>
        file->cblk = file->sblk = start;
   160cb:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   160cf:	8b 45 08             	mov    0x8(%ebp),%eax
   160d2:	89 50 34             	mov    %edx,0x34(%eax)
   160d5:	8b 45 08             	mov    0x8(%ebp),%eax
   160d8:	8b 50 34             	mov    0x34(%eax),%edx
   160db:	8b 45 08             	mov    0x8(%ebp),%eax
   160de:	89 50 38             	mov    %edx,0x38(%eax)
   160e1:	eb 2d                	jmp    16110 <expand_file+0x16b>
    } else {
        // 建立链接关系
        int err = cluster_set_next(fat, file->cblk, start);
   160e3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   160e7:	8b 45 08             	mov    0x8(%ebp),%eax
   160ea:	8b 40 38             	mov    0x38(%eax),%eax
   160ed:	0f b7 c0             	movzwl %ax,%eax
   160f0:	83 ec 04             	sub    $0x4,%esp
   160f3:	52                   	push   %edx
   160f4:	50                   	push   %eax
   160f5:	ff 75 f0             	pushl  -0x10(%ebp)
   160f8:	e8 a5 f8 ff ff       	call   159a2 <cluster_set_next>
   160fd:	83 c4 10             	add    $0x10,%esp
   16100:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   16103:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16107:	79 07                	jns    16110 <expand_file+0x16b>
            return -1;
   16109:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1610e:	eb 05                	jmp    16115 <expand_file+0x170>
        }
    }

    return 0;
   16110:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16115:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16118:	c9                   	leave  
   16119:	c3                   	ret    

0001611a <move_file_pos>:

/**
 * @brief 移动文件指针
 */
static int move_file_pos(file_t* file, fat_t * fat, uint32_t move_bytes, int expand) {
   1611a:	55                   	push   %ebp
   1611b:	89 e5                	mov    %esp,%ebp
   1611d:	83 ec 18             	sub    $0x18,%esp
	uint32_t c_offset = file->pos % fat->cluster_byte_size;
   16120:	8b 45 08             	mov    0x8(%ebp),%eax
   16123:	8b 40 30             	mov    0x30(%eax),%eax
   16126:	89 c2                	mov    %eax,%edx
   16128:	8b 45 0c             	mov    0xc(%ebp),%eax
   1612b:	8b 48 20             	mov    0x20(%eax),%ecx
   1612e:	89 d0                	mov    %edx,%eax
   16130:	ba 00 00 00 00       	mov    $0x0,%edx
   16135:	f7 f1                	div    %ecx
   16137:	89 55 f0             	mov    %edx,-0x10(%ebp)

    // 跨簇，则调整curr_cluster。注意，如果已经是最后一个簇了，则curr_cluster不会调整
	if (c_offset + move_bytes >= fat->cluster_byte_size) {
   1613a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1613d:	8b 45 10             	mov    0x10(%ebp),%eax
   16140:	01 c2                	add    %eax,%edx
   16142:	8b 45 0c             	mov    0xc(%ebp),%eax
   16145:	8b 40 20             	mov    0x20(%eax),%eax
   16148:	39 c2                	cmp    %eax,%edx
   1614a:	72 74                	jb     161c0 <move_file_pos+0xa6>
        cluster_t next = cluster_get_next(fat, file->cblk);
   1614c:	8b 45 08             	mov    0x8(%ebp),%eax
   1614f:	8b 40 38             	mov    0x38(%eax),%eax
   16152:	0f b7 c0             	movzwl %ax,%eax
   16155:	83 ec 08             	sub    $0x8,%esp
   16158:	50                   	push   %eax
   16159:	ff 75 0c             	pushl  0xc(%ebp)
   1615c:	e8 83 f7 ff ff       	call   158e4 <cluster_get_next>
   16161:	83 c4 10             	add    $0x10,%esp
   16164:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
		if ((next == FAT_CLUSTER_INVALID) && expand) {
   16168:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   1616d:	75 47                	jne    161b6 <move_file_pos+0x9c>
   1616f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   16173:	74 41                	je     161b6 <move_file_pos+0x9c>
            int err = expand_file(file, fat->cluster_byte_size);
   16175:	8b 45 0c             	mov    0xc(%ebp),%eax
   16178:	8b 40 20             	mov    0x20(%eax),%eax
   1617b:	83 ec 08             	sub    $0x8,%esp
   1617e:	50                   	push   %eax
   1617f:	ff 75 08             	pushl  0x8(%ebp)
   16182:	e8 1e fe ff ff       	call   15fa5 <expand_file>
   16187:	83 c4 10             	add    $0x10,%esp
   1618a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (err < 0) {
   1618d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16191:	79 07                	jns    1619a <move_file_pos+0x80>
                return -1;
   16193:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16198:	eb 40                	jmp    161da <move_file_pos+0xc0>
            }

            next = cluster_get_next(fat, file->cblk);
   1619a:	8b 45 08             	mov    0x8(%ebp),%eax
   1619d:	8b 40 38             	mov    0x38(%eax),%eax
   161a0:	0f b7 c0             	movzwl %ax,%eax
   161a3:	83 ec 08             	sub    $0x8,%esp
   161a6:	50                   	push   %eax
   161a7:	ff 75 0c             	pushl  0xc(%ebp)
   161aa:	e8 35 f7 ff ff       	call   158e4 <cluster_get_next>
   161af:	83 c4 10             	add    $0x10,%esp
   161b2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        }

        file->cblk = next;
   161b6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   161ba:	8b 45 08             	mov    0x8(%ebp),%eax
   161bd:	89 50 38             	mov    %edx,0x38(%eax)
	}

	file->pos += move_bytes;
   161c0:	8b 45 08             	mov    0x8(%ebp),%eax
   161c3:	8b 40 30             	mov    0x30(%eax),%eax
   161c6:	89 c2                	mov    %eax,%edx
   161c8:	8b 45 10             	mov    0x10(%ebp),%eax
   161cb:	01 d0                	add    %edx,%eax
   161cd:	89 c2                	mov    %eax,%edx
   161cf:	8b 45 08             	mov    0x8(%ebp),%eax
   161d2:	89 50 30             	mov    %edx,0x30(%eax)
	return 0;
   161d5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   161da:	c9                   	leave  
   161db:	c3                   	ret    

000161dc <fatfs_mount>:

/**
 * @brief 挂载fat文件系统
 */
int fatfs_mount (struct _fs_t * fs, int dev_major, int dev_minor) {
   161dc:	55                   	push   %ebp
   161dd:	89 e5                	mov    %esp,%ebp
   161df:	83 ec 18             	sub    $0x18,%esp
    // 打开设备
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   161e2:	83 ec 04             	sub    $0x4,%esp
   161e5:	6a 00                	push   $0x0
   161e7:	ff 75 10             	pushl  0x10(%ebp)
   161ea:	ff 75 0c             	pushl  0xc(%ebp)
   161ed:	e8 c5 db ff ff       	call   13db7 <dev_open>
   161f2:	83 c4 10             	add    $0x10,%esp
   161f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0) {
   161f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   161fc:	79 20                	jns    1621e <fatfs_mount+0x42>
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   161fe:	83 ec 04             	sub    $0x4,%esp
   16201:	ff 75 10             	pushl  0x10(%ebp)
   16204:	ff 75 0c             	pushl  0xc(%ebp)
   16207:	68 34 9a 01 00       	push   $0x19a34
   1620c:	e8 eb 26 00 00       	call   188fc <log_printf>
   16211:	83 c4 10             	add    $0x10,%esp
        return -1;
   16214:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16219:	e9 fb 01 00 00       	jmp    16419 <fatfs_mount+0x23d>
    }

    // 读取dbr扇区并进行检查
    dbr_t * dbr = (dbr_t *)memory_alloc_page();
   1621e:	e8 4f aa ff ff       	call   10c72 <memory_alloc_page>
   16223:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr) {
   16226:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1622a:	75 15                	jne    16241 <fatfs_mount+0x65>
        log_printf("mount fat failed: can't alloc buf.");
   1622c:	83 ec 0c             	sub    $0xc,%esp
   1622f:	68 5c 9a 01 00       	push   $0x19a5c
   16234:	e8 c3 26 00 00       	call   188fc <log_printf>
   16239:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   1623c:	e9 b0 01 00 00       	jmp    163f1 <fatfs_mount+0x215>
    }

    // 这里需要使用查询的方式来读取，因为此时多进程还没有跑起来，只在初始化阶段？
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   16241:	6a 01                	push   $0x1
   16243:	ff 75 f0             	pushl  -0x10(%ebp)
   16246:	6a 00                	push   $0x0
   16248:	ff 75 f4             	pushl  -0xc(%ebp)
   1624b:	e8 b3 dc ff ff       	call   13f03 <dev_read>
   16250:	83 c4 10             	add    $0x10,%esp
   16253:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   16256:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1625a:	7f 15                	jg     16271 <fatfs_mount+0x95>
        log_printf("read dbr failed.");
   1625c:	83 ec 0c             	sub    $0xc,%esp
   1625f:	68 7f 9a 01 00       	push   $0x19a7f
   16264:	e8 93 26 00 00       	call   188fc <log_printf>
   16269:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   1626c:	e9 80 01 00 00       	jmp    163f1 <fatfs_mount+0x215>
    }

    // 解析DBR参数，解析出有用的参数
    fat_t * fat = &fs->fat_data;
   16271:	8b 45 08             	mov    0x8(%ebp),%eax
   16274:	05 18 02 00 00       	add    $0x218,%eax
   16279:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   1627c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1627f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16282:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   16285:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16288:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1628c:	0f b7 d0             	movzwl %ax,%edx
   1628f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16292:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   16295:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16298:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1629c:	0f b7 d0             	movzwl %ax,%edx
   1629f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162a2:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   162a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162a7:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   162ab:	0f b7 d0             	movzwl %ax,%edx
   162ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162b1:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   162b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162b7:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   162bb:	0f b6 d0             	movzbl %al,%edx
   162be:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162c1:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   162c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162c7:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   162cb:	0f b7 d0             	movzwl %ax,%edx
   162ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162d1:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   162d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162d7:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   162db:	0f b6 d0             	movzbl %al,%edx
   162de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162e1:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   162e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162e7:	8b 50 10             	mov    0x10(%eax),%edx
   162ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   162ed:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   162f1:	0f b7 c0             	movzwl %ax,%eax
   162f4:	0f af d0             	imul   %eax,%edx
   162f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   162fa:	89 50 20             	mov    %edx,0x20(%eax)
	fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   162fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16300:	8b 10                	mov    (%eax),%edx
   16302:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16305:	8b 48 08             	mov    0x8(%eax),%ecx
   16308:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1630b:	8b 40 04             	mov    0x4(%eax),%eax
   1630e:	0f af c1             	imul   %ecx,%eax
   16311:	01 c2                	add    %eax,%edx
   16313:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16316:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   16319:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1631c:	8b 50 18             	mov    0x18(%eax),%edx
   1631f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16322:	8b 40 14             	mov    0x14(%eax),%eax
   16325:	c1 e0 05             	shl    $0x5,%eax
   16328:	c1 e8 09             	shr    $0x9,%eax
   1632b:	01 c2                	add    %eax,%edx
   1632d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16330:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   16333:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16336:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    mutex_init(&fat->mutex);
   1633d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16340:	83 c0 30             	add    $0x30,%eax
   16343:	83 ec 0c             	sub    $0xc,%esp
   16346:	50                   	push   %eax
   16347:	e8 bb 18 00 00       	call   17c07 <mutex_init>
   1634c:	83 c4 10             	add    $0x10,%esp
    fs->mutex = &fat->mutex;
   1634f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16352:	8d 50 30             	lea    0x30(%eax),%edx
   16355:	8b 45 08             	mov    0x8(%ebp),%eax
   16358:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)
    fat->fs = fs;
   1635e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16361:	8b 55 08             	mov    0x8(%ebp),%edx
   16364:	89 50 2c             	mov    %edx,0x2c(%eax)

	// 简单检查是否是fat16文件系统, 可以在下边做进一步的更多检查。此处只检查做一点点检查
	if (fat->tbl_cnt != 2) {
   16367:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1636a:	8b 40 04             	mov    0x4(%eax),%eax
   1636d:	83 f8 02             	cmp    $0x2,%eax
   16370:	74 18                	je     1638a <fatfs_mount+0x1ae>
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   16372:	83 ec 04             	sub    $0x4,%esp
   16375:	ff 75 10             	pushl  0x10(%ebp)
   16378:	ff 75 0c             	pushl  0xc(%ebp)
   1637b:	68 90 9a 01 00       	push   $0x19a90
   16380:	e8 77 25 00 00       	call   188fc <log_printf>
   16385:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   16388:	eb 67                	jmp    163f1 <fatfs_mount+0x215>
	}

    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0) {
   1638a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1638d:	83 c0 36             	add    $0x36,%eax
   16390:	83 ec 04             	sub    $0x4,%esp
   16393:	6a 05                	push   $0x5
   16395:	68 ba 9a 01 00       	push   $0x19aba
   1639a:	50                   	push   %eax
   1639b:	e8 f3 1f 00 00       	call   18393 <kernel_memcmp>
   163a0:	83 c4 10             	add    $0x10,%esp
   163a3:	85 c0                	test   %eax,%eax
   163a5:	74 18                	je     163bf <fatfs_mount+0x1e3>
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   163a7:	83 ec 04             	sub    $0x4,%esp
   163aa:	ff 75 10             	pushl  0x10(%ebp)
   163ad:	ff 75 0c             	pushl  0xc(%ebp)
   163b0:	68 c0 9a 01 00       	push   $0x19ac0
   163b5:	e8 42 25 00 00       	call   188fc <log_printf>
   163ba:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   163bd:	eb 32                	jmp    163f1 <fatfs_mount+0x215>
    }

    // 记录相关的打开信息
    fs->type = FS_FAT16;
   163bf:	8b 45 08             	mov    0x8(%ebp),%eax
   163c2:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   163c9:	00 00 00 
    fs->data = &fs->fat_data;
   163cc:	8b 45 08             	mov    0x8(%ebp),%eax
   163cf:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   163d5:	8b 45 08             	mov    0x8(%ebp),%eax
   163d8:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   163de:	8b 45 08             	mov    0x8(%ebp),%eax
   163e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   163e4:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   163ea:	b8 00 00 00 00       	mov    $0x0,%eax
   163ef:	eb 28                	jmp    16419 <fatfs_mount+0x23d>

mount_failed:
    if (dbr) {
   163f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   163f5:	74 0f                	je     16406 <fatfs_mount+0x22a>
        memory_free_page((uint32_t)dbr);
   163f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163fa:	83 ec 0c             	sub    $0xc,%esp
   163fd:	50                   	push   %eax
   163fe:	e8 89 a8 ff ff       	call   10c8c <memory_free_page>
   16403:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   16406:	83 ec 0c             	sub    $0xc,%esp
   16409:	ff 75 f4             	pushl  -0xc(%ebp)
   1640c:	e8 d6 db ff ff       	call   13fe7 <dev_close>
   16411:	83 c4 10             	add    $0x10,%esp
    return -1;
   16414:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16419:	c9                   	leave  
   1641a:	c3                   	ret    

0001641b <fatfs_unmount>:

/**
 * @brief 卸载fatfs文件系统
 */
void fatfs_unmount (struct _fs_t * fs) {
   1641b:	55                   	push   %ebp
   1641c:	89 e5                	mov    %esp,%ebp
   1641e:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16421:	8b 45 08             	mov    0x8(%ebp),%eax
   16424:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1642a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   1642d:	8b 45 08             	mov    0x8(%ebp),%eax
   16430:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16436:	83 ec 0c             	sub    $0xc,%esp
   16439:	50                   	push   %eax
   1643a:	e8 a8 db ff ff       	call   13fe7 <dev_close>
   1643f:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   16442:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16445:	8b 40 24             	mov    0x24(%eax),%eax
   16448:	83 ec 0c             	sub    $0xc,%esp
   1644b:	50                   	push   %eax
   1644c:	e8 3b a8 ff ff       	call   10c8c <memory_free_page>
   16451:	83 c4 10             	add    $0x10,%esp
}
   16454:	90                   	nop
   16455:	c9                   	leave  
   16456:	c3                   	ret    

00016457 <read_from_diritem>:

/**
 * @brief 从diritem中读取相应的文件信息
 */
static void read_from_diritem (fat_t * fat, file_t * file, diritem_t * item, int index) {
   16457:	55                   	push   %ebp
   16458:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   1645a:	ff 75 10             	pushl  0x10(%ebp)
   1645d:	e8 d5 f9 ff ff       	call   15e37 <diritem_get_type>
   16462:	83 c4 04             	add    $0x4,%esp
   16465:	89 c2                	mov    %eax,%edx
   16467:	8b 45 0c             	mov    0xc(%ebp),%eax
   1646a:	89 50 20             	mov    %edx,0x20(%eax)
    file->size = (int)item->DIR_FileSize;
   1646d:	8b 45 10             	mov    0x10(%ebp),%eax
   16470:	8b 50 1c             	mov    0x1c(%eax),%edx
   16473:	8b 45 0c             	mov    0xc(%ebp),%eax
   16476:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   16479:	8b 45 0c             	mov    0xc(%ebp),%eax
   1647c:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16483:	8b 45 10             	mov    0x10(%ebp),%eax
   16486:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   1648a:	0f b7 c0             	movzwl %ax,%eax
   1648d:	c1 e0 10             	shl    $0x10,%eax
   16490:	89 c2                	mov    %eax,%edx
   16492:	8b 45 10             	mov    0x10(%ebp),%eax
   16495:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16499:	0f b7 c0             	movzwl %ax,%eax
   1649c:	09 c2                	or     %eax,%edx
   1649e:	8b 45 0c             	mov    0xc(%ebp),%eax
   164a1:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   164a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   164a7:	8b 50 34             	mov    0x34(%eax),%edx
   164aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   164ad:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   164b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   164b3:	8b 55 14             	mov    0x14(%ebp),%edx
   164b6:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   164b9:	90                   	nop
   164ba:	c9                   	leave  
   164bb:	c3                   	ret    

000164bc <fatfs_open>:

/**
 * @brief 打开指定的文件
 */
int fatfs_open (struct _fs_t * fs, const char * path, file_t * file) {
   164bc:	55                   	push   %ebp
   164bd:	89 e5                	mov    %esp,%ebp
   164bf:	83 ec 48             	sub    $0x48,%esp
    fat_t * fat = (fat_t *)fs->data;
   164c2:	8b 45 08             	mov    0x8(%ebp),%eax
   164c5:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   164cb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t * file_item = (diritem_t *)0;
   164ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   164d5:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   164dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   164e3:	eb 6f                	jmp    16554 <fatfs_open+0x98>
        diritem_t * item = read_dir_entry(fat, i);
   164e5:	83 ec 08             	sub    $0x8,%esp
   164e8:	ff 75 ec             	pushl  -0x14(%ebp)
   164eb:	ff 75 e8             	pushl  -0x18(%ebp)
   164ee:	e8 88 f9 ff ff       	call   15e7b <read_dir_entry>
   164f3:	83 c4 10             	add    $0x10,%esp
   164f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   164f9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   164fd:	75 0a                	jne    16509 <fatfs_open+0x4d>
            return -1;
   164ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16504:	e9 3f 01 00 00       	jmp    16648 <fatfs_open+0x18c>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16509:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1650c:	0f b6 00             	movzbl (%eax),%eax
   1650f:	84 c0                	test   %al,%al
   16511:	75 08                	jne    1651b <fatfs_open+0x5f>
            p_index = i;
   16513:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16516:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16519:	eb 46                	jmp    16561 <fatfs_open+0xa5>
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   1651b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1651e:	0f b6 00             	movzbl (%eax),%eax
   16521:	3c e5                	cmp    $0xe5,%al
   16523:	75 08                	jne    1652d <fatfs_open+0x71>
            p_index = i;
   16525:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16528:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   1652b:	eb 23                	jmp    16550 <fatfs_open+0x94>
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   1652d:	83 ec 08             	sub    $0x8,%esp
   16530:	ff 75 0c             	pushl  0xc(%ebp)
   16533:	ff 75 e4             	pushl  -0x1c(%ebp)
   16536:	e8 a4 f7 ff ff       	call   15cdf <diritem_name_match>
   1653b:	83 c4 10             	add    $0x10,%esp
   1653e:	85 c0                	test   %eax,%eax
   16540:	74 0e                	je     16550 <fatfs_open+0x94>
            file_item = item;
   16542:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16545:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   16548:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1654b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   1654e:	eb 11                	jmp    16561 <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16550:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16554:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16557:	8b 50 14             	mov    0x14(%eax),%edx
   1655a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1655d:	39 c2                	cmp    %eax,%edx
   1655f:	77 84                	ja     164e5 <fatfs_open+0x29>
        }
    }

    if (file_item) {
   16561:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16565:	74 62                	je     165c9 <fatfs_open+0x10d>
        read_from_diritem(fat, file, file_item, p_index);
   16567:	ff 75 f0             	pushl  -0x10(%ebp)
   1656a:	ff 75 f4             	pushl  -0xc(%ebp)
   1656d:	ff 75 10             	pushl  0x10(%ebp)
   16570:	ff 75 e8             	pushl  -0x18(%ebp)
   16573:	e8 df fe ff ff       	call   16457 <read_from_diritem>
   16578:	83 c4 10             	add    $0x10,%esp

        // 如果要截断，则清空
        if (file->mode & O_TRUNC) {
   1657b:	8b 45 10             	mov    0x10(%ebp),%eax
   1657e:	8b 40 40             	mov    0x40(%eax),%eax
   16581:	25 00 04 00 00       	and    $0x400,%eax
   16586:	85 c0                	test   %eax,%eax
   16588:	74 38                	je     165c2 <fatfs_open+0x106>
            cluster_free_chain(fat, file->sblk);
   1658a:	8b 45 10             	mov    0x10(%ebp),%eax
   1658d:	8b 40 34             	mov    0x34(%eax),%eax
   16590:	0f b7 c0             	movzwl %ax,%eax
   16593:	83 ec 08             	sub    $0x8,%esp
   16596:	50                   	push   %eax
   16597:	ff 75 e8             	pushl  -0x18(%ebp)
   1659a:	e8 32 f5 ff ff       	call   15ad1 <cluster_free_chain>
   1659f:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   165a2:	8b 45 10             	mov    0x10(%ebp),%eax
   165a5:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   165ac:	8b 45 10             	mov    0x10(%ebp),%eax
   165af:	8b 50 34             	mov    0x34(%eax),%edx
   165b2:	8b 45 10             	mov    0x10(%ebp),%eax
   165b5:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   165b8:	8b 45 10             	mov    0x10(%ebp),%eax
   165bb:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   165c2:	b8 00 00 00 00       	mov    $0x0,%eax
   165c7:	eb 7f                	jmp    16648 <fatfs_open+0x18c>
    } else if ((file->mode & O_CREAT) && (p_index >= 0)) {
   165c9:	8b 45 10             	mov    0x10(%ebp),%eax
   165cc:	8b 40 40             	mov    0x40(%eax),%eax
   165cf:	25 00 02 00 00       	and    $0x200,%eax
   165d4:	85 c0                	test   %eax,%eax
   165d6:	74 6b                	je     16643 <fatfs_open+0x187>
   165d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   165dc:	78 65                	js     16643 <fatfs_open+0x187>
        // 创建一个空闲的diritem项
        diritem_t item;
        diritem_init(&item, 0, path);
   165de:	83 ec 04             	sub    $0x4,%esp
   165e1:	ff 75 0c             	pushl  0xc(%ebp)
   165e4:	6a 00                	push   $0x0
   165e6:	8d 45 c0             	lea    -0x40(%ebp),%eax
   165e9:	50                   	push   %eax
   165ea:	e8 27 f7 ff ff       	call   15d16 <diritem_init>
   165ef:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   165f2:	83 ec 04             	sub    $0x4,%esp
   165f5:	ff 75 f0             	pushl  -0x10(%ebp)
   165f8:	8d 45 c0             	lea    -0x40(%ebp),%eax
   165fb:	50                   	push   %eax
   165fc:	ff 75 e8             	pushl  -0x18(%ebp)
   165ff:	e8 f7 f8 ff ff       	call   15efb <write_dir_entry>
   16604:	83 c4 10             	add    $0x10,%esp
   16607:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1660a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1660e:	79 17                	jns    16627 <fatfs_open+0x16b>
            log_printf("create file failed.");
   16610:	83 ec 0c             	sub    $0xc,%esp
   16613:	68 ee 9a 01 00       	push   $0x19aee
   16618:	e8 df 22 00 00       	call   188fc <log_printf>
   1661d:	83 c4 10             	add    $0x10,%esp
            return -1;
   16620:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16625:	eb 21                	jmp    16648 <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   16627:	ff 75 f0             	pushl  -0x10(%ebp)
   1662a:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1662d:	50                   	push   %eax
   1662e:	ff 75 10             	pushl  0x10(%ebp)
   16631:	ff 75 e8             	pushl  -0x18(%ebp)
   16634:	e8 1e fe ff ff       	call   16457 <read_from_diritem>
   16639:	83 c4 10             	add    $0x10,%esp
        return 0;
   1663c:	b8 00 00 00 00       	mov    $0x0,%eax
   16641:	eb 05                	jmp    16648 <fatfs_open+0x18c>
    }

    return -1;
   16643:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16648:	c9                   	leave  
   16649:	c3                   	ret    

0001664a <fatfs_read>:

/**
 * @brief 读了文件
 */
int fatfs_read (char * buf, int size, file_t * file) {
   1664a:	55                   	push   %ebp
   1664b:	89 e5                	mov    %esp,%ebp
   1664d:	53                   	push   %ebx
   1664e:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   16651:	8b 45 10             	mov    0x10(%ebp),%eax
   16654:	8b 40 44             	mov    0x44(%eax),%eax
   16657:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1665d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 调整读取量，不要超过文件总量
    uint32_t nbytes = size;
   16660:	8b 45 0c             	mov    0xc(%ebp),%eax
   16663:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   16666:	8b 45 10             	mov    0x10(%ebp),%eax
   16669:	8b 40 30             	mov    0x30(%eax),%eax
   1666c:	89 c2                	mov    %eax,%edx
   1666e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16671:	01 c2                	add    %eax,%edx
   16673:	8b 45 10             	mov    0x10(%ebp),%eax
   16676:	8b 40 24             	mov    0x24(%eax),%eax
   16679:	39 c2                	cmp    %eax,%edx
   1667b:	76 13                	jbe    16690 <fatfs_read+0x46>
        nbytes = file->size - file->pos;
   1667d:	8b 45 10             	mov    0x10(%ebp),%eax
   16680:	8b 50 24             	mov    0x24(%eax),%edx
   16683:	8b 45 10             	mov    0x10(%ebp),%eax
   16686:	8b 40 30             	mov    0x30(%eax),%eax
   16689:	29 c2                	sub    %eax,%edx
   1668b:	89 d0                	mov    %edx,%eax
   1668d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   16690:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   16697:	e9 41 01 00 00       	jmp    167dd <fatfs_read+0x193>
        uint32_t curr_read = nbytes;
   1669c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1669f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   166a2:	8b 45 10             	mov    0x10(%ebp),%eax
   166a5:	8b 40 30             	mov    0x30(%eax),%eax
   166a8:	89 c2                	mov    %eax,%edx
   166aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166ad:	8b 48 20             	mov    0x20(%eax),%ecx
   166b0:	89 d0                	mov    %edx,%eax
   166b2:	ba 00 00 00 00       	mov    $0x0,%edx
   166b7:	f7 f1                	div    %ecx
   166b9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   166bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166bf:	8b 50 1c             	mov    0x1c(%eax),%edx
   166c2:	8b 45 10             	mov    0x10(%ebp),%eax
   166c5:	8b 40 38             	mov    0x38(%eax),%eax
   166c8:	83 e8 02             	sub    $0x2,%eax
   166cb:	89 c1                	mov    %eax,%ecx
   166cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166d0:	8b 40 10             	mov    0x10(%eax),%eax
   166d3:	0f af c1             	imul   %ecx,%eax
   166d6:	01 d0                	add    %edx,%eax
   166d8:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 如果是整簇, 只读一簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   166db:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   166df:	75 4c                	jne    1672d <fatfs_read+0xe3>
   166e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166e4:	8b 40 20             	mov    0x20(%eax),%eax
   166e7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   166ea:	75 41                	jne    1672d <fatfs_read+0xe3>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   166ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166ef:	8b 40 10             	mov    0x10(%eax),%eax
   166f2:	89 c1                	mov    %eax,%ecx
   166f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
   166f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166fa:	8b 40 2c             	mov    0x2c(%eax),%eax
   166fd:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16703:	51                   	push   %ecx
   16704:	ff 75 08             	pushl  0x8(%ebp)
   16707:	52                   	push   %edx
   16708:	50                   	push   %eax
   16709:	e8 f5 d7 ff ff       	call   13f03 <dev_read>
   1670e:	83 c4 10             	add    $0x10,%esp
   16711:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   16714:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16718:	79 08                	jns    16722 <fatfs_read+0xd8>
                return total_read;
   1671a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1671d:	e9 c8 00 00 00       	jmp    167ea <fatfs_read+0x1a0>
            }

            curr_read = fat->cluster_byte_size;
   16722:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16725:	8b 40 20             	mov    0x20(%eax),%eax
   16728:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   1672b:	eb 7d                	jmp    167aa <fatfs_read+0x160>
        } else {
            // 如果跨簇，只读第一个簇内的一部分
            if (cluster_offset + curr_read > fat->cluster_byte_size) {
   1672d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16730:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16733:	01 c2                	add    %eax,%edx
   16735:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16738:	8b 40 20             	mov    0x20(%eax),%eax
   1673b:	39 c2                	cmp    %eax,%edx
   1673d:	76 0c                	jbe    1674b <fatfs_read+0x101>
                curr_read = fat->cluster_byte_size - cluster_offset;
   1673f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16742:	8b 40 20             	mov    0x20(%eax),%eax
   16745:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16748:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            // 读取整个簇，然后从中拷贝
            fat->curr_sector = -1;
   1674b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1674e:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16755:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16758:	8b 40 10             	mov    0x10(%eax),%eax
   1675b:	89 c3                	mov    %eax,%ebx
   1675d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16760:	8b 48 24             	mov    0x24(%eax),%ecx
   16763:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16766:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16769:	8b 40 2c             	mov    0x2c(%eax),%eax
   1676c:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16772:	53                   	push   %ebx
   16773:	51                   	push   %ecx
   16774:	52                   	push   %edx
   16775:	50                   	push   %eax
   16776:	e8 88 d7 ff ff       	call   13f03 <dev_read>
   1677b:	83 c4 10             	add    $0x10,%esp
   1677e:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   16781:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   16785:	79 05                	jns    1678c <fatfs_read+0x142>
                return total_read;
   16787:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1678a:	eb 5e                	jmp    167ea <fatfs_read+0x1a0>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   1678c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1678f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16792:	8b 4a 24             	mov    0x24(%edx),%ecx
   16795:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16798:	01 ca                	add    %ecx,%edx
   1679a:	83 ec 04             	sub    $0x4,%esp
   1679d:	50                   	push   %eax
   1679e:	52                   	push   %edx
   1679f:	ff 75 08             	pushl  0x8(%ebp)
   167a2:	e8 5c 1b 00 00       	call   18303 <kernel_memcpy>
   167a7:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   167aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   167ad:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   167b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   167b3:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   167b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   167b9:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_read, 0);
   167bc:	6a 00                	push   $0x0
   167be:	ff 75 ec             	pushl  -0x14(%ebp)
   167c1:	ff 75 e8             	pushl  -0x18(%ebp)
   167c4:	ff 75 10             	pushl  0x10(%ebp)
   167c7:	e8 4e f9 ff ff       	call   1611a <move_file_pos>
   167cc:	83 c4 10             	add    $0x10,%esp
   167cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (err < 0) {
   167d2:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   167d6:	79 05                	jns    167dd <fatfs_read+0x193>
            return total_read;
   167d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   167db:	eb 0d                	jmp    167ea <fatfs_read+0x1a0>
    while (nbytes > 0) {
   167dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   167e1:	0f 85 b5 fe ff ff    	jne    1669c <fatfs_read+0x52>
        }
	}

    return total_read;
   167e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   167ea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   167ed:	c9                   	leave  
   167ee:	c3                   	ret    

000167ef <fatfs_write>:

/**
 * @brief 写文件数据
 */
int fatfs_write (char * buf, int size, file_t * file) {
   167ef:	55                   	push   %ebp
   167f0:	89 e5                	mov    %esp,%ebp
   167f2:	53                   	push   %ebx
   167f3:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   167f6:	8b 45 10             	mov    0x10(%ebp),%eax
   167f9:	8b 40 44             	mov    0x44(%eax),%eax
   167fc:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16802:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 如果文件大小不够，则先扩展文件大小
    if (file->pos + size > file->size) {
   16805:	8b 45 10             	mov    0x10(%ebp),%eax
   16808:	8b 50 30             	mov    0x30(%eax),%edx
   1680b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1680e:	01 d0                	add    %edx,%eax
   16810:	89 c2                	mov    %eax,%edx
   16812:	8b 45 10             	mov    0x10(%ebp),%eax
   16815:	8b 40 24             	mov    0x24(%eax),%eax
   16818:	39 c2                	cmp    %eax,%edx
   1681a:	76 3e                	jbe    1685a <fatfs_write+0x6b>
        int inc_size = file->pos + size - file->size;
   1681c:	8b 45 10             	mov    0x10(%ebp),%eax
   1681f:	8b 50 30             	mov    0x30(%eax),%edx
   16822:	8b 45 0c             	mov    0xc(%ebp),%eax
   16825:	01 d0                	add    %edx,%eax
   16827:	89 c2                	mov    %eax,%edx
   16829:	8b 45 10             	mov    0x10(%ebp),%eax
   1682c:	8b 40 24             	mov    0x24(%eax),%eax
   1682f:	29 c2                	sub    %eax,%edx
   16831:	89 d0                	mov    %edx,%eax
   16833:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   16836:	83 ec 08             	sub    $0x8,%esp
   16839:	ff 75 e4             	pushl  -0x1c(%ebp)
   1683c:	ff 75 10             	pushl  0x10(%ebp)
   1683f:	e8 61 f7 ff ff       	call   15fa5 <expand_file>
   16844:	83 c4 10             	add    $0x10,%esp
   16847:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1684a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1684e:	79 0a                	jns    1685a <fatfs_write+0x6b>
            return 0;
   16850:	b8 00 00 00 00       	mov    $0x0,%eax
   16855:	e9 ae 01 00 00       	jmp    16a08 <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   1685a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1685d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16860:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while (nbytes) {
   16867:	e9 8f 01 00 00       	jmp    169fb <fatfs_write+0x20c>
        // 每次写的数据量取决于当前簇中剩余的空间，以及size的量综合
        uint32_t curr_write = nbytes;
   1686c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1686f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   16872:	8b 45 10             	mov    0x10(%ebp),%eax
   16875:	8b 40 30             	mov    0x30(%eax),%eax
   16878:	89 c2                	mov    %eax,%edx
   1687a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1687d:	8b 48 20             	mov    0x20(%eax),%ecx
   16880:	89 d0                	mov    %edx,%eax
   16882:	ba 00 00 00 00       	mov    $0x0,%edx
   16887:	f7 f1                	div    %ecx
   16889:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   1688c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1688f:	8b 50 1c             	mov    0x1c(%eax),%edx
   16892:	8b 45 10             	mov    0x10(%ebp),%eax
   16895:	8b 40 38             	mov    0x38(%eax),%eax
   16898:	83 e8 02             	sub    $0x2,%eax
   1689b:	89 c1                	mov    %eax,%ecx
   1689d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168a0:	8b 40 10             	mov    0x10(%eax),%eax
   168a3:	0f af c1             	imul   %ecx,%eax
   168a6:	01 d0                	add    %edx,%eax
   168a8:	89 45 d8             	mov    %eax,-0x28(%ebp)

        // 如果是整簇, 写整簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   168ab:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   168af:	75 4f                	jne    16900 <fatfs_write+0x111>
   168b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168b4:	8b 40 20             	mov    0x20(%eax),%eax
   168b7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   168ba:	75 44                	jne    16900 <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   168bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168bf:	8b 40 10             	mov    0x10(%eax),%eax
   168c2:	89 c1                	mov    %eax,%ecx
   168c4:	8b 55 d8             	mov    -0x28(%ebp),%edx
   168c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168ca:	8b 40 2c             	mov    0x2c(%eax),%eax
   168cd:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   168d3:	51                   	push   %ecx
   168d4:	ff 75 08             	pushl  0x8(%ebp)
   168d7:	52                   	push   %edx
   168d8:	50                   	push   %eax
   168d9:	e8 71 d6 ff ff       	call   13f4f <dev_write>
   168de:	83 c4 10             	add    $0x10,%esp
   168e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   168e4:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   168e8:	79 08                	jns    168f2 <fatfs_write+0x103>
                return total_write;
   168ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
   168ed:	e9 16 01 00 00       	jmp    16a08 <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   168f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168f5:	8b 40 20             	mov    0x20(%eax),%eax
   168f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   168fb:	e9 b7 00 00 00       	jmp    169b7 <fatfs_write+0x1c8>
        } else {
            // 如果跨簇，只写第一个簇内的一部分
            if (cluster_offset + curr_write > fat->cluster_byte_size) {
   16900:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16903:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16906:	01 c2                	add    %eax,%edx
   16908:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1690b:	8b 40 20             	mov    0x20(%eax),%eax
   1690e:	39 c2                	cmp    %eax,%edx
   16910:	76 0c                	jbe    1691e <fatfs_write+0x12f>
                curr_write = fat->cluster_byte_size - cluster_offset;
   16912:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16915:	8b 40 20             	mov    0x20(%eax),%eax
   16918:	2b 45 dc             	sub    -0x24(%ebp),%eax
   1691b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   1691e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16921:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16928:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1692b:	8b 40 10             	mov    0x10(%eax),%eax
   1692e:	89 c3                	mov    %eax,%ebx
   16930:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16933:	8b 48 24             	mov    0x24(%eax),%ecx
   16936:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16939:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1693c:	8b 40 2c             	mov    0x2c(%eax),%eax
   1693f:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16945:	53                   	push   %ebx
   16946:	51                   	push   %ecx
   16947:	52                   	push   %edx
   16948:	50                   	push   %eax
   16949:	e8 b5 d5 ff ff       	call   13f03 <dev_read>
   1694e:	83 c4 10             	add    $0x10,%esp
   16951:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16954:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16958:	79 08                	jns    16962 <fatfs_write+0x173>
                return total_write;
   1695a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1695d:	e9 a6 00 00 00       	jmp    16a08 <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);        
   16962:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16965:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16968:	8b 4a 24             	mov    0x24(%edx),%ecx
   1696b:	8b 55 dc             	mov    -0x24(%ebp),%edx
   1696e:	01 ca                	add    %ecx,%edx
   16970:	83 ec 04             	sub    $0x4,%esp
   16973:	50                   	push   %eax
   16974:	ff 75 08             	pushl  0x8(%ebp)
   16977:	52                   	push   %edx
   16978:	e8 86 19 00 00       	call   18303 <kernel_memcpy>
   1697d:	83 c4 10             	add    $0x10,%esp
            
            // 写整个簇，然后从中拷贝
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16980:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16983:	8b 40 10             	mov    0x10(%eax),%eax
   16986:	89 c3                	mov    %eax,%ebx
   16988:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1698b:	8b 48 24             	mov    0x24(%eax),%ecx
   1698e:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16991:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16994:	8b 40 2c             	mov    0x2c(%eax),%eax
   16997:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1699d:	53                   	push   %ebx
   1699e:	51                   	push   %ecx
   1699f:	52                   	push   %edx
   169a0:	50                   	push   %eax
   169a1:	e8 a9 d5 ff ff       	call   13f4f <dev_write>
   169a6:	83 c4 10             	add    $0x10,%esp
   169a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   169ac:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   169b0:	79 05                	jns    169b7 <fatfs_write+0x1c8>
                return total_write;
   169b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   169b5:	eb 51                	jmp    16a08 <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   169b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169ba:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   169bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169c0:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   169c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169c6:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 不考虑不截断文件的写入，这样计算文件大小略麻烦
        file->size += curr_write;
   169c9:	8b 45 10             	mov    0x10(%ebp),%eax
   169cc:	8b 50 24             	mov    0x24(%eax),%edx
   169cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   169d2:	01 c2                	add    %eax,%edx
   169d4:	8b 45 10             	mov    0x10(%ebp),%eax
   169d7:	89 50 24             	mov    %edx,0x24(%eax)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_write, 1);
   169da:	6a 01                	push   $0x1
   169dc:	ff 75 ec             	pushl  -0x14(%ebp)
   169df:	ff 75 e8             	pushl  -0x18(%ebp)
   169e2:	ff 75 10             	pushl  0x10(%ebp)
   169e5:	e8 30 f7 ff ff       	call   1611a <move_file_pos>
   169ea:	83 c4 10             	add    $0x10,%esp
   169ed:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (err < 0) {
   169f0:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   169f4:	79 05                	jns    169fb <fatfs_write+0x20c>
            return total_write;
   169f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   169f9:	eb 0d                	jmp    16a08 <fatfs_write+0x219>
	while (nbytes) {
   169fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   169ff:	0f 85 67 fe ff ff    	jne    1686c <fatfs_write+0x7d>
        }
    }

    return total_write;
   16a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16a08:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16a0b:	c9                   	leave  
   16a0c:	c3                   	ret    

00016a0d <fatfs_close>:

/**
 * @brief 关闭文件
 */
void fatfs_close (file_t * file) {
   16a0d:	55                   	push   %ebp
   16a0e:	89 e5                	mov    %esp,%ebp
   16a10:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16a13:	8b 45 08             	mov    0x8(%ebp),%eax
   16a16:	8b 40 40             	mov    0x40(%eax),%eax
   16a19:	85 c0                	test   %eax,%eax
   16a1b:	74 74                	je     16a91 <fatfs_close+0x84>
        return;
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   16a20:	8b 40 44             	mov    0x44(%eax),%eax
   16a23:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16a29:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t * item = read_dir_entry(fat, file->p_index);
   16a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   16a2f:	8b 40 3c             	mov    0x3c(%eax),%eax
   16a32:	83 ec 08             	sub    $0x8,%esp
   16a35:	50                   	push   %eax
   16a36:	ff 75 f4             	pushl  -0xc(%ebp)
   16a39:	e8 3d f4 ff ff       	call   15e7b <read_dir_entry>
   16a3e:	83 c4 10             	add    $0x10,%esp
   16a41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16a44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16a48:	74 4a                	je     16a94 <fatfs_close+0x87>
        return;
    }

    item->DIR_FileSize = file->size;
   16a4a:	8b 45 08             	mov    0x8(%ebp),%eax
   16a4d:	8b 50 24             	mov    0x24(%eax),%edx
   16a50:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a53:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t )(file->sblk >> 16);
   16a56:	8b 45 08             	mov    0x8(%ebp),%eax
   16a59:	8b 40 34             	mov    0x34(%eax),%eax
   16a5c:	c1 f8 10             	sar    $0x10,%eax
   16a5f:	89 c2                	mov    %eax,%edx
   16a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a64:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(file->sblk & 0xFFFF);
   16a68:	8b 45 08             	mov    0x8(%ebp),%eax
   16a6b:	8b 40 34             	mov    0x34(%eax),%eax
   16a6e:	89 c2                	mov    %eax,%edx
   16a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a73:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16a77:	8b 45 08             	mov    0x8(%ebp),%eax
   16a7a:	8b 40 3c             	mov    0x3c(%eax),%eax
   16a7d:	83 ec 04             	sub    $0x4,%esp
   16a80:	50                   	push   %eax
   16a81:	ff 75 f0             	pushl  -0x10(%ebp)
   16a84:	ff 75 f4             	pushl  -0xc(%ebp)
   16a87:	e8 6f f4 ff ff       	call   15efb <write_dir_entry>
   16a8c:	83 c4 10             	add    $0x10,%esp
   16a8f:	eb 04                	jmp    16a95 <fatfs_close+0x88>
        return;
   16a91:	90                   	nop
   16a92:	eb 01                	jmp    16a95 <fatfs_close+0x88>
        return;
   16a94:	90                   	nop
}
   16a95:	c9                   	leave  
   16a96:	c3                   	ret    

00016a97 <fatfs_seek>:

/**
 * @brief 文件读写位置的调整
 */
int fatfs_seek (file_t * file, uint32_t offset, int dir) {
   16a97:	55                   	push   %ebp
   16a98:	89 e5                	mov    %esp,%ebp
   16a9a:	83 ec 28             	sub    $0x28,%esp
     // 只支持基于文件开头的定位
    if (dir != 0) {
   16a9d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16aa1:	74 0a                	je     16aad <fatfs_seek+0x16>
        return -1;
   16aa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16aa8:	e9 c7 00 00 00       	jmp    16b74 <fatfs_seek+0xdd>
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16aad:	8b 45 08             	mov    0x8(%ebp),%eax
   16ab0:	8b 40 44             	mov    0x44(%eax),%eax
   16ab3:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ab9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t curr_cluster = file->sblk;
   16abc:	8b 45 08             	mov    0x8(%ebp),%eax
   16abf:	8b 40 34             	mov    0x34(%eax),%eax
   16ac2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16ac6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16acd:	8b 45 0c             	mov    0xc(%ebp),%eax
   16ad0:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0) {
   16ad3:	eb 7d                	jmp    16b52 <fatfs_seek+0xbb>
        uint32_t c_off = curr_pos % fat->cluster_byte_size;
   16ad5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ad8:	8b 48 20             	mov    0x20(%eax),%ecx
   16adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ade:	ba 00 00 00 00       	mov    $0x0,%edx
   16ae3:	f7 f1                	div    %ecx
   16ae5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16ae8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aeb:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 不超过一簇，直接调整位置，无需跑到下一簇
        if (c_off + curr_move < fat->cluster_byte_size) {
   16aee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16af1:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16af4:	01 c2                	add    %eax,%edx
   16af6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16af9:	8b 40 20             	mov    0x20(%eax),%eax
   16afc:	39 c2                	cmp    %eax,%edx
   16afe:	73 08                	jae    16b08 <fatfs_seek+0x71>
            curr_pos += curr_move;
   16b00:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16b03:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16b06:	eb 54                	jmp    16b5c <fatfs_seek+0xc5>
        }

        // 超过一簇，只在当前簇内移动
        curr_move = fat->cluster_byte_size - c_off;
   16b08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b0b:	8b 40 20             	mov    0x20(%eax),%eax
   16b0e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16b11:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16b14:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16b17:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16b1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16b1d:	29 45 ec             	sub    %eax,-0x14(%ebp)

        // 取下一簇
        curr_cluster = cluster_get_next(fat, curr_cluster);
   16b20:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16b24:	83 ec 08             	sub    $0x8,%esp
   16b27:	50                   	push   %eax
   16b28:	ff 75 e8             	pushl  -0x18(%ebp)
   16b2b:	e8 b4 ed ff ff       	call   158e4 <cluster_get_next>
   16b30:	83 c4 10             	add    $0x10,%esp
   16b33:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(curr_cluster)) {
   16b37:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16b3b:	83 ec 0c             	sub    $0xc,%esp
   16b3e:	50                   	push   %eax
   16b3f:	e8 77 ed ff ff       	call   158bb <cluster_is_valid>
   16b44:	83 c4 10             	add    $0x10,%esp
   16b47:	85 c0                	test   %eax,%eax
   16b49:	75 07                	jne    16b52 <fatfs_seek+0xbb>
            return -1;
   16b4b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b50:	eb 22                	jmp    16b74 <fatfs_seek+0xdd>
    while (offset_to_move > 0) {
   16b52:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16b56:	0f 85 79 ff ff ff    	jne    16ad5 <fatfs_seek+0x3e>
        }
    }

    // 最后记录一下位置
    file->pos = curr_pos;
   16b5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   16b62:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = curr_cluster;
   16b65:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16b69:	8b 45 08             	mov    0x8(%ebp),%eax
   16b6c:	89 50 38             	mov    %edx,0x38(%eax)
    return 0;
   16b6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16b74:	c9                   	leave  
   16b75:	c3                   	ret    

00016b76 <fatfs_stat>:

int fatfs_stat (file_t * file, struct stat *st) {
   16b76:	55                   	push   %ebp
   16b77:	89 e5                	mov    %esp,%ebp
    return -1;
   16b79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16b7e:	5d                   	pop    %ebp
   16b7f:	c3                   	ret    

00016b80 <fatfs_opendir>:

/**
 * @brief 打开目录。只是简单地读取位置重设为0
 */
int fatfs_opendir (struct _fs_t * fs,const char * name, DIR * dir) {
   16b80:	55                   	push   %ebp
   16b81:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16b83:	8b 45 10             	mov    0x10(%ebp),%eax
   16b86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16b8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16b91:	5d                   	pop    %ebp
   16b92:	c3                   	ret    

00016b93 <fatfs_readdir>:

/**
 * @brief 读取一个目录项
 */
int fatfs_readdir (struct _fs_t * fs,DIR* dir, struct dirent * dirent) {
   16b93:	55                   	push   %ebp
   16b94:	89 e5                	mov    %esp,%ebp
   16b96:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16b99:	8b 45 08             	mov    0x8(%ebp),%eax
   16b9c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 做一些简单的判断，检查
    while (dir->index < fat->root_ent_cnt) {
   16ba5:	e9 be 00 00 00       	jmp    16c68 <fatfs_readdir+0xd5>
        diritem_t * item = read_dir_entry(fat, dir->index);
   16baa:	8b 45 0c             	mov    0xc(%ebp),%eax
   16bad:	8b 00                	mov    (%eax),%eax
   16baf:	83 ec 08             	sub    $0x8,%esp
   16bb2:	50                   	push   %eax
   16bb3:	ff 75 f4             	pushl  -0xc(%ebp)
   16bb6:	e8 c0 f2 ff ff       	call   15e7b <read_dir_entry>
   16bbb:	83 c4 10             	add    $0x10,%esp
   16bbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16bc1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16bc5:	75 0a                	jne    16bd1 <fatfs_readdir+0x3e>
            return -1;
   16bc7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bcc:	e9 b4 00 00 00       	jmp    16c85 <fatfs_readdir+0xf2>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16bd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16bd4:	0f b6 00             	movzbl (%eax),%eax
   16bd7:	84 c0                	test   %al,%al
   16bd9:	0f 84 a0 00 00 00    	je     16c7f <fatfs_readdir+0xec>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] != DIRITEM_NAME_FREE) {
   16bdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16be2:	0f b6 00             	movzbl (%eax),%eax
   16be5:	3c e5                	cmp    $0xe5,%al
   16be7:	74 72                	je     16c5b <fatfs_readdir+0xc8>
            file_type_t type = diritem_get_type(item);
   16be9:	83 ec 0c             	sub    $0xc,%esp
   16bec:	ff 75 f0             	pushl  -0x10(%ebp)
   16bef:	e8 43 f2 ff ff       	call   15e37 <diritem_get_type>
   16bf4:	83 c4 10             	add    $0x10,%esp
   16bf7:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16bfa:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16bfe:	74 06                	je     16c06 <fatfs_readdir+0x73>
   16c00:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16c04:	75 55                	jne    16c5b <fatfs_readdir+0xc8>
                dirent->index = dir->index++;
   16c06:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c09:	8b 00                	mov    (%eax),%eax
   16c0b:	8d 48 01             	lea    0x1(%eax),%ecx
   16c0e:	8b 55 0c             	mov    0xc(%ebp),%edx
   16c11:	89 0a                	mov    %ecx,(%edx)
   16c13:	8b 55 10             	mov    0x10(%ebp),%edx
   16c16:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16c18:	83 ec 0c             	sub    $0xc,%esp
   16c1b:	ff 75 f0             	pushl  -0x10(%ebp)
   16c1e:	e8 14 f2 ff ff       	call   15e37 <diritem_get_type>
   16c23:	83 c4 10             	add    $0x10,%esp
   16c26:	89 c2                	mov    %eax,%edx
   16c28:	8b 45 10             	mov    0x10(%ebp),%eax
   16c2b:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16c2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c31:	8b 40 1c             	mov    0x1c(%eax),%eax
   16c34:	89 c2                	mov    %eax,%edx
   16c36:	8b 45 10             	mov    0x10(%ebp),%eax
   16c39:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16c3f:	8b 45 10             	mov    0x10(%ebp),%eax
   16c42:	83 c0 08             	add    $0x8,%eax
   16c45:	83 ec 08             	sub    $0x8,%esp
   16c48:	50                   	push   %eax
   16c49:	ff 75 f0             	pushl  -0x10(%ebp)
   16c4c:	e8 53 f1 ff ff       	call   15da4 <diritem_get_name>
   16c51:	83 c4 10             	add    $0x10,%esp
                return 0;
   16c54:	b8 00 00 00 00       	mov    $0x0,%eax
   16c59:	eb 2a                	jmp    16c85 <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16c5b:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c5e:	8b 00                	mov    (%eax),%eax
   16c60:	8d 50 01             	lea    0x1(%eax),%edx
   16c63:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c66:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16c68:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c6b:	8b 00                	mov    (%eax),%eax
   16c6d:	89 c2                	mov    %eax,%edx
   16c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16c72:	8b 40 14             	mov    0x14(%eax),%eax
   16c75:	39 c2                	cmp    %eax,%edx
   16c77:	0f 82 2d ff ff ff    	jb     16baa <fatfs_readdir+0x17>
   16c7d:	eb 01                	jmp    16c80 <fatfs_readdir+0xed>
            break;
   16c7f:	90                   	nop
    }

    return -1;
   16c80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16c85:	c9                   	leave  
   16c86:	c3                   	ret    

00016c87 <fatfs_closedir>:

/**
 * @brief 关闭文件扫描读取
 */
int fatfs_closedir (struct _fs_t * fs,DIR *dir) {
   16c87:	55                   	push   %ebp
   16c88:	89 e5                	mov    %esp,%ebp
    return 0;
   16c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c8f:	5d                   	pop    %ebp
   16c90:	c3                   	ret    

00016c91 <fatfs_unlink>:

/**
 * @brief 删除文件
 */
int fatfs_unlink (struct _fs_t * fs, const char * path) {
   16c91:	55                   	push   %ebp
   16c92:	89 e5                	mov    %esp,%ebp
   16c94:	83 ec 38             	sub    $0x38,%esp
    fat_t * fat = (fat_t *)fs->data;
   16c97:	8b 45 08             	mov    0x8(%ebp),%eax
   16c9a:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ca0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16ca3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16caa:	e9 b3 00 00 00       	jmp    16d62 <fatfs_unlink+0xd1>
        diritem_t * item = read_dir_entry(fat, i);
   16caf:	83 ec 08             	sub    $0x8,%esp
   16cb2:	ff 75 f4             	pushl  -0xc(%ebp)
   16cb5:	ff 75 f0             	pushl  -0x10(%ebp)
   16cb8:	e8 be f1 ff ff       	call   15e7b <read_dir_entry>
   16cbd:	83 c4 10             	add    $0x10,%esp
   16cc0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16cc3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16cc7:	75 0a                	jne    16cd3 <fatfs_unlink+0x42>
            return -1;
   16cc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16cce:	e9 a8 00 00 00       	jmp    16d7b <fatfs_unlink+0xea>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16cd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16cd6:	0f b6 00             	movzbl (%eax),%eax
   16cd9:	84 c0                	test   %al,%al
   16cdb:	0f 84 94 00 00 00    	je     16d75 <fatfs_unlink+0xe4>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   16ce1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16ce4:	0f b6 00             	movzbl (%eax),%eax
   16ce7:	3c e5                	cmp    $0xe5,%al
   16ce9:	74 72                	je     16d5d <fatfs_unlink+0xcc>
            continue;
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   16ceb:	83 ec 08             	sub    $0x8,%esp
   16cee:	ff 75 0c             	pushl  0xc(%ebp)
   16cf1:	ff 75 ec             	pushl  -0x14(%ebp)
   16cf4:	e8 e6 ef ff ff       	call   15cdf <diritem_name_match>
   16cf9:	83 c4 10             	add    $0x10,%esp
   16cfc:	85 c0                	test   %eax,%eax
   16cfe:	74 5e                	je     16d5e <fatfs_unlink+0xcd>
            // 释放簇
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16d00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d03:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16d07:	0f b7 c0             	movzwl %ax,%eax
   16d0a:	c1 e0 10             	shl    $0x10,%eax
   16d0d:	89 c2                	mov    %eax,%edx
   16d0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d12:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16d16:	0f b7 c0             	movzwl %ax,%eax
   16d19:	09 d0                	or     %edx,%eax
   16d1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16d1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16d21:	0f b7 c0             	movzwl %ax,%eax
   16d24:	83 ec 08             	sub    $0x8,%esp
   16d27:	50                   	push   %eax
   16d28:	ff 75 f0             	pushl  -0x10(%ebp)
   16d2b:	e8 a1 ed ff ff       	call   15ad1 <cluster_free_chain>
   16d30:	83 c4 10             	add    $0x10,%esp

            // 写diritem项
            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16d33:	83 ec 04             	sub    $0x4,%esp
   16d36:	6a 20                	push   $0x20
   16d38:	6a 00                	push   $0x0
   16d3a:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16d3d:	50                   	push   %eax
   16d3e:	e8 0f 16 00 00       	call   18352 <kernel_memset>
   16d43:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16d46:	83 ec 04             	sub    $0x4,%esp
   16d49:	ff 75 f4             	pushl  -0xc(%ebp)
   16d4c:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16d4f:	50                   	push   %eax
   16d50:	ff 75 f0             	pushl  -0x10(%ebp)
   16d53:	e8 a3 f1 ff ff       	call   15efb <write_dir_entry>
   16d58:	83 c4 10             	add    $0x10,%esp
   16d5b:	eb 1e                	jmp    16d7b <fatfs_unlink+0xea>
            continue;
   16d5d:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16d5e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d65:	8b 50 14             	mov    0x14(%eax),%edx
   16d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16d6b:	39 c2                	cmp    %eax,%edx
   16d6d:	0f 87 3c ff ff ff    	ja     16caf <fatfs_unlink+0x1e>
   16d73:	eb 01                	jmp    16d76 <fatfs_unlink+0xe5>
            break;
   16d75:	90                   	nop
        }
    }

    return -1;
   16d76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16d7b:	c9                   	leave  
   16d7c:	c3                   	ret    

00016d7d <file_alloc>:
static mutex_t file_alloc_mutex;                // 访问file_table的互斥信号量

/**
 * @brief 分配一个文件描述符
 */
file_t * file_alloc (void) {
   16d7d:	55                   	push   %ebp
   16d7e:	89 e5                	mov    %esp,%ebp
   16d80:	83 ec 18             	sub    $0x18,%esp
    file_t * file = (file_t *)0;
   16d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16d8a:	83 ec 0c             	sub    $0xc,%esp
   16d8d:	68 a0 c8 05 00       	push   $0x5c8a0
   16d92:	e8 9e 0e 00 00       	call   17c35 <mutex_lock>
   16d97:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16d9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16da1:	eb 47                	jmp    16dea <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16da3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16da6:	89 d0                	mov    %edx,%eax
   16da8:	c1 e0 03             	shl    $0x3,%eax
   16dab:	01 d0                	add    %edx,%eax
   16dad:	c1 e0 03             	shl    $0x3,%eax
   16db0:	05 a0 88 03 00       	add    $0x388a0,%eax
   16db5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) {
   16db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16dbb:	8b 40 28             	mov    0x28(%eax),%eax
   16dbe:	85 c0                	test   %eax,%eax
   16dc0:	75 24                	jne    16de6 <file_alloc+0x69>
			kernel_memset(p_file, 0, sizeof(file_t));
   16dc2:	83 ec 04             	sub    $0x4,%esp
   16dc5:	6a 48                	push   $0x48
   16dc7:	6a 00                	push   $0x0
   16dc9:	ff 75 ec             	pushl  -0x14(%ebp)
   16dcc:	e8 81 15 00 00       	call   18352 <kernel_memset>
   16dd1:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16dd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16dd7:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			file = p_file;
   16dde:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16de1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16de4:	eb 0d                	jmp    16df3 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16de6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16dea:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16df1:	7e b0                	jle    16da3 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16df3:	83 ec 0c             	sub    $0xc,%esp
   16df6:	68 a0 c8 05 00       	push   $0x5c8a0
   16dfb:	e8 cc 0e 00 00       	call   17ccc <mutex_unlock>
   16e00:	83 c4 10             	add    $0x10,%esp
    return file;
   16e03:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16e06:	c9                   	leave  
   16e07:	c3                   	ret    

00016e08 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free (file_t * file) {
   16e08:	55                   	push   %ebp
   16e09:	89 e5                	mov    %esp,%ebp
   16e0b:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16e0e:	83 ec 0c             	sub    $0xc,%esp
   16e11:	68 a0 c8 05 00       	push   $0x5c8a0
   16e16:	e8 1a 0e 00 00       	call   17c35 <mutex_lock>
   16e1b:	83 c4 10             	add    $0x10,%esp
    if (file->ref) {
   16e1e:	8b 45 08             	mov    0x8(%ebp),%eax
   16e21:	8b 40 28             	mov    0x28(%eax),%eax
   16e24:	85 c0                	test   %eax,%eax
   16e26:	74 0f                	je     16e37 <file_free+0x2f>
        file->ref--;
   16e28:	8b 45 08             	mov    0x8(%ebp),%eax
   16e2b:	8b 40 28             	mov    0x28(%eax),%eax
   16e2e:	8d 50 ff             	lea    -0x1(%eax),%edx
   16e31:	8b 45 08             	mov    0x8(%ebp),%eax
   16e34:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16e37:	83 ec 0c             	sub    $0xc,%esp
   16e3a:	68 a0 c8 05 00       	push   $0x5c8a0
   16e3f:	e8 88 0e 00 00       	call   17ccc <mutex_unlock>
   16e44:	83 c4 10             	add    $0x10,%esp
}
   16e47:	90                   	nop
   16e48:	c9                   	leave  
   16e49:	c3                   	ret    

00016e4a <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref (file_t * file) {
   16e4a:	55                   	push   %ebp
   16e4b:	89 e5                	mov    %esp,%ebp
   16e4d:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16e50:	83 ec 0c             	sub    $0xc,%esp
   16e53:	68 a0 c8 05 00       	push   $0x5c8a0
   16e58:	e8 d8 0d 00 00       	call   17c35 <mutex_lock>
   16e5d:	83 c4 10             	add    $0x10,%esp
	file->ref++;
   16e60:	8b 45 08             	mov    0x8(%ebp),%eax
   16e63:	8b 40 28             	mov    0x28(%eax),%eax
   16e66:	8d 50 01             	lea    0x1(%eax),%edx
   16e69:	8b 45 08             	mov    0x8(%ebp),%eax
   16e6c:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   16e6f:	83 ec 0c             	sub    $0xc,%esp
   16e72:	68 a0 c8 05 00       	push   $0x5c8a0
   16e77:	e8 50 0e 00 00       	call   17ccc <mutex_unlock>
   16e7c:	83 c4 10             	add    $0x10,%esp
}
   16e7f:	90                   	nop
   16e80:	c9                   	leave  
   16e81:	c3                   	ret    

00016e82 <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init (void) {
   16e82:	55                   	push   %ebp
   16e83:	89 e5                	mov    %esp,%ebp
   16e85:	83 ec 08             	sub    $0x8,%esp
	// 文件描述符表初始化
	kernel_memset(&file_table, 0, sizeof(file_table));
   16e88:	83 ec 04             	sub    $0x4,%esp
   16e8b:	68 00 40 02 00       	push   $0x24000
   16e90:	6a 00                	push   $0x0
   16e92:	68 a0 88 03 00       	push   $0x388a0
   16e97:	e8 b6 14 00 00       	call   18352 <kernel_memset>
   16e9c:	83 c4 10             	add    $0x10,%esp
	mutex_init(&file_alloc_mutex);
   16e9f:	83 ec 0c             	sub    $0xc,%esp
   16ea2:	68 a0 c8 05 00       	push   $0x5c8a0
   16ea7:	e8 5b 0d 00 00       	call   17c07 <mutex_init>
   16eac:	83 c4 10             	add    $0x10,%esp
}
   16eaf:	90                   	nop
   16eb0:	c9                   	leave  
   16eb1:	c3                   	ret    

00016eb2 <list_node_next>:
static inline list_node_t * list_node_next(list_node_t *node) {
   16eb2:	55                   	push   %ebp
   16eb3:	89 e5                	mov    %esp,%ebp
    return node->next;
   16eb5:	8b 45 08             	mov    0x8(%ebp),%eax
   16eb8:	8b 40 04             	mov    0x4(%eax),%eax
}
   16ebb:	5d                   	pop    %ebp
   16ebc:	c3                   	ret    

00016ebd <list_first>:
static inline list_node_t* list_first(list_t *list) {
   16ebd:	55                   	push   %ebp
   16ebe:	89 e5                	mov    %esp,%ebp
    return list->first;
   16ec0:	8b 45 08             	mov    0x8(%ebp),%eax
   16ec3:	8b 00                	mov    (%eax),%eax
}
   16ec5:	5d                   	pop    %ebp
   16ec6:	c3                   	ret    

00016ec7 <is_fd_bad>:
extern fs_op_t fatfs_op;

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad (int file) {
   16ec7:	55                   	push   %ebp
   16ec8:	89 e5                	mov    %esp,%ebp
	if ((file < 0) && (file >= TASK_OFILE_NR)) {
   16eca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16ece:	79 0d                	jns    16edd <is_fd_bad+0x16>
   16ed0:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   16ed4:	7e 07                	jle    16edd <is_fd_bad+0x16>
		return 1;
   16ed6:	b8 01 00 00 00       	mov    $0x1,%eax
   16edb:	eb 05                	jmp    16ee2 <is_fd_bad+0x1b>
	}

	return 0;
   16edd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16ee2:	5d                   	pop    %ebp
   16ee3:	c3                   	ret    

00016ee4 <get_fs_op>:

/**
 * @brief 获取指定文件系统的操作接口
 */
static fs_op_t * get_fs_op (fs_type_t type, int major) {
   16ee4:	55                   	push   %ebp
   16ee5:	89 e5                	mov    %esp,%ebp
	switch (type) {
   16ee7:	8b 45 08             	mov    0x8(%ebp),%eax
   16eea:	85 c0                	test   %eax,%eax
   16eec:	74 07                	je     16ef5 <get_fs_op+0x11>
   16eee:	83 f8 01             	cmp    $0x1,%eax
   16ef1:	74 09                	je     16efc <get_fs_op+0x18>
   16ef3:	eb 0e                	jmp    16f03 <get_fs_op+0x1f>
	case FS_FAT16:
		return &fatfs_op;
   16ef5:	b8 40 a1 01 00       	mov    $0x1a140,%eax
   16efa:	eb 0c                	jmp    16f08 <get_fs_op+0x24>
	case FS_DEVFS:
		return &devfs_op;
   16efc:	b8 00 a1 01 00       	mov    $0x1a100,%eax
   16f01:	eb 05                	jmp    16f08 <get_fs_op+0x24>
	default:
		return (fs_op_t *)0;
   16f03:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
   16f08:	5d                   	pop    %ebp
   16f09:	c3                   	ret    

00016f0a <mount>:

/**
 * @brief 挂载文件系统
 */
static fs_t * mount (fs_type_t type, char * mount_point, int dev_major, int dev_minor) {
   16f0a:	55                   	push   %ebp
   16f0b:	89 e5                	mov    %esp,%ebp
   16f0d:	83 ec 28             	sub    $0x28,%esp
	fs_t * fs = (fs_t *)0;
   16f10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   16f17:	83 ec 04             	sub    $0x4,%esp
   16f1a:	ff 75 10             	pushl  0x10(%ebp)
   16f1d:	ff 75 0c             	pushl  0xc(%ebp)
   16f20:	68 04 9b 01 00       	push   $0x19b04
   16f25:	e8 d2 19 00 00       	call   188fc <log_printf>
   16f2a:	83 c4 10             	add    $0x10,%esp

	// 遍历，查找是否已经有挂载
 	list_node_t * curr = list_first(&mounted_list);
   16f2d:	83 ec 0c             	sub    $0xc,%esp
   16f30:	68 c0 c8 05 00       	push   $0x5c8c0
   16f35:	e8 83 ff ff ff       	call   16ebd <list_first>
   16f3a:	83 c4 10             	add    $0x10,%esp
   16f3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   16f40:	eb 59                	jmp    16f9b <mount+0x91>
		fs_t * fs = list_node_parent(curr, fs_t, node);
   16f42:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16f46:	74 0a                	je     16f52 <mount+0x48>
   16f48:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16f4b:	2d 10 02 00 00       	sub    $0x210,%eax
   16f50:	eb 05                	jmp    16f57 <mount+0x4d>
   16f52:	b8 00 00 00 00       	mov    $0x0,%eax
   16f57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0) {
   16f5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16f5d:	83 ec 04             	sub    $0x4,%esp
   16f60:	68 00 02 00 00       	push   $0x200
   16f65:	ff 75 0c             	pushl  0xc(%ebp)
   16f68:	50                   	push   %eax
   16f69:	e8 17 13 00 00       	call   18285 <kernel_strncmp>
   16f6e:	83 c4 10             	add    $0x10,%esp
   16f71:	85 c0                	test   %eax,%eax
   16f73:	75 15                	jne    16f8a <mount+0x80>
			log_printf("fs alreay mounted.");
   16f75:	83 ec 0c             	sub    $0xc,%esp
   16f78:	68 29 9b 01 00       	push   $0x19b29
   16f7d:	e8 7a 19 00 00       	call   188fc <log_printf>
   16f82:	83 c4 10             	add    $0x10,%esp
			goto mount_failed;
   16f85:	e9 21 01 00 00       	jmp    170ab <mount+0x1a1>
		}
		curr = list_node_next(curr);
   16f8a:	83 ec 0c             	sub    $0xc,%esp
   16f8d:	ff 75 f0             	pushl  -0x10(%ebp)
   16f90:	e8 1d ff ff ff       	call   16eb2 <list_node_next>
   16f95:	83 c4 10             	add    $0x10,%esp
   16f98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   16f9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16f9f:	75 a1                	jne    16f42 <mount+0x38>
	}

	// 分配新的fs结构
	list_node_t * free_node = list_remove_first(&free_list);
   16fa1:	83 ec 0c             	sub    $0xc,%esp
   16fa4:	68 cc c8 05 00       	push   $0x5c8cc
   16fa9:	e8 22 18 00 00       	call   187d0 <list_remove_first>
   16fae:	83 c4 10             	add    $0x10,%esp
   16fb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!free_node) {
   16fb4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16fb8:	75 15                	jne    16fcf <mount+0xc5>
		log_printf("no free fs, mount failed.");
   16fba:	83 ec 0c             	sub    $0xc,%esp
   16fbd:	68 3c 9b 01 00       	push   $0x19b3c
   16fc2:	e8 35 19 00 00       	call   188fc <log_printf>
   16fc7:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   16fca:	e9 dc 00 00 00       	jmp    170ab <mount+0x1a1>
	}
	fs = list_node_parent(free_node, fs_t, node);
   16fcf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16fd3:	74 0a                	je     16fdf <mount+0xd5>
   16fd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16fd8:	2d 10 02 00 00       	sub    $0x210,%eax
   16fdd:	eb 05                	jmp    16fe4 <mount+0xda>
   16fdf:	b8 00 00 00 00       	mov    $0x0,%eax
   16fe4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 检查挂载的文件系统类型：不检查实际
	fs_op_t * op = get_fs_op(type, dev_major);
   16fe7:	83 ec 08             	sub    $0x8,%esp
   16fea:	ff 75 10             	pushl  0x10(%ebp)
   16fed:	ff 75 08             	pushl  0x8(%ebp)
   16ff0:	e8 ef fe ff ff       	call   16ee4 <get_fs_op>
   16ff5:	83 c4 10             	add    $0x10,%esp
   16ff8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!op) {
   16ffb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   16fff:	75 18                	jne    17019 <mount+0x10f>
		log_printf("unsupported fs type: %d", type);
   17001:	83 ec 08             	sub    $0x8,%esp
   17004:	ff 75 08             	pushl  0x8(%ebp)
   17007:	68 56 9b 01 00       	push   $0x19b56
   1700c:	e8 eb 18 00 00       	call   188fc <log_printf>
   17011:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   17014:	e9 92 00 00 00       	jmp    170ab <mount+0x1a1>
	}

	// 给定数据一些缺省的值
	kernel_memset(fs, 0, sizeof(fs_t));
   17019:	83 ec 04             	sub    $0x4,%esp
   1701c:	68 60 02 00 00       	push   $0x260
   17021:	6a 00                	push   $0x0
   17023:	ff 75 f4             	pushl  -0xc(%ebp)
   17026:	e8 27 13 00 00       	call   18352 <kernel_memset>
   1702b:	83 c4 10             	add    $0x10,%esp
	kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   1702e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17031:	83 ec 04             	sub    $0x4,%esp
   17034:	68 00 02 00 00       	push   $0x200
   17039:	ff 75 0c             	pushl  0xc(%ebp)
   1703c:	50                   	push   %eax
   1703d:	e8 98 11 00 00       	call   181da <kernel_strncpy>
   17042:	83 c4 10             	add    $0x10,%esp
	fs->op = op;
   17045:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17048:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1704b:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
	fs->mutex = (mutex_t *)0;
   17051:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17054:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   1705b:	00 00 00 

	// 挂载文件系统
	if (op->mount(fs, dev_major, dev_minor) < 0) {
   1705e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17061:	8b 00                	mov    (%eax),%eax
   17063:	83 ec 04             	sub    $0x4,%esp
   17066:	ff 75 14             	pushl  0x14(%ebp)
   17069:	ff 75 10             	pushl  0x10(%ebp)
   1706c:	ff 75 f4             	pushl  -0xc(%ebp)
   1706f:	ff d0                	call   *%eax
   17071:	83 c4 10             	add    $0x10,%esp
   17074:	85 c0                	test   %eax,%eax
   17076:	79 15                	jns    1708d <mount+0x183>
		log_printf("mount fs %s failed", mount_point);
   17078:	83 ec 08             	sub    $0x8,%esp
   1707b:	ff 75 0c             	pushl  0xc(%ebp)
   1707e:	68 6e 9b 01 00       	push   $0x19b6e
   17083:	e8 74 18 00 00       	call   188fc <log_printf>
   17088:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   1708b:	eb 1e                	jmp    170ab <mount+0x1a1>
	}
	list_insert_last(&mounted_list, &fs->node);
   1708d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17090:	05 10 02 00 00       	add    $0x210,%eax
   17095:	83 ec 08             	sub    $0x8,%esp
   17098:	50                   	push   %eax
   17099:	68 c0 c8 05 00       	push   $0x5c8c0
   1709e:	e8 c9 16 00 00       	call   1876c <list_insert_last>
   170a3:	83 c4 10             	add    $0x10,%esp
	return fs;
   170a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170a9:	eb 24                	jmp    170cf <mount+0x1c5>
mount_failed:
	if (fs) {
   170ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   170af:	74 19                	je     170ca <mount+0x1c0>
		// 回收fs
		list_insert_first(&free_list, &fs->node);
   170b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170b4:	05 10 02 00 00       	add    $0x210,%eax
   170b9:	83 ec 08             	sub    $0x8,%esp
   170bc:	50                   	push   %eax
   170bd:	68 cc c8 05 00       	push   $0x5c8cc
   170c2:	e8 46 16 00 00       	call   1870d <list_insert_first>
   170c7:	83 c4 10             	add    $0x10,%esp
	}
	return (fs_t *)0;
   170ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
   170cf:	c9                   	leave  
   170d0:	c3                   	ret    

000170d1 <mount_list_init>:

/**
 * @brief 初始化挂载列表
 */
static void mount_list_init (void) {
   170d1:	55                   	push   %ebp
   170d2:	89 e5                	mov    %esp,%ebp
   170d4:	83 ec 18             	sub    $0x18,%esp
	list_init(&free_list);
   170d7:	83 ec 0c             	sub    $0xc,%esp
   170da:	68 cc c8 05 00       	push   $0x5c8cc
   170df:	e8 04 16 00 00       	call   186e8 <list_init>
   170e4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   170e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   170ee:	eb 28                	jmp    17118 <mount_list_init+0x47>
		list_insert_first(&free_list, &fs_tbl[i].node);
   170f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170f3:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   170f9:	05 10 02 00 00       	add    $0x210,%eax
   170fe:	05 e0 c8 05 00       	add    $0x5c8e0,%eax
   17103:	83 ec 08             	sub    $0x8,%esp
   17106:	50                   	push   %eax
   17107:	68 cc c8 05 00       	push   $0x5c8cc
   1710c:	e8 fc 15 00 00       	call   1870d <list_insert_first>
   17111:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17114:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17118:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   1711c:	7e d2                	jle    170f0 <mount_list_init+0x1f>
	}
	list_init(&mounted_list);
   1711e:	83 ec 0c             	sub    $0xc,%esp
   17121:	68 c0 c8 05 00       	push   $0x5c8c0
   17126:	e8 bd 15 00 00       	call   186e8 <list_init>
   1712b:	83 c4 10             	add    $0x10,%esp
}
   1712e:	90                   	nop
   1712f:	c9                   	leave  
   17130:	c3                   	ret    

00017131 <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init (void) {
   17131:	55                   	push   %ebp
   17132:	89 e5                	mov    %esp,%ebp
   17134:	83 ec 18             	sub    $0x18,%esp
	mount_list_init();
   17137:	e8 95 ff ff ff       	call   170d1 <mount_list_init>
    file_table_init();
   1713c:	e8 41 fd ff ff       	call   16e82 <file_table_init>

	// 磁盘检查
	disk_init();
   17141:	e8 f9 d4 ff ff       	call   1463f <disk_init>

	// 挂载设备文件系统，待后续完成。挂载点名称可随意
	fs_t * fs = mount(FS_DEVFS, "/dev", 0, 0);
   17146:	6a 00                	push   $0x0
   17148:	6a 00                	push   $0x0
   1714a:	68 81 9b 01 00       	push   $0x19b81
   1714f:	6a 01                	push   $0x1
   17151:	e8 b4 fd ff ff       	call   16f0a <mount>
   17156:	83 c4 10             	add    $0x10,%esp
   17159:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ASSERT(fs != (fs_t *)0);
   1715c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17160:	75 1c                	jne    1717e <fs_init+0x4d>
   17162:	68 86 9b 01 00       	push   $0x19b86
   17167:	68 8c 9c 01 00       	push   $0x19c8c
   1716c:	68 86 00 00 00       	push   $0x86
   17171:	68 98 9b 01 00       	push   $0x19b98
   17176:	e8 24 15 00 00       	call   1869f <panic>
   1717b:	83 c4 10             	add    $0x10,%esp

	// 挂载根文件系统
	root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   1717e:	68 b1 00 00 00       	push   $0xb1
   17183:	6a 02                	push   $0x2
   17185:	68 e1 9b 01 00       	push   $0x19be1
   1718a:	6a 00                	push   $0x0
   1718c:	e8 79 fd ff ff       	call   16f0a <mount>
   17191:	83 c4 10             	add    $0x10,%esp
   17194:	a3 a0 e0 05 00       	mov    %eax,0x5e0a0
	ASSERT(root_fs != (fs_t *)0);
   17199:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   1719e:	85 c0                	test   %eax,%eax
   171a0:	75 1c                	jne    171be <fs_init+0x8d>
   171a2:	68 e7 9b 01 00       	push   $0x19be7
   171a7:	68 8c 9c 01 00       	push   $0x19c8c
   171ac:	68 8a 00 00 00       	push   $0x8a
   171b1:	68 98 9b 01 00       	push   $0x19b98
   171b6:	e8 e4 14 00 00       	call   1869f <panic>
   171bb:	83 c4 10             	add    $0x10,%esp
}
   171be:	90                   	nop
   171bf:	c9                   	leave  
   171c0:	c3                   	ret    

000171c1 <path_to_num>:

/**
 * @brief 转换目录为数字
 */
int path_to_num (const char * path, int * num) {
   171c1:	55                   	push   %ebp
   171c2:	89 e5                	mov    %esp,%ebp
   171c4:	83 ec 10             	sub    $0x10,%esp
	int n = 0;
   171c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	const char * c = path;
   171ce:	8b 45 08             	mov    0x8(%ebp),%eax
   171d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*c && *c != '/') {
   171d4:	eb 23                	jmp    171f9 <path_to_num+0x38>
		n = n * 10 + *c - '0';
   171d6:	8b 55 fc             	mov    -0x4(%ebp),%edx
   171d9:	89 d0                	mov    %edx,%eax
   171db:	c1 e0 02             	shl    $0x2,%eax
   171de:	01 d0                	add    %edx,%eax
   171e0:	01 c0                	add    %eax,%eax
   171e2:	89 c2                	mov    %eax,%edx
   171e4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   171e7:	0f b6 00             	movzbl (%eax),%eax
   171ea:	0f be c0             	movsbl %al,%eax
   171ed:	01 d0                	add    %edx,%eax
   171ef:	83 e8 30             	sub    $0x30,%eax
   171f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
		c++;
   171f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c && *c != '/') {
   171f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   171fc:	0f b6 00             	movzbl (%eax),%eax
   171ff:	84 c0                	test   %al,%al
   17201:	74 0a                	je     1720d <path_to_num+0x4c>
   17203:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17206:	0f b6 00             	movzbl (%eax),%eax
   17209:	3c 2f                	cmp    $0x2f,%al
   1720b:	75 c9                	jne    171d6 <path_to_num+0x15>
	}
	*num = n;
   1720d:	8b 45 0c             	mov    0xc(%ebp),%eax
   17210:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17213:	89 10                	mov    %edx,(%eax)
	return 0;
   17215:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1721a:	c9                   	leave  
   1721b:	c3                   	ret    

0001721c <path_begin_with>:

/**
 * @brief 判断路径是否以xx开头
 */
int path_begin_with (const char * path, const char * str) {
   1721c:	55                   	push   %ebp
   1721d:	89 e5                	mov    %esp,%ebp
   1721f:	83 ec 10             	sub    $0x10,%esp
	const char * s1 = path, * s2 = str;
   17222:	8b 45 08             	mov    0x8(%ebp),%eax
   17225:	89 45 fc             	mov    %eax,-0x4(%ebp)
   17228:	8b 45 0c             	mov    0xc(%ebp),%eax
   1722b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   1722e:	eb 08                	jmp    17238 <path_begin_with+0x1c>
		s1++;
   17230:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		s2++;
   17234:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   17238:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1723b:	0f b6 00             	movzbl (%eax),%eax
   1723e:	84 c0                	test   %al,%al
   17240:	74 1a                	je     1725c <path_begin_with+0x40>
   17242:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17245:	0f b6 00             	movzbl (%eax),%eax
   17248:	84 c0                	test   %al,%al
   1724a:	74 10                	je     1725c <path_begin_with+0x40>
   1724c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1724f:	0f b6 10             	movzbl (%eax),%edx
   17252:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17255:	0f b6 00             	movzbl (%eax),%eax
   17258:	38 c2                	cmp    %al,%dl
   1725a:	74 d4                	je     17230 <path_begin_with+0x14>
	}

	return *s2 == '\0';
   1725c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1725f:	0f b6 00             	movzbl (%eax),%eax
   17262:	84 c0                	test   %al,%al
   17264:	0f 94 c0             	sete   %al
   17267:	0f b6 c0             	movzbl %al,%eax
}
   1726a:	c9                   	leave  
   1726b:	c3                   	ret    

0001726c <path_next_child>:

/**
 * @brief 获取下一级子目录
 */
const char * path_next_child (const char * path) {
   1726c:	55                   	push   %ebp
   1726d:	89 e5                	mov    %esp,%ebp
   1726f:	83 ec 10             	sub    $0x10,%esp
   const char * c = path;
   17272:	8b 45 08             	mov    0x8(%ebp),%eax
   17275:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/')) {}
   17278:	90                   	nop
   17279:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1727c:	0f b6 00             	movzbl (%eax),%eax
   1727f:	84 c0                	test   %al,%al
   17281:	74 10                	je     17293 <path_next_child+0x27>
   17283:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17286:	8d 50 01             	lea    0x1(%eax),%edx
   17289:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1728c:	0f b6 00             	movzbl (%eax),%eax
   1728f:	3c 2f                	cmp    $0x2f,%al
   17291:	74 e6                	je     17279 <path_next_child+0xd>
    while (*c && (*c++ != '/')) {}
   17293:	90                   	nop
   17294:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17297:	0f b6 00             	movzbl (%eax),%eax
   1729a:	84 c0                	test   %al,%al
   1729c:	74 10                	je     172ae <path_next_child+0x42>
   1729e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172a1:	8d 50 01             	lea    0x1(%eax),%edx
   172a4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   172a7:	0f b6 00             	movzbl (%eax),%eax
   172aa:	3c 2f                	cmp    $0x2f,%al
   172ac:	75 e6                	jne    17294 <path_next_child+0x28>
    return *c ? c : (const char *)0;
   172ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172b1:	0f b6 00             	movzbl (%eax),%eax
   172b4:	84 c0                	test   %al,%al
   172b6:	74 05                	je     172bd <path_next_child+0x51>
   172b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   172bb:	eb 05                	jmp    172c2 <path_next_child+0x56>
   172bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   172c2:	c9                   	leave  
   172c3:	c3                   	ret    

000172c4 <fs_protect>:

static void fs_protect (fs_t * fs) {
   172c4:	55                   	push   %ebp
   172c5:	89 e5                	mov    %esp,%ebp
   172c7:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   172ca:	8b 45 08             	mov    0x8(%ebp),%eax
   172cd:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   172d3:	85 c0                	test   %eax,%eax
   172d5:	74 15                	je     172ec <fs_protect+0x28>
		mutex_lock(fs->mutex);
   172d7:	8b 45 08             	mov    0x8(%ebp),%eax
   172da:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   172e0:	83 ec 0c             	sub    $0xc,%esp
   172e3:	50                   	push   %eax
   172e4:	e8 4c 09 00 00       	call   17c35 <mutex_lock>
   172e9:	83 c4 10             	add    $0x10,%esp
	}
}
   172ec:	90                   	nop
   172ed:	c9                   	leave  
   172ee:	c3                   	ret    

000172ef <fs_unprotect>:

static void fs_unprotect (fs_t * fs) {
   172ef:	55                   	push   %ebp
   172f0:	89 e5                	mov    %esp,%ebp
   172f2:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   172f5:	8b 45 08             	mov    0x8(%ebp),%eax
   172f8:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   172fe:	85 c0                	test   %eax,%eax
   17300:	74 15                	je     17317 <fs_unprotect+0x28>
		mutex_unlock(fs->mutex);
   17302:	8b 45 08             	mov    0x8(%ebp),%eax
   17305:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1730b:	83 ec 0c             	sub    $0xc,%esp
   1730e:	50                   	push   %eax
   1730f:	e8 b8 09 00 00       	call   17ccc <mutex_unlock>
   17314:	83 c4 10             	add    $0x10,%esp
	}
}
   17317:	90                   	nop
   17318:	c9                   	leave  
   17319:	c3                   	ret    

0001731a <sys_open>:

/**
 * 打开文件
 */
int sys_open(const char *name, int flags, ...) {
   1731a:	55                   	push   %ebp
   1731b:	89 e5                	mov    %esp,%ebp
   1731d:	83 ec 28             	sub    $0x28,%esp
	// 分配文件描述符链接
	file_t * file = file_alloc();
   17320:	e8 58 fa ff ff       	call   16d7d <file_alloc>
   17325:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!file) {
   17328:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1732c:	75 0a                	jne    17338 <sys_open+0x1e>
		return -1;
   1732e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17333:	e9 62 01 00 00       	jmp    1749a <sys_open+0x180>
	}

	int fd = task_alloc_fd(file);
   17338:	83 ec 0c             	sub    $0xc,%esp
   1733b:	ff 75 ec             	pushl  -0x14(%ebp)
   1733e:	e8 05 a4 ff ff       	call   11748 <task_alloc_fd>
   17343:	83 c4 10             	add    $0x10,%esp
   17346:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (fd < 0) {
   17349:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1734d:	0f 88 1f 01 00 00    	js     17472 <sys_open+0x158>
		goto sys_open_failed;
	}

	// 检查名称是否以挂载点开头，如果没有，则认为name在根目录下
	// 即只允许根目录下的遍历
	fs_t * fs = (fs_t *)0;
   17353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	list_node_t * node = list_first(&mounted_list);
   1735a:	83 ec 0c             	sub    $0xc,%esp
   1735d:	68 c0 c8 05 00       	push   $0x5c8c0
   17362:	e8 56 fb ff ff       	call   16ebd <list_first>
   17367:	83 c4 10             	add    $0x10,%esp
   1736a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   1736d:	eb 47                	jmp    173b6 <sys_open+0x9c>
		fs_t * curr = list_node_parent(node, fs_t, node);
   1736f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17373:	74 0a                	je     1737f <sys_open+0x65>
   17375:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17378:	2d 10 02 00 00       	sub    $0x210,%eax
   1737d:	eb 05                	jmp    17384 <sys_open+0x6a>
   1737f:	b8 00 00 00 00       	mov    $0x0,%eax
   17384:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (path_begin_with(name, curr->mount_point)) {
   17387:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1738a:	83 ec 08             	sub    $0x8,%esp
   1738d:	50                   	push   %eax
   1738e:	ff 75 08             	pushl  0x8(%ebp)
   17391:	e8 86 fe ff ff       	call   1721c <path_begin_with>
   17396:	83 c4 10             	add    $0x10,%esp
   17399:	85 c0                	test   %eax,%eax
   1739b:	74 08                	je     173a5 <sys_open+0x8b>
			fs = curr;
   1739d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   173a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
   173a3:	eb 17                	jmp    173bc <sys_open+0xa2>
		}
		node = list_node_next(node);
   173a5:	83 ec 0c             	sub    $0xc,%esp
   173a8:	ff 75 f0             	pushl  -0x10(%ebp)
   173ab:	e8 02 fb ff ff       	call   16eb2 <list_node_next>
   173b0:	83 c4 10             	add    $0x10,%esp
   173b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   173b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   173ba:	75 b3                	jne    1736f <sys_open+0x55>
	}

	if (fs) {
   173bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   173c0:	74 13                	je     173d5 <sys_open+0xbb>
		name = path_next_child(name);
   173c2:	83 ec 0c             	sub    $0xc,%esp
   173c5:	ff 75 08             	pushl  0x8(%ebp)
   173c8:	e8 9f fe ff ff       	call   1726c <path_next_child>
   173cd:	83 c4 10             	add    $0x10,%esp
   173d0:	89 45 08             	mov    %eax,0x8(%ebp)
   173d3:	eb 08                	jmp    173dd <sys_open+0xc3>
	} else {
		fs = root_fs;
   173d5:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   173da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	file->mode = flags;
   173dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   173e0:	8b 55 0c             	mov    0xc(%ebp),%edx
   173e3:	89 50 40             	mov    %edx,0x40(%eax)
	file->fs = fs;
   173e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   173e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   173ec:	89 50 44             	mov    %edx,0x44(%eax)
	kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   173ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   173f2:	83 ec 04             	sub    $0x4,%esp
   173f5:	6a 20                	push   $0x20
   173f7:	ff 75 08             	pushl  0x8(%ebp)
   173fa:	50                   	push   %eax
   173fb:	e8 da 0d 00 00       	call   181da <kernel_strncpy>
   17400:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17403:	83 ec 0c             	sub    $0xc,%esp
   17406:	ff 75 f4             	pushl  -0xc(%ebp)
   17409:	e8 b6 fe ff ff       	call   172c4 <fs_protect>
   1740e:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->open(fs, name, file);
   17411:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17414:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1741a:	8b 40 08             	mov    0x8(%eax),%eax
   1741d:	83 ec 04             	sub    $0x4,%esp
   17420:	ff 75 ec             	pushl  -0x14(%ebp)
   17423:	ff 75 08             	pushl  0x8(%ebp)
   17426:	ff 75 f4             	pushl  -0xc(%ebp)
   17429:	ff d0                	call   *%eax
   1742b:	83 c4 10             	add    $0x10,%esp
   1742e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (err < 0) {
   17431:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   17435:	79 28                	jns    1745f <sys_open+0x145>
		fs_unprotect(fs);
   17437:	83 ec 0c             	sub    $0xc,%esp
   1743a:	ff 75 f4             	pushl  -0xc(%ebp)
   1743d:	e8 ad fe ff ff       	call   172ef <fs_unprotect>
   17442:	83 c4 10             	add    $0x10,%esp

		log_printf("open %s failed.", name);
   17445:	83 ec 08             	sub    $0x8,%esp
   17448:	ff 75 08             	pushl  0x8(%ebp)
   1744b:	68 fc 9b 01 00       	push   $0x19bfc
   17450:	e8 a7 14 00 00       	call   188fc <log_printf>
   17455:	83 c4 10             	add    $0x10,%esp
		return -1;
   17458:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1745d:	eb 3b                	jmp    1749a <sys_open+0x180>
	}
	fs_unprotect(fs);
   1745f:	83 ec 0c             	sub    $0xc,%esp
   17462:	ff 75 f4             	pushl  -0xc(%ebp)
   17465:	e8 85 fe ff ff       	call   172ef <fs_unprotect>
   1746a:	83 c4 10             	add    $0x10,%esp

	return fd;
   1746d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17470:	eb 28                	jmp    1749a <sys_open+0x180>
		goto sys_open_failed;
   17472:	90                   	nop

sys_open_failed:
	file_free(file);
   17473:	83 ec 0c             	sub    $0xc,%esp
   17476:	ff 75 ec             	pushl  -0x14(%ebp)
   17479:	e8 8a f9 ff ff       	call   16e08 <file_free>
   1747e:	83 c4 10             	add    $0x10,%esp
	if (fd >= 0) {
   17481:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17485:	78 0e                	js     17495 <sys_open+0x17b>
		task_remove_fd(fd);
   17487:	83 ec 0c             	sub    $0xc,%esp
   1748a:	ff 75 e8             	pushl  -0x18(%ebp)
   1748d:	e8 09 a3 ff ff       	call   1179b <task_remove_fd>
   17492:	83 c4 10             	add    $0x10,%esp
	}
	return -1;
   17495:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1749a:	c9                   	leave  
   1749b:	c3                   	ret    

0001749c <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup (int file) {
   1749c:	55                   	push   %ebp
   1749d:	89 e5                	mov    %esp,%ebp
   1749f:	83 ec 18             	sub    $0x18,%esp
	// 超出进程所能打开的全部，退出
	if (is_fd_bad(file)) {
   174a2:	ff 75 08             	pushl  0x8(%ebp)
   174a5:	e8 1d fa ff ff       	call   16ec7 <is_fd_bad>
   174aa:	83 c4 04             	add    $0x4,%esp
   174ad:	85 c0                	test   %eax,%eax
   174af:	74 1a                	je     174cb <sys_dup+0x2f>
        log_printf("file(%d) is not valid.", file);
   174b1:	83 ec 08             	sub    $0x8,%esp
   174b4:	ff 75 08             	pushl  0x8(%ebp)
   174b7:	68 0c 9c 01 00       	push   $0x19c0c
   174bc:	e8 3b 14 00 00       	call   188fc <log_printf>
   174c1:	83 c4 10             	add    $0x10,%esp
		return -1;
   174c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   174c9:	eb 6d                	jmp    17538 <sys_dup+0x9c>
	}

	file_t * p_file = task_file(file);
   174cb:	83 ec 0c             	sub    $0xc,%esp
   174ce:	ff 75 08             	pushl  0x8(%ebp)
   174d1:	e8 40 a2 ff ff       	call   11716 <task_file>
   174d6:	83 c4 10             	add    $0x10,%esp
   174d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   174dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   174e0:	75 17                	jne    174f9 <sys_dup+0x5d>
		log_printf("file not opened");
   174e2:	83 ec 0c             	sub    $0xc,%esp
   174e5:	68 23 9c 01 00       	push   $0x19c23
   174ea:	e8 0d 14 00 00       	call   188fc <log_printf>
   174ef:	83 c4 10             	add    $0x10,%esp
		return -1;
   174f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   174f7:	eb 3f                	jmp    17538 <sys_dup+0x9c>
	}

	int fd = task_alloc_fd(p_file);	// 新fd指向同一描述符
   174f9:	83 ec 0c             	sub    $0xc,%esp
   174fc:	ff 75 f4             	pushl  -0xc(%ebp)
   174ff:	e8 44 a2 ff ff       	call   11748 <task_alloc_fd>
   17504:	83 c4 10             	add    $0x10,%esp
   17507:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (fd >= 0) {
   1750a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1750e:	78 13                	js     17523 <sys_dup+0x87>
		file_inc_ref(p_file);
   17510:	83 ec 0c             	sub    $0xc,%esp
   17513:	ff 75 f4             	pushl  -0xc(%ebp)
   17516:	e8 2f f9 ff ff       	call   16e4a <file_inc_ref>
   1751b:	83 c4 10             	add    $0x10,%esp
		return fd;
   1751e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17521:	eb 15                	jmp    17538 <sys_dup+0x9c>
	}

	log_printf("No task file avaliable");
   17523:	83 ec 0c             	sub    $0xc,%esp
   17526:	68 33 9c 01 00       	push   $0x19c33
   1752b:	e8 cc 13 00 00       	call   188fc <log_printf>
   17530:	83 c4 10             	add    $0x10,%esp
    return -1;
   17533:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17538:	c9                   	leave  
   17539:	c3                   	ret    

0001753a <sys_ioctl>:

/**
 * @brief IO设备控制
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   1753a:	55                   	push   %ebp
   1753b:	89 e5                	mov    %esp,%ebp
   1753d:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(fd)) {
   17540:	ff 75 08             	pushl  0x8(%ebp)
   17543:	e8 7f f9 ff ff       	call   16ec7 <is_fd_bad>
   17548:	83 c4 04             	add    $0x4,%esp
   1754b:	85 c0                	test   %eax,%eax
   1754d:	74 07                	je     17556 <sys_ioctl+0x1c>
		return 0;
   1754f:	b8 00 00 00 00       	mov    $0x0,%eax
   17554:	eb 66                	jmp    175bc <sys_ioctl+0x82>
	}

	file_t * pfile = task_file(fd);
   17556:	83 ec 0c             	sub    $0xc,%esp
   17559:	ff 75 08             	pushl  0x8(%ebp)
   1755c:	e8 b5 a1 ff ff       	call   11716 <task_file>
   17561:	83 c4 10             	add    $0x10,%esp
   17564:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17567:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1756b:	75 07                	jne    17574 <sys_ioctl+0x3a>
		return 0;
   1756d:	b8 00 00 00 00       	mov    $0x0,%eax
   17572:	eb 48                	jmp    175bc <sys_ioctl+0x82>
	}

	fs_t * fs = pfile->fs;
   17574:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17577:	8b 40 44             	mov    0x44(%eax),%eax
   1757a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   1757d:	83 ec 0c             	sub    $0xc,%esp
   17580:	ff 75 f0             	pushl  -0x10(%ebp)
   17583:	e8 3c fd ff ff       	call   172c4 <fs_protect>
   17588:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->ioctl(pfile, cmd, arg0, arg1);
   1758b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1758e:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17594:	8b 40 20             	mov    0x20(%eax),%eax
   17597:	ff 75 14             	pushl  0x14(%ebp)
   1759a:	ff 75 10             	pushl  0x10(%ebp)
   1759d:	ff 75 0c             	pushl  0xc(%ebp)
   175a0:	ff 75 f4             	pushl  -0xc(%ebp)
   175a3:	ff d0                	call   *%eax
   175a5:	83 c4 10             	add    $0x10,%esp
   175a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   175ab:	83 ec 0c             	sub    $0xc,%esp
   175ae:	ff 75 f0             	pushl  -0x10(%ebp)
   175b1:	e8 39 fd ff ff       	call   172ef <fs_unprotect>
   175b6:	83 c4 10             	add    $0x10,%esp
	return err;
   175b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   175bc:	c9                   	leave  
   175bd:	c3                   	ret    

000175be <sys_read>:

/**
 * 读取文件api
 */
int sys_read(int file, char *ptr, int len) {
   175be:	55                   	push   %ebp
   175bf:	89 e5                	mov    %esp,%ebp
   175c1:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len) {
   175c4:	ff 75 08             	pushl  0x8(%ebp)
   175c7:	e8 fb f8 ff ff       	call   16ec7 <is_fd_bad>
   175cc:	83 c4 04             	add    $0x4,%esp
   175cf:	85 c0                	test   %eax,%eax
   175d1:	75 0c                	jne    175df <sys_read+0x21>
   175d3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   175d7:	74 06                	je     175df <sys_read+0x21>
   175d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   175dd:	75 0a                	jne    175e9 <sys_read+0x2b>
		return 0;
   175df:	b8 00 00 00 00       	mov    $0x0,%eax
   175e4:	e9 98 00 00 00       	jmp    17681 <sys_read+0xc3>
	}

	file_t * p_file = task_file(file);
   175e9:	83 ec 0c             	sub    $0xc,%esp
   175ec:	ff 75 08             	pushl  0x8(%ebp)
   175ef:	e8 22 a1 ff ff       	call   11716 <task_file>
   175f4:	83 c4 10             	add    $0x10,%esp
   175f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   175fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   175fe:	75 17                	jne    17617 <sys_read+0x59>
		log_printf("file not opened");
   17600:	83 ec 0c             	sub    $0xc,%esp
   17603:	68 23 9c 01 00       	push   $0x19c23
   17608:	e8 ef 12 00 00       	call   188fc <log_printf>
   1760d:	83 c4 10             	add    $0x10,%esp
		return -1;
   17610:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17615:	eb 6a                	jmp    17681 <sys_read+0xc3>
	}

	if (p_file->mode == O_WRONLY) {
   17617:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1761a:	8b 40 40             	mov    0x40(%eax),%eax
   1761d:	83 f8 01             	cmp    $0x1,%eax
   17620:	75 17                	jne    17639 <sys_read+0x7b>
		log_printf("file is write only");
   17622:	83 ec 0c             	sub    $0xc,%esp
   17625:	68 4a 9c 01 00       	push   $0x19c4a
   1762a:	e8 cd 12 00 00       	call   188fc <log_printf>
   1762f:	83 c4 10             	add    $0x10,%esp
		return -1;
   17632:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17637:	eb 48                	jmp    17681 <sys_read+0xc3>
	}

	// 读取文件
	fs_t * fs = p_file->fs;
   17639:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1763c:	8b 40 44             	mov    0x44(%eax),%eax
   1763f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17642:	83 ec 0c             	sub    $0xc,%esp
   17645:	ff 75 f0             	pushl  -0x10(%ebp)
   17648:	e8 77 fc ff ff       	call   172c4 <fs_protect>
   1764d:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->read(ptr, len, p_file);
   17650:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17653:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17659:	8b 40 0c             	mov    0xc(%eax),%eax
   1765c:	83 ec 04             	sub    $0x4,%esp
   1765f:	ff 75 f4             	pushl  -0xc(%ebp)
   17662:	ff 75 10             	pushl  0x10(%ebp)
   17665:	ff 75 0c             	pushl  0xc(%ebp)
   17668:	ff d0                	call   *%eax
   1766a:	83 c4 10             	add    $0x10,%esp
   1766d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17670:	83 ec 0c             	sub    $0xc,%esp
   17673:	ff 75 f0             	pushl  -0x10(%ebp)
   17676:	e8 74 fc ff ff       	call   172ef <fs_unprotect>
   1767b:	83 c4 10             	add    $0x10,%esp
	return err;
   1767e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17681:	c9                   	leave  
   17682:	c3                   	ret    

00017683 <sys_Write>:

/**
 * 写文件
 */
int sys_Write(int file, char *ptr, int len) {
   17683:	55                   	push   %ebp
   17684:	89 e5                	mov    %esp,%ebp
   17686:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file) || !ptr || !len) {
   17689:	ff 75 08             	pushl  0x8(%ebp)
   1768c:	e8 36 f8 ff ff       	call   16ec7 <is_fd_bad>
   17691:	83 c4 04             	add    $0x4,%esp
   17694:	85 c0                	test   %eax,%eax
   17696:	75 0c                	jne    176a4 <sys_Write+0x21>
   17698:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1769c:	74 06                	je     176a4 <sys_Write+0x21>
   1769e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   176a2:	75 0a                	jne    176ae <sys_Write+0x2b>
		return 0;
   176a4:	b8 00 00 00 00       	mov    $0x0,%eax
   176a9:	e9 97 00 00 00       	jmp    17745 <sys_Write+0xc2>
	}

	file_t * p_file = task_file(file);
   176ae:	83 ec 0c             	sub    $0xc,%esp
   176b1:	ff 75 08             	pushl  0x8(%ebp)
   176b4:	e8 5d a0 ff ff       	call   11716 <task_file>
   176b9:	83 c4 10             	add    $0x10,%esp
   176bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   176bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   176c3:	75 17                	jne    176dc <sys_Write+0x59>
		log_printf("file not opened");
   176c5:	83 ec 0c             	sub    $0xc,%esp
   176c8:	68 23 9c 01 00       	push   $0x19c23
   176cd:	e8 2a 12 00 00       	call   188fc <log_printf>
   176d2:	83 c4 10             	add    $0x10,%esp
		return -1;
   176d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176da:	eb 69                	jmp    17745 <sys_Write+0xc2>
	}

	if (p_file->mode == O_RDONLY) {
   176dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176df:	8b 40 40             	mov    0x40(%eax),%eax
   176e2:	85 c0                	test   %eax,%eax
   176e4:	75 17                	jne    176fd <sys_Write+0x7a>
		log_printf("file is write only");
   176e6:	83 ec 0c             	sub    $0xc,%esp
   176e9:	68 4a 9c 01 00       	push   $0x19c4a
   176ee:	e8 09 12 00 00       	call   188fc <log_printf>
   176f3:	83 c4 10             	add    $0x10,%esp
		return -1;
   176f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176fb:	eb 48                	jmp    17745 <sys_Write+0xc2>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   176fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17700:	8b 40 44             	mov    0x44(%eax),%eax
   17703:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17706:	83 ec 0c             	sub    $0xc,%esp
   17709:	ff 75 f0             	pushl  -0x10(%ebp)
   1770c:	e8 b3 fb ff ff       	call   172c4 <fs_protect>
   17711:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->write(ptr, len, p_file);
   17714:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17717:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1771d:	8b 40 10             	mov    0x10(%eax),%eax
   17720:	83 ec 04             	sub    $0x4,%esp
   17723:	ff 75 f4             	pushl  -0xc(%ebp)
   17726:	ff 75 10             	pushl  0x10(%ebp)
   17729:	ff 75 0c             	pushl  0xc(%ebp)
   1772c:	ff d0                	call   *%eax
   1772e:	83 c4 10             	add    $0x10,%esp
   17731:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17734:	83 ec 0c             	sub    $0xc,%esp
   17737:	ff 75 f0             	pushl  -0x10(%ebp)
   1773a:	e8 b0 fb ff ff       	call   172ef <fs_unprotect>
   1773f:	83 c4 10             	add    $0x10,%esp
	return err;
   17742:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17745:	c9                   	leave  
   17746:	c3                   	ret    

00017747 <sys_lseek>:

/**
 * 文件访问位置定位
 */
int sys_lseek(int file, int ptr, int dir) {
   17747:	55                   	push   %ebp
   17748:	89 e5                	mov    %esp,%ebp
   1774a:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   1774d:	ff 75 08             	pushl  0x8(%ebp)
   17750:	e8 72 f7 ff ff       	call   16ec7 <is_fd_bad>
   17755:	83 c4 04             	add    $0x4,%esp
   17758:	85 c0                	test   %eax,%eax
   1775a:	74 07                	je     17763 <sys_lseek+0x1c>
		return -1;
   1775c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17761:	eb 77                	jmp    177da <sys_lseek+0x93>
	}

	file_t * p_file = task_file(file);
   17763:	83 ec 0c             	sub    $0xc,%esp
   17766:	ff 75 08             	pushl  0x8(%ebp)
   17769:	e8 a8 9f ff ff       	call   11716 <task_file>
   1776e:	83 c4 10             	add    $0x10,%esp
   17771:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17774:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17778:	75 17                	jne    17791 <sys_lseek+0x4a>
		log_printf("file not opened");
   1777a:	83 ec 0c             	sub    $0xc,%esp
   1777d:	68 23 9c 01 00       	push   $0x19c23
   17782:	e8 75 11 00 00       	call   188fc <log_printf>
   17787:	83 c4 10             	add    $0x10,%esp
		return -1;
   1778a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1778f:	eb 49                	jmp    177da <sys_lseek+0x93>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   17791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17794:	8b 40 44             	mov    0x44(%eax),%eax
   17797:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   1779a:	83 ec 0c             	sub    $0xc,%esp
   1779d:	ff 75 f0             	pushl  -0x10(%ebp)
   177a0:	e8 1f fb ff ff       	call   172c4 <fs_protect>
   177a5:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->seek(p_file, ptr, dir);
   177a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177ab:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   177b1:	8b 40 18             	mov    0x18(%eax),%eax
   177b4:	8b 55 0c             	mov    0xc(%ebp),%edx
   177b7:	83 ec 04             	sub    $0x4,%esp
   177ba:	ff 75 10             	pushl  0x10(%ebp)
   177bd:	52                   	push   %edx
   177be:	ff 75 f4             	pushl  -0xc(%ebp)
   177c1:	ff d0                	call   *%eax
   177c3:	83 c4 10             	add    $0x10,%esp
   177c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   177c9:	83 ec 0c             	sub    $0xc,%esp
   177cc:	ff 75 f0             	pushl  -0x10(%ebp)
   177cf:	e8 1b fb ff ff       	call   172ef <fs_unprotect>
   177d4:	83 c4 10             	add    $0x10,%esp
	return err;
   177d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   177da:	c9                   	leave  
   177db:	c3                   	ret    

000177dc <sys_close>:

/**
 * 关闭文件
 */
int sys_close(int file) {
   177dc:	55                   	push   %ebp
   177dd:	89 e5                	mov    %esp,%ebp
   177df:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   177e2:	ff 75 08             	pushl  0x8(%ebp)
   177e5:	e8 dd f6 ff ff       	call   16ec7 <is_fd_bad>
   177ea:	83 c4 04             	add    $0x4,%esp
   177ed:	85 c0                	test   %eax,%eax
   177ef:	74 1a                	je     1780b <sys_close+0x2f>
		log_printf("file error");
   177f1:	83 ec 0c             	sub    $0xc,%esp
   177f4:	68 5d 9c 01 00       	push   $0x19c5d
   177f9:	e8 fe 10 00 00       	call   188fc <log_printf>
   177fe:	83 c4 10             	add    $0x10,%esp
		return -1;
   17801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17806:	e9 cb 00 00 00       	jmp    178d6 <sys_close+0xfa>
	}

	file_t * p_file = task_file(file);
   1780b:	83 ec 0c             	sub    $0xc,%esp
   1780e:	ff 75 08             	pushl  0x8(%ebp)
   17811:	e8 00 9f ff ff       	call   11716 <task_file>
   17816:	83 c4 10             	add    $0x10,%esp
   17819:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   1781c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17820:	75 1d                	jne    1783f <sys_close+0x63>
		log_printf("file not opened. %d", file);
   17822:	83 ec 08             	sub    $0x8,%esp
   17825:	ff 75 08             	pushl  0x8(%ebp)
   17828:	68 68 9c 01 00       	push   $0x19c68
   1782d:	e8 ca 10 00 00       	call   188fc <log_printf>
   17832:	83 c4 10             	add    $0x10,%esp
		return -1;
   17835:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1783a:	e9 97 00 00 00       	jmp    178d6 <sys_close+0xfa>
	}

	ASSERT(p_file->ref > 0);
   1783f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17842:	8b 40 28             	mov    0x28(%eax),%eax
   17845:	85 c0                	test   %eax,%eax
   17847:	7f 1c                	jg     17865 <sys_close+0x89>
   17849:	68 7c 9c 01 00       	push   $0x19c7c
   1784e:	68 94 9c 01 00       	push   $0x19c94
   17853:	68 85 01 00 00       	push   $0x185
   17858:	68 98 9b 01 00       	push   $0x19b98
   1785d:	e8 3d 0e 00 00       	call   1869f <panic>
   17862:	83 c4 10             	add    $0x10,%esp

	if (p_file->ref-- == 1) {
   17865:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17868:	8b 40 28             	mov    0x28(%eax),%eax
   1786b:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1786e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17871:	89 4a 28             	mov    %ecx,0x28(%edx)
   17874:	83 f8 01             	cmp    $0x1,%eax
   17877:	75 4a                	jne    178c3 <sys_close+0xe7>
		fs_t * fs = p_file->fs;
   17879:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1787c:	8b 40 44             	mov    0x44(%eax),%eax
   1787f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		fs_protect(fs);
   17882:	83 ec 0c             	sub    $0xc,%esp
   17885:	ff 75 f0             	pushl  -0x10(%ebp)
   17888:	e8 37 fa ff ff       	call   172c4 <fs_protect>
   1788d:	83 c4 10             	add    $0x10,%esp
		fs->op->close(p_file);
   17890:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17893:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17899:	8b 40 14             	mov    0x14(%eax),%eax
   1789c:	83 ec 0c             	sub    $0xc,%esp
   1789f:	ff 75 f4             	pushl  -0xc(%ebp)
   178a2:	ff d0                	call   *%eax
   178a4:	83 c4 10             	add    $0x10,%esp
		fs_unprotect(fs);
   178a7:	83 ec 0c             	sub    $0xc,%esp
   178aa:	ff 75 f0             	pushl  -0x10(%ebp)
   178ad:	e8 3d fa ff ff       	call   172ef <fs_unprotect>
   178b2:	83 c4 10             	add    $0x10,%esp
	    file_free(p_file);
   178b5:	83 ec 0c             	sub    $0xc,%esp
   178b8:	ff 75 f4             	pushl  -0xc(%ebp)
   178bb:	e8 48 f5 ff ff       	call   16e08 <file_free>
   178c0:	83 c4 10             	add    $0x10,%esp
	}

	task_remove_fd(file);
   178c3:	83 ec 0c             	sub    $0xc,%esp
   178c6:	ff 75 08             	pushl  0x8(%ebp)
   178c9:	e8 cd 9e ff ff       	call   1179b <task_remove_fd>
   178ce:	83 c4 10             	add    $0x10,%esp
	return 0;
   178d1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   178d6:	c9                   	leave  
   178d7:	c3                   	ret    

000178d8 <sys_isatty>:


/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file) {
   178d8:	55                   	push   %ebp
   178d9:	89 e5                	mov    %esp,%ebp
   178db:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   178de:	ff 75 08             	pushl  0x8(%ebp)
   178e1:	e8 e1 f5 ff ff       	call   16ec7 <is_fd_bad>
   178e6:	83 c4 04             	add    $0x4,%esp
   178e9:	85 c0                	test   %eax,%eax
   178eb:	74 07                	je     178f4 <sys_isatty+0x1c>
		return 0;
   178ed:	b8 00 00 00 00       	mov    $0x0,%eax
   178f2:	eb 2d                	jmp    17921 <sys_isatty+0x49>
	}

	file_t * pfile = task_file(file);
   178f4:	83 ec 0c             	sub    $0xc,%esp
   178f7:	ff 75 08             	pushl  0x8(%ebp)
   178fa:	e8 17 9e ff ff       	call   11716 <task_file>
   178ff:	83 c4 10             	add    $0x10,%esp
   17902:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17905:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17909:	75 07                	jne    17912 <sys_isatty+0x3a>
		return 0;
   1790b:	b8 00 00 00 00       	mov    $0x0,%eax
   17910:	eb 0f                	jmp    17921 <sys_isatty+0x49>
	}

	return pfile->type == FILE_TTY;
   17912:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17915:	8b 40 20             	mov    0x20(%eax),%eax
   17918:	83 f8 01             	cmp    $0x1,%eax
   1791b:	0f 94 c0             	sete   %al
   1791e:	0f b6 c0             	movzbl %al,%eax
}
   17921:	c9                   	leave  
   17922:	c3                   	ret    

00017923 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st) {
   17923:	55                   	push   %ebp
   17924:	89 e5                	mov    %esp,%ebp
   17926:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17929:	ff 75 08             	pushl  0x8(%ebp)
   1792c:	e8 96 f5 ff ff       	call   16ec7 <is_fd_bad>
   17931:	83 c4 04             	add    $0x4,%esp
   17934:	85 c0                	test   %eax,%eax
   17936:	74 07                	je     1793f <sys_fstat+0x1c>
		return -1;
   17938:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1793d:	eb 75                	jmp    179b4 <sys_fstat+0x91>
	}

	file_t * p_file = task_file(file);
   1793f:	83 ec 0c             	sub    $0xc,%esp
   17942:	ff 75 08             	pushl  0x8(%ebp)
   17945:	e8 cc 9d ff ff       	call   11716 <task_file>
   1794a:	83 c4 10             	add    $0x10,%esp
   1794d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17950:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17954:	75 07                	jne    1795d <sys_fstat+0x3a>
		return -1;
   17956:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1795b:	eb 57                	jmp    179b4 <sys_fstat+0x91>
	}

	fs_t * fs = p_file->fs;
   1795d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17960:	8b 40 44             	mov    0x44(%eax),%eax
   17963:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   17966:	83 ec 04             	sub    $0x4,%esp
   17969:	6a 48                	push   $0x48
   1796b:	6a 00                	push   $0x0
   1796d:	ff 75 0c             	pushl  0xc(%ebp)
   17970:	e8 dd 09 00 00       	call   18352 <kernel_memset>
   17975:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17978:	83 ec 0c             	sub    $0xc,%esp
   1797b:	ff 75 f0             	pushl  -0x10(%ebp)
   1797e:	e8 41 f9 ff ff       	call   172c4 <fs_protect>
   17983:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->stat(p_file, st);
   17986:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17989:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1798f:	8b 40 1c             	mov    0x1c(%eax),%eax
   17992:	83 ec 08             	sub    $0x8,%esp
   17995:	ff 75 0c             	pushl  0xc(%ebp)
   17998:	ff 75 f4             	pushl  -0xc(%ebp)
   1799b:	ff d0                	call   *%eax
   1799d:	83 c4 10             	add    $0x10,%esp
   179a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   179a3:	83 ec 0c             	sub    $0xc,%esp
   179a6:	ff 75 f0             	pushl  -0x10(%ebp)
   179a9:	e8 41 f9 ff ff       	call   172ef <fs_unprotect>
   179ae:	83 c4 10             	add    $0x10,%esp
	return err;
   179b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   179b4:	c9                   	leave  
   179b5:	c3                   	ret    

000179b6 <sys_opendir>:

int sys_opendir(const char * name, DIR * dir) {
   179b6:	55                   	push   %ebp
   179b7:	89 e5                	mov    %esp,%ebp
   179b9:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   179bc:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   179c1:	83 ec 0c             	sub    $0xc,%esp
   179c4:	50                   	push   %eax
   179c5:	e8 fa f8 ff ff       	call   172c4 <fs_protect>
   179ca:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->opendir(root_fs, name, dir);
   179cd:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   179d2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179d8:	8b 40 24             	mov    0x24(%eax),%eax
   179db:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   179e1:	83 ec 04             	sub    $0x4,%esp
   179e4:	ff 75 0c             	pushl  0xc(%ebp)
   179e7:	ff 75 08             	pushl  0x8(%ebp)
   179ea:	52                   	push   %edx
   179eb:	ff d0                	call   *%eax
   179ed:	83 c4 10             	add    $0x10,%esp
   179f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   179f3:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   179f8:	83 ec 0c             	sub    $0xc,%esp
   179fb:	50                   	push   %eax
   179fc:	e8 ee f8 ff ff       	call   172ef <fs_unprotect>
   17a01:	83 c4 10             	add    $0x10,%esp
	return err;
   17a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a07:	c9                   	leave  
   17a08:	c3                   	ret    

00017a09 <sys_readdir>:

int sys_readdir(DIR* dir, struct dirent * dirent) {
   17a09:	55                   	push   %ebp
   17a0a:	89 e5                	mov    %esp,%ebp
   17a0c:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17a0f:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a14:	83 ec 0c             	sub    $0xc,%esp
   17a17:	50                   	push   %eax
   17a18:	e8 a7 f8 ff ff       	call   172c4 <fs_protect>
   17a1d:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->readdir(root_fs, dir, dirent);
   17a20:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a25:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a2b:	8b 40 28             	mov    0x28(%eax),%eax
   17a2e:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17a34:	83 ec 04             	sub    $0x4,%esp
   17a37:	ff 75 0c             	pushl  0xc(%ebp)
   17a3a:	ff 75 08             	pushl  0x8(%ebp)
   17a3d:	52                   	push   %edx
   17a3e:	ff d0                	call   *%eax
   17a40:	83 c4 10             	add    $0x10,%esp
   17a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17a46:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a4b:	83 ec 0c             	sub    $0xc,%esp
   17a4e:	50                   	push   %eax
   17a4f:	e8 9b f8 ff ff       	call   172ef <fs_unprotect>
   17a54:	83 c4 10             	add    $0x10,%esp
	return err;
   17a57:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17a5a:	c9                   	leave  
   17a5b:	c3                   	ret    

00017a5c <sys_closedir>:

int sys_closedir(DIR *dir) {
   17a5c:	55                   	push   %ebp
   17a5d:	89 e5                	mov    %esp,%ebp
   17a5f:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17a62:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a67:	83 ec 0c             	sub    $0xc,%esp
   17a6a:	50                   	push   %eax
   17a6b:	e8 54 f8 ff ff       	call   172c4 <fs_protect>
   17a70:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->closedir(root_fs, dir);
   17a73:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a78:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a7e:	8b 40 2c             	mov    0x2c(%eax),%eax
   17a81:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17a87:	83 ec 08             	sub    $0x8,%esp
   17a8a:	ff 75 08             	pushl  0x8(%ebp)
   17a8d:	52                   	push   %edx
   17a8e:	ff d0                	call   *%eax
   17a90:	83 c4 10             	add    $0x10,%esp
   17a93:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17a96:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a9b:	83 ec 0c             	sub    $0xc,%esp
   17a9e:	50                   	push   %eax
   17a9f:	e8 4b f8 ff ff       	call   172ef <fs_unprotect>
   17aa4:	83 c4 10             	add    $0x10,%esp
	return err;
   17aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17aaa:	c9                   	leave  
   17aab:	c3                   	ret    

00017aac <sys_unlink>:

int sys_unlink (const char * path) {
   17aac:	55                   	push   %ebp
   17aad:	89 e5                	mov    %esp,%ebp
   17aaf:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17ab2:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17ab7:	83 ec 0c             	sub    $0xc,%esp
   17aba:	50                   	push   %eax
   17abb:	e8 04 f8 ff ff       	call   172c4 <fs_protect>
   17ac0:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->unlink(root_fs, path);
   17ac3:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17ac8:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ace:	8b 40 30             	mov    0x30(%eax),%eax
   17ad1:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17ad7:	83 ec 08             	sub    $0x8,%esp
   17ada:	ff 75 08             	pushl  0x8(%ebp)
   17add:	52                   	push   %edx
   17ade:	ff d0                	call   *%eax
   17ae0:	83 c4 10             	add    $0x10,%esp
   17ae3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17ae6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17aeb:	83 ec 0c             	sub    $0xc,%esp
   17aee:	50                   	push   %eax
   17aef:	e8 fb f7 ff ff       	call   172ef <fs_unprotect>
   17af4:	83 c4 10             	add    $0x10,%esp
	return err;
   17af7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17afa:	c9                   	leave  
   17afb:	c3                   	ret    

00017afc <kernel_init>:
static boot_info_t * init_boot_info;        // 启动信息

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   17afc:	55                   	push   %ebp
   17afd:	89 e5                	mov    %esp,%ebp
   17aff:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   17b02:	8b 45 08             	mov    0x8(%ebp),%eax
   17b05:	a3 a4 e0 05 00       	mov    %eax,0x5e0a4

    // 初始化CPU，再重新加载
    cpu_init();
   17b0a:	e8 3a ac ff ff       	call   12749 <cpu_init>
    irq_init();
   17b0f:	e8 ed b2 ff ff       	call   12e01 <irq_init>
    log_init();
   17b14:	e8 b4 0d 00 00       	call   188cd <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   17b19:	83 ec 0c             	sub    $0xc,%esp
   17b1c:	ff 75 08             	pushl  0x8(%ebp)
   17b1f:	e8 01 92 ff ff       	call   10d25 <memory_init>
   17b24:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17b27:	e8 05 f6 ff ff       	call   17131 <fs_init>

    time_init();
   17b2c:	e8 5c d5 ff ff       	call   1508d <time_init>

    task_manager_init();
   17b31:	e8 f3 99 ff ff       	call   11529 <task_manager_init>
}
   17b36:	90                   	nop
   17b37:	c9                   	leave  
   17b38:	c3                   	ret    

00017b39 <move_to_first_task>:


/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void) {
   17b39:	55                   	push   %ebp
   17b3a:	89 e5                	mov    %esp,%ebp
   17b3c:	56                   	push   %esi
   17b3d:	53                   	push   %ebx
   17b3e:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t * curr = task_current();
   17b41:	e8 c6 9b ff ff       	call   1170c <task_current>
   17b46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17b49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17b4d:	75 19                	jne    17b68 <move_to_first_task+0x2f>
   17b4f:	68 a0 9c 01 00       	push   $0x19ca0
   17b54:	68 60 9d 01 00       	push   $0x19d60
   17b59:	6a 37                	push   $0x37
   17b5b:	68 ac 9c 01 00       	push   $0x19cac
   17b60:	e8 3a 0b 00 00       	call   1869f <panic>
   17b65:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   17b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b6b:	05 44 02 00 00       	add    $0x244,%eax
   17b70:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   17b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17b76:	8b 40 50             	mov    0x50(%eax),%eax
   17b79:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17b7c:	8b 52 38             	mov    0x38(%edx),%edx
   17b7f:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17b82:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   17b85:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17b88:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17b8b:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17b8e:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17b91:	50                   	push   %eax
   17b92:	52                   	push   %edx
   17b93:	51                   	push   %ecx
   17b94:	53                   	push   %ebx
   17b95:	56                   	push   %esi
   17b96:	cf                   	iret   
}
   17b97:	90                   	nop
   17b98:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17b9b:	5b                   	pop    %ebx
   17b9c:	5e                   	pop    %esi
   17b9d:	5d                   	pop    %ebp
   17b9e:	c3                   	ret    

00017b9f <init_main>:

void init_main(void) {
   17b9f:	55                   	push   %ebp
   17ba0:	89 e5                	mov    %esp,%ebp
   17ba2:	83 ec 08             	sub    $0x8,%esp
    log_printf("===================================");
   17ba5:	83 ec 0c             	sub    $0xc,%esp
   17ba8:	68 fc 9c 01 00       	push   $0x19cfc
   17bad:	e8 4a 0d 00 00       	call   188fc <log_printf>
   17bb2:	83 c4 10             	add    $0x10,%esp
    log_printf("Kernel is running....");
   17bb5:	83 ec 0c             	sub    $0xc,%esp
   17bb8:	68 20 9d 01 00       	push   $0x19d20
   17bbd:	e8 3a 0d 00 00       	call   188fc <log_printf>
   17bc2:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s, name: %s", OS_VERSION, "tiny x86 os");
   17bc5:	83 ec 04             	sub    $0x4,%esp
   17bc8:	68 36 9d 01 00       	push   $0x19d36
   17bcd:	68 42 9d 01 00       	push   $0x19d42
   17bd2:	68 48 9d 01 00       	push   $0x19d48
   17bd7:	e8 20 0d 00 00       	call   188fc <log_printf>
   17bdc:	83 c4 10             	add    $0x10,%esp
    log_printf("===================================");
   17bdf:	83 ec 0c             	sub    $0xc,%esp
   17be2:	68 fc 9c 01 00       	push   $0x19cfc
   17be7:	e8 10 0d 00 00       	call   188fc <log_printf>
   17bec:	83 c4 10             	add    $0x10,%esp

    // 初始化任务
    task_first_init();
   17bef:	e8 32 98 ff ff       	call   11426 <task_first_init>
    move_to_first_task();
   17bf4:	e8 40 ff ff ff       	call   17b39 <move_to_first_task>
}
   17bf9:	90                   	nop
   17bfa:	c9                   	leave  
   17bfb:	c3                   	ret    

00017bfc <list_count>:
static inline int list_count(list_t *list) {
   17bfc:	55                   	push   %ebp
   17bfd:	89 e5                	mov    %esp,%ebp
    return list->count;
   17bff:	8b 45 08             	mov    0x8(%ebp),%eax
   17c02:	8b 40 08             	mov    0x8(%eax),%eax
}
   17c05:	5d                   	pop    %ebp
   17c06:	c3                   	ret    

00017c07 <mutex_init>:
#include "ipc/mutex.h"

/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   17c07:	55                   	push   %ebp
   17c08:	89 e5                	mov    %esp,%ebp
   17c0a:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17c0d:	8b 45 08             	mov    0x8(%ebp),%eax
   17c10:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17c17:	8b 45 08             	mov    0x8(%ebp),%eax
   17c1a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17c20:	8b 45 08             	mov    0x8(%ebp),%eax
   17c23:	83 c0 08             	add    $0x8,%eax
   17c26:	83 ec 0c             	sub    $0xc,%esp
   17c29:	50                   	push   %eax
   17c2a:	e8 b9 0a 00 00       	call   186e8 <list_init>
   17c2f:	83 c4 10             	add    $0x10,%esp
}
   17c32:	90                   	nop
   17c33:	c9                   	leave  
   17c34:	c3                   	ret    

00017c35 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   17c35:	55                   	push   %ebp
   17c36:	89 e5                	mov    %esp,%ebp
   17c38:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17c3b:	e8 d1 b4 ff ff       	call   13111 <irq_enter_protection>
   17c40:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   17c43:	e8 c4 9a ff ff       	call   1170c <task_current>
   17c48:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   17c4b:	8b 45 08             	mov    0x8(%ebp),%eax
   17c4e:	8b 40 04             	mov    0x4(%eax),%eax
   17c51:	85 c0                	test   %eax,%eax
   17c53:	75 14                	jne    17c69 <mutex_lock+0x34>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   17c55:	8b 45 08             	mov    0x8(%ebp),%eax
   17c58:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   17c62:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17c65:	89 10                	mov    %edx,(%eax)
   17c67:	eb 52                	jmp    17cbb <mutex_lock+0x86>
    } else if (mutex->owner == curr) {
   17c69:	8b 45 08             	mov    0x8(%ebp),%eax
   17c6c:	8b 00                	mov    (%eax),%eax
   17c6e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17c71:	75 11                	jne    17c84 <mutex_lock+0x4f>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   17c73:	8b 45 08             	mov    0x8(%ebp),%eax
   17c76:	8b 40 04             	mov    0x4(%eax),%eax
   17c79:	8d 50 01             	lea    0x1(%eax),%edx
   17c7c:	8b 45 08             	mov    0x8(%ebp),%eax
   17c7f:	89 50 04             	mov    %edx,0x4(%eax)
   17c82:	eb 37                	jmp    17cbb <mutex_lock+0x86>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   17c84:	e8 83 9a ff ff       	call   1170c <task_current>
   17c89:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17c8c:	83 ec 0c             	sub    $0xc,%esp
   17c8f:	ff 75 ec             	pushl  -0x14(%ebp)
   17c92:	e8 a7 99 ff ff       	call   1163e <task_set_block>
   17c97:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17c9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17c9d:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   17ca6:	83 c0 08             	add    $0x8,%eax
   17ca9:	83 ec 08             	sub    $0x8,%esp
   17cac:	52                   	push   %edx
   17cad:	50                   	push   %eax
   17cae:	e8 b9 0a 00 00       	call   1876c <list_insert_last>
   17cb3:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17cb6:	e8 68 9b ff ff       	call   11823 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17cbb:	83 ec 0c             	sub    $0xc,%esp
   17cbe:	ff 75 f4             	pushl  -0xc(%ebp)
   17cc1:	e8 63 b4 ff ff       	call   13129 <irq_leave_protection>
   17cc6:	83 c4 10             	add    $0x10,%esp
}
   17cc9:	90                   	nop
   17cca:	c9                   	leave  
   17ccb:	c3                   	ret    

00017ccc <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock (mutex_t * mutex) {
   17ccc:	55                   	push   %ebp
   17ccd:	89 e5                	mov    %esp,%ebp
   17ccf:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17cd2:	e8 3a b4 ff ff       	call   13111 <irq_enter_protection>
   17cd7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   17cda:	e8 2d 9a ff ff       	call   1170c <task_current>
   17cdf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   17ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   17ce5:	8b 00                	mov    (%eax),%eax
   17ce7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17cea:	0f 85 8a 00 00 00    	jne    17d7a <mutex_unlock+0xae>
        if (--mutex->locked_count == 0) {
   17cf0:	8b 45 08             	mov    0x8(%ebp),%eax
   17cf3:	8b 40 04             	mov    0x4(%eax),%eax
   17cf6:	8d 50 ff             	lea    -0x1(%eax),%edx
   17cf9:	8b 45 08             	mov    0x8(%ebp),%eax
   17cfc:	89 50 04             	mov    %edx,0x4(%eax)
   17cff:	8b 45 08             	mov    0x8(%ebp),%eax
   17d02:	8b 40 04             	mov    0x4(%eax),%eax
   17d05:	85 c0                	test   %eax,%eax
   17d07:	75 71                	jne    17d7a <mutex_unlock+0xae>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   17d09:	8b 45 08             	mov    0x8(%ebp),%eax
   17d0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   17d12:	8b 45 08             	mov    0x8(%ebp),%eax
   17d15:	83 c0 08             	add    $0x8,%eax
   17d18:	83 ec 0c             	sub    $0xc,%esp
   17d1b:	50                   	push   %eax
   17d1c:	e8 db fe ff ff       	call   17bfc <list_count>
   17d21:	83 c4 10             	add    $0x10,%esp
   17d24:	85 c0                	test   %eax,%eax
   17d26:	74 52                	je     17d7a <mutex_unlock+0xae>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   17d28:	8b 45 08             	mov    0x8(%ebp),%eax
   17d2b:	83 c0 08             	add    $0x8,%eax
   17d2e:	83 ec 0c             	sub    $0xc,%esp
   17d31:	50                   	push   %eax
   17d32:	e8 99 0a 00 00       	call   187d0 <list_remove_first>
   17d37:	83 c4 10             	add    $0x10,%esp
   17d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   17d3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17d41:	74 0a                	je     17d4d <mutex_unlock+0x81>
   17d43:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17d46:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17d4b:	eb 05                	jmp    17d52 <mutex_unlock+0x86>
   17d4d:	b8 00 00 00 00       	mov    $0x0,%eax
   17d52:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   17d55:	83 ec 0c             	sub    $0xc,%esp
   17d58:	ff 75 e8             	pushl  -0x18(%ebp)
   17d5b:	e8 aa 98 ff ff       	call   1160a <task_set_ready>
   17d60:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   17d63:	8b 45 08             	mov    0x8(%ebp),%eax
   17d66:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   17d6d:	8b 45 08             	mov    0x8(%ebp),%eax
   17d70:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17d73:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   17d75:	e8 a9 9a ff ff       	call   11823 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   17d7a:	83 ec 0c             	sub    $0xc,%esp
   17d7d:	ff 75 f4             	pushl  -0xc(%ebp)
   17d80:	e8 a4 b3 ff ff       	call   13129 <irq_leave_protection>
   17d85:	83 c4 10             	add    $0x10,%esp
}
   17d88:	90                   	nop
   17d89:	c9                   	leave  
   17d8a:	c3                   	ret    

00017d8b <list_count>:
static inline int list_count(list_t *list) {
   17d8b:	55                   	push   %ebp
   17d8c:	89 e5                	mov    %esp,%ebp
    return list->count;
   17d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   17d91:	8b 40 08             	mov    0x8(%eax),%eax
}
   17d94:	5d                   	pop    %ebp
   17d95:	c3                   	ret    

00017d96 <sem_init>:
#include "ipc/sem.h"

/**
 * 信号量初始化
 */
void sem_init (sem_t * sem, int init_count) {
   17d96:	55                   	push   %ebp
   17d97:	89 e5                	mov    %esp,%ebp
   17d99:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   17d9c:	8b 45 08             	mov    0x8(%ebp),%eax
   17d9f:	8b 55 0c             	mov    0xc(%ebp),%edx
   17da2:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17da4:	8b 45 08             	mov    0x8(%ebp),%eax
   17da7:	83 c0 04             	add    $0x4,%eax
   17daa:	83 ec 0c             	sub    $0xc,%esp
   17dad:	50                   	push   %eax
   17dae:	e8 35 09 00 00       	call   186e8 <list_init>
   17db3:	83 c4 10             	add    $0x10,%esp
}
   17db6:	90                   	nop
   17db7:	c9                   	leave  
   17db8:	c3                   	ret    

00017db9 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait (sem_t * sem) {
   17db9:	55                   	push   %ebp
   17dba:	89 e5                	mov    %esp,%ebp
   17dbc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17dbf:	e8 4d b3 ff ff       	call   13111 <irq_enter_protection>
   17dc4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   17dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   17dca:	8b 00                	mov    (%eax),%eax
   17dcc:	85 c0                	test   %eax,%eax
   17dce:	7e 0f                	jle    17ddf <sem_wait+0x26>
        sem->count--;
   17dd0:	8b 45 08             	mov    0x8(%ebp),%eax
   17dd3:	8b 00                	mov    (%eax),%eax
   17dd5:	8d 50 ff             	lea    -0x1(%eax),%edx
   17dd8:	8b 45 08             	mov    0x8(%ebp),%eax
   17ddb:	89 10                	mov    %edx,(%eax)
   17ddd:	eb 37                	jmp    17e16 <sem_wait+0x5d>
    } else {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t * curr = task_current();
   17ddf:	e8 28 99 ff ff       	call   1170c <task_current>
   17de4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   17de7:	83 ec 0c             	sub    $0xc,%esp
   17dea:	ff 75 f0             	pushl  -0x10(%ebp)
   17ded:	e8 4c 98 ff ff       	call   1163e <task_set_block>
   17df2:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   17df5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17df8:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17dfe:	8b 45 08             	mov    0x8(%ebp),%eax
   17e01:	83 c0 04             	add    $0x4,%eax
   17e04:	83 ec 08             	sub    $0x8,%esp
   17e07:	52                   	push   %edx
   17e08:	50                   	push   %eax
   17e09:	e8 5e 09 00 00       	call   1876c <list_insert_last>
   17e0e:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17e11:	e8 0d 9a ff ff       	call   11823 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17e16:	83 ec 0c             	sub    $0xc,%esp
   17e19:	ff 75 f4             	pushl  -0xc(%ebp)
   17e1c:	e8 08 b3 ff ff       	call   13129 <irq_leave_protection>
   17e21:	83 c4 10             	add    $0x10,%esp
}
   17e24:	90                   	nop
   17e25:	c9                   	leave  
   17e26:	c3                   	ret    

00017e27 <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify (sem_t * sem) {
   17e27:	55                   	push   %ebp
   17e28:	89 e5                	mov    %esp,%ebp
   17e2a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17e2d:	e8 df b2 ff ff       	call   13111 <irq_enter_protection>
   17e32:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   17e35:	8b 45 08             	mov    0x8(%ebp),%eax
   17e38:	83 c0 04             	add    $0x4,%eax
   17e3b:	83 ec 0c             	sub    $0xc,%esp
   17e3e:	50                   	push   %eax
   17e3f:	e8 47 ff ff ff       	call   17d8b <list_count>
   17e44:	83 c4 10             	add    $0x10,%esp
   17e47:	85 c0                	test   %eax,%eax
   17e49:	74 42                	je     17e8d <sem_notify+0x66>
        // 有进程等待，则唤醒加入就绪队列
        list_node_t * node = list_remove_first(&sem->wait_list);
   17e4b:	8b 45 08             	mov    0x8(%ebp),%eax
   17e4e:	83 c0 04             	add    $0x4,%eax
   17e51:	83 ec 0c             	sub    $0xc,%esp
   17e54:	50                   	push   %eax
   17e55:	e8 76 09 00 00       	call   187d0 <list_remove_first>
   17e5a:	83 c4 10             	add    $0x10,%esp
   17e5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   17e60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17e64:	74 0a                	je     17e70 <sem_notify+0x49>
   17e66:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17e69:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17e6e:	eb 05                	jmp    17e75 <sem_notify+0x4e>
   17e70:	b8 00 00 00 00       	mov    $0x0,%eax
   17e75:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   17e78:	83 ec 0c             	sub    $0xc,%esp
   17e7b:	ff 75 ec             	pushl  -0x14(%ebp)
   17e7e:	e8 87 97 ff ff       	call   1160a <task_set_ready>
   17e83:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   17e86:	e8 98 99 ff ff       	call   11823 <task_dispatch>
   17e8b:	eb 0d                	jmp    17e9a <sem_notify+0x73>
    } else {
        sem->count++;
   17e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   17e90:	8b 00                	mov    (%eax),%eax
   17e92:	8d 50 01             	lea    0x1(%eax),%edx
   17e95:	8b 45 08             	mov    0x8(%ebp),%eax
   17e98:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   17e9a:	83 ec 0c             	sub    $0xc,%esp
   17e9d:	ff 75 f4             	pushl  -0xc(%ebp)
   17ea0:	e8 84 b2 ff ff       	call   13129 <irq_leave_protection>
   17ea5:	83 c4 10             	add    $0x10,%esp
}
   17ea8:	90                   	nop
   17ea9:	c9                   	leave  
   17eaa:	c3                   	ret    

00017eab <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count (sem_t * sem) {
   17eab:	55                   	push   %ebp
   17eac:	89 e5                	mov    %esp,%ebp
   17eae:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17eb1:	e8 5b b2 ff ff       	call   13111 <irq_enter_protection>
   17eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   17ebc:	8b 00                	mov    (%eax),%eax
   17ebe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   17ec1:	83 ec 0c             	sub    $0xc,%esp
   17ec4:	ff 75 f4             	pushl  -0xc(%ebp)
   17ec7:	e8 5d b2 ff ff       	call   13129 <irq_leave_protection>
   17ecc:	83 c4 10             	add    $0x10,%esp
    return count;
   17ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   17ed2:	c9                   	leave  
   17ed3:	c3                   	ret    

00017ed4 <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   17ed4:	55                   	push   %ebp
   17ed5:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   17ed7:	8b 45 08             	mov    0x8(%ebp),%eax
   17eda:	83 c0 07             	add    $0x7,%eax
   17edd:	8d 50 07             	lea    0x7(%eax),%edx
   17ee0:	85 c0                	test   %eax,%eax
   17ee2:	0f 48 c2             	cmovs  %edx,%eax
   17ee5:	c1 f8 03             	sar    $0x3,%eax
}
   17ee8:	5d                   	pop    %ebp
   17ee9:	c3                   	ret    

00017eea <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   17eea:	55                   	push   %ebp
   17eeb:	89 e5                	mov    %esp,%ebp
   17eed:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   17ef0:	8b 45 08             	mov    0x8(%ebp),%eax
   17ef3:	8b 55 10             	mov    0x10(%ebp),%edx
   17ef6:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   17ef8:	8b 45 08             	mov    0x8(%ebp),%eax
   17efb:	8b 55 0c             	mov    0xc(%ebp),%edx
   17efe:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   17f01:	8b 45 08             	mov    0x8(%ebp),%eax
   17f04:	8b 00                	mov    (%eax),%eax
   17f06:	50                   	push   %eax
   17f07:	e8 c8 ff ff ff       	call   17ed4 <bitmap_byte_count>
   17f0c:	83 c4 04             	add    $0x4,%esp
   17f0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   17f12:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17f16:	74 07                	je     17f1f <bitmap_init+0x35>
   17f18:	ba ff 00 00 00       	mov    $0xff,%edx
   17f1d:	eb 05                	jmp    17f24 <bitmap_init+0x3a>
   17f1f:	ba 00 00 00 00       	mov    $0x0,%edx
   17f24:	8b 45 08             	mov    0x8(%ebp),%eax
   17f27:	8b 40 04             	mov    0x4(%eax),%eax
   17f2a:	83 ec 04             	sub    $0x4,%esp
   17f2d:	ff 75 f4             	pushl  -0xc(%ebp)
   17f30:	52                   	push   %edx
   17f31:	50                   	push   %eax
   17f32:	e8 1b 04 00 00       	call   18352 <kernel_memset>
   17f37:	83 c4 10             	add    $0x10,%esp
}
   17f3a:	90                   	nop
   17f3b:	c9                   	leave  
   17f3c:	c3                   	ret    

00017f3d <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   17f3d:	55                   	push   %ebp
   17f3e:	89 e5                	mov    %esp,%ebp
   17f40:	56                   	push   %esi
   17f41:	53                   	push   %ebx
   17f42:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   17f45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17f4c:	e9 a2 00 00 00       	jmp    17ff3 <bitmap_set_bit+0xb6>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   17f51:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17f55:	74 4a                	je     17fa1 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   17f57:	8b 45 08             	mov    0x8(%ebp),%eax
   17f5a:	8b 50 04             	mov    0x4(%eax),%edx
   17f5d:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f60:	8d 48 07             	lea    0x7(%eax),%ecx
   17f63:	85 c0                	test   %eax,%eax
   17f65:	0f 48 c1             	cmovs  %ecx,%eax
   17f68:	c1 f8 03             	sar    $0x3,%eax
   17f6b:	89 c3                	mov    %eax,%ebx
   17f6d:	89 d8                	mov    %ebx,%eax
   17f6f:	01 d0                	add    %edx,%eax
   17f71:	0f b6 00             	movzbl (%eax),%eax
   17f74:	89 c6                	mov    %eax,%esi
   17f76:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f79:	99                   	cltd   
   17f7a:	c1 ea 1d             	shr    $0x1d,%edx
   17f7d:	01 d0                	add    %edx,%eax
   17f7f:	83 e0 07             	and    $0x7,%eax
   17f82:	29 d0                	sub    %edx,%eax
   17f84:	ba 01 00 00 00       	mov    $0x1,%edx
   17f89:	89 c1                	mov    %eax,%ecx
   17f8b:	d3 e2                	shl    %cl,%edx
   17f8d:	89 d0                	mov    %edx,%eax
   17f8f:	89 f2                	mov    %esi,%edx
   17f91:	09 c2                	or     %eax,%edx
   17f93:	8b 45 08             	mov    0x8(%ebp),%eax
   17f96:	8b 40 04             	mov    0x4(%eax),%eax
   17f99:	89 d9                	mov    %ebx,%ecx
   17f9b:	01 c8                	add    %ecx,%eax
   17f9d:	88 10                	mov    %dl,(%eax)
   17f9f:	eb 4a                	jmp    17feb <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   17fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   17fa4:	8b 50 04             	mov    0x4(%eax),%edx
   17fa7:	8b 45 0c             	mov    0xc(%ebp),%eax
   17faa:	8d 48 07             	lea    0x7(%eax),%ecx
   17fad:	85 c0                	test   %eax,%eax
   17faf:	0f 48 c1             	cmovs  %ecx,%eax
   17fb2:	c1 f8 03             	sar    $0x3,%eax
   17fb5:	89 c3                	mov    %eax,%ebx
   17fb7:	89 d8                	mov    %ebx,%eax
   17fb9:	01 d0                	add    %edx,%eax
   17fbb:	0f b6 00             	movzbl (%eax),%eax
   17fbe:	89 c6                	mov    %eax,%esi
   17fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   17fc3:	99                   	cltd   
   17fc4:	c1 ea 1d             	shr    $0x1d,%edx
   17fc7:	01 d0                	add    %edx,%eax
   17fc9:	83 e0 07             	and    $0x7,%eax
   17fcc:	29 d0                	sub    %edx,%eax
   17fce:	ba 01 00 00 00       	mov    $0x1,%edx
   17fd3:	89 c1                	mov    %eax,%ecx
   17fd5:	d3 e2                	shl    %cl,%edx
   17fd7:	89 d0                	mov    %edx,%eax
   17fd9:	f7 d0                	not    %eax
   17fdb:	89 f2                	mov    %esi,%edx
   17fdd:	21 c2                	and    %eax,%edx
   17fdf:	8b 45 08             	mov    0x8(%ebp),%eax
   17fe2:	8b 40 04             	mov    0x4(%eax),%eax
   17fe5:	89 d9                	mov    %ebx,%ecx
   17fe7:	01 c8                	add    %ecx,%eax
   17fe9:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   17feb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17fef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   17ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17ff6:	3b 45 10             	cmp    0x10(%ebp),%eax
   17ff9:	7d 0e                	jge    18009 <bitmap_set_bit+0xcc>
   17ffb:	8b 45 08             	mov    0x8(%ebp),%eax
   17ffe:	8b 00                	mov    (%eax),%eax
   18000:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18003:	0f 8c 48 ff ff ff    	jl     17f51 <bitmap_set_bit+0x14>
        }
    }
} 
   18009:	90                   	nop
   1800a:	83 c4 10             	add    $0x10,%esp
   1800d:	5b                   	pop    %ebx
   1800e:	5e                   	pop    %esi
   1800f:	5d                   	pop    %ebp
   18010:	c3                   	ret    

00018011 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   18011:	55                   	push   %ebp
   18012:	89 e5                	mov    %esp,%ebp
   18014:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   18015:	8b 45 08             	mov    0x8(%ebp),%eax
   18018:	8b 50 04             	mov    0x4(%eax),%edx
   1801b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1801e:	8d 48 07             	lea    0x7(%eax),%ecx
   18021:	85 c0                	test   %eax,%eax
   18023:	0f 48 c1             	cmovs  %ecx,%eax
   18026:	c1 f8 03             	sar    $0x3,%eax
   18029:	01 d0                	add    %edx,%eax
   1802b:	0f b6 00             	movzbl (%eax),%eax
   1802e:	0f b6 d8             	movzbl %al,%ebx
   18031:	8b 45 0c             	mov    0xc(%ebp),%eax
   18034:	99                   	cltd   
   18035:	c1 ea 1d             	shr    $0x1d,%edx
   18038:	01 d0                	add    %edx,%eax
   1803a:	83 e0 07             	and    $0x7,%eax
   1803d:	29 d0                	sub    %edx,%eax
   1803f:	89 c1                	mov    %eax,%ecx
   18041:	d3 fb                	sar    %cl,%ebx
   18043:	89 d8                	mov    %ebx,%eax
   18045:	83 e0 01             	and    $0x1,%eax
}
   18048:	5b                   	pop    %ebx
   18049:	5d                   	pop    %ebp
   1804a:	c3                   	ret    

0001804b <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   1804b:	55                   	push   %ebp
   1804c:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1804e:	ff 75 0c             	pushl  0xc(%ebp)
   18051:	ff 75 08             	pushl  0x8(%ebp)
   18054:	e8 b8 ff ff ff       	call   18011 <bitmap_get_bit>
   18059:	83 c4 08             	add    $0x8,%esp
   1805c:	85 c0                	test   %eax,%eax
   1805e:	0f 95 c0             	setne  %al
   18061:	0f b6 c0             	movzbl %al,%eax
}
   18064:	c9                   	leave  
   18065:	c3                   	ret    

00018066 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   18066:	55                   	push   %ebp
   18067:	89 e5                	mov    %esp,%ebp
   18069:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1806c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   18073:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1807a:	e9 85 00 00 00       	jmp    18104 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   1807f:	ff 75 fc             	pushl  -0x4(%ebp)
   18082:	ff 75 08             	pushl  0x8(%ebp)
   18085:	e8 87 ff ff ff       	call   18011 <bitmap_get_bit>
   1808a:	83 c4 08             	add    $0x8,%esp
   1808d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18090:	74 06                	je     18098 <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   18092:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   18096:	eb 6c                	jmp    18104 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   18098:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1809b:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   1809e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   180a5:	eb 27                	jmp    180ce <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   180a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   180aa:	8d 50 01             	lea    0x1(%eax),%edx
   180ad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   180b0:	50                   	push   %eax
   180b1:	ff 75 08             	pushl  0x8(%ebp)
   180b4:	e8 58 ff ff ff       	call   18011 <bitmap_get_bit>
   180b9:	83 c4 08             	add    $0x8,%esp
   180bc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   180bf:	74 09                	je     180ca <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   180c1:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   180c8:	eb 16                	jmp    180e0 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   180ca:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   180ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   180d1:	3b 45 10             	cmp    0x10(%ebp),%eax
   180d4:	7d 0a                	jge    180e0 <bitmap_alloc_nbits+0x7a>
   180d6:	8b 45 08             	mov    0x8(%ebp),%eax
   180d9:	8b 00                	mov    (%eax),%eax
   180db:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   180de:	7c c7                	jl     180a7 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   180e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   180e3:	3b 45 10             	cmp    0x10(%ebp),%eax
   180e6:	7c 1c                	jl     18104 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   180e8:	8b 45 0c             	mov    0xc(%ebp),%eax
   180eb:	f7 d0                	not    %eax
   180ed:	50                   	push   %eax
   180ee:	ff 75 10             	pushl  0x10(%ebp)
   180f1:	ff 75 f8             	pushl  -0x8(%ebp)
   180f4:	ff 75 08             	pushl  0x8(%ebp)
   180f7:	e8 41 fe ff ff       	call   17f3d <bitmap_set_bit>
   180fc:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   180ff:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18102:	eb 13                	jmp    18117 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   18104:	8b 45 08             	mov    0x8(%ebp),%eax
   18107:	8b 00                	mov    (%eax),%eax
   18109:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1810c:	0f 8c 6d ff ff ff    	jl     1807f <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   18112:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   18117:	c9                   	leave  
   18118:	c3                   	ret    

00018119 <hlt>:
static inline void hlt(void) {
   18119:	55                   	push   %ebp
   1811a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1811c:	f4                   	hlt    
}
   1811d:	90                   	nop
   1811e:	5d                   	pop    %ebp
   1811f:	c3                   	ret    

00018120 <strings_count>:
#include "comm/cpu_instr.h"

/**
 * @brief 计算字符串的数量
 */
int strings_count (char ** start) {
   18120:	55                   	push   %ebp
   18121:	89 e5                	mov    %esp,%ebp
   18123:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   18126:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   1812d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18131:	74 15                	je     18148 <strings_count+0x28>
        while (*start++) {
   18133:	eb 04                	jmp    18139 <strings_count+0x19>
            count++;
   18135:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   18139:	8b 45 08             	mov    0x8(%ebp),%eax
   1813c:	8d 50 04             	lea    0x4(%eax),%edx
   1813f:	89 55 08             	mov    %edx,0x8(%ebp)
   18142:	8b 00                	mov    (%eax),%eax
   18144:	85 c0                	test   %eax,%eax
   18146:	75 ed                	jne    18135 <strings_count+0x15>
        }
    }
    return count;
   18148:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1814b:	c9                   	leave  
   1814c:	c3                   	ret    

0001814d <get_file_name>:


/**
 * @brief 从路径中解释文件名
 */
char * get_file_name (char * name) {
   1814d:	55                   	push   %ebp
   1814e:	89 e5                	mov    %esp,%ebp
   18150:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   18153:	8b 45 08             	mov    0x8(%ebp),%eax
   18156:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0') {
   18159:	eb 04                	jmp    1815f <get_file_name+0x12>
        s++;
   1815b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   1815f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18162:	0f b6 00             	movzbl (%eax),%eax
   18165:	84 c0                	test   %al,%al
   18167:	75 f2                	jne    1815b <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18169:	eb 04                	jmp    1816f <get_file_name+0x22>
        s--;
   1816b:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   1816f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18172:	0f b6 00             	movzbl (%eax),%eax
   18175:	3c 5c                	cmp    $0x5c,%al
   18177:	74 12                	je     1818b <get_file_name+0x3e>
   18179:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1817c:	0f b6 00             	movzbl (%eax),%eax
   1817f:	3c 2f                	cmp    $0x2f,%al
   18181:	74 08                	je     1818b <get_file_name+0x3e>
   18183:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18186:	3b 45 08             	cmp    0x8(%ebp),%eax
   18189:	73 e0                	jae    1816b <get_file_name+0x1e>
    }
    return s + 1;
   1818b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1818e:	83 c0 01             	add    $0x1,%eax
}
   18191:	c9                   	leave  
   18192:	c3                   	ret    

00018193 <kernel_strcpy>:

void kernel_strcpy (char * dest, const char * src) {
   18193:	55                   	push   %ebp
   18194:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   18196:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1819a:	74 3b                	je     181d7 <kernel_strcpy+0x44>
   1819c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   181a0:	74 35                	je     181d7 <kernel_strcpy+0x44>
        return;
    }

    while (*dest && *src) {
   181a2:	eb 17                	jmp    181bb <kernel_strcpy+0x28>
        *dest++ = *src++;
   181a4:	8b 55 0c             	mov    0xc(%ebp),%edx
   181a7:	8d 42 01             	lea    0x1(%edx),%eax
   181aa:	89 45 0c             	mov    %eax,0xc(%ebp)
   181ad:	8b 45 08             	mov    0x8(%ebp),%eax
   181b0:	8d 48 01             	lea    0x1(%eax),%ecx
   181b3:	89 4d 08             	mov    %ecx,0x8(%ebp)
   181b6:	0f b6 12             	movzbl (%edx),%edx
   181b9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   181bb:	8b 45 08             	mov    0x8(%ebp),%eax
   181be:	0f b6 00             	movzbl (%eax),%eax
   181c1:	84 c0                	test   %al,%al
   181c3:	74 0a                	je     181cf <kernel_strcpy+0x3c>
   181c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   181c8:	0f b6 00             	movzbl (%eax),%eax
   181cb:	84 c0                	test   %al,%al
   181cd:	75 d5                	jne    181a4 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   181cf:	8b 45 08             	mov    0x8(%ebp),%eax
   181d2:	c6 00 00             	movb   $0x0,(%eax)
   181d5:	eb 01                	jmp    181d8 <kernel_strcpy+0x45>
        return;
   181d7:	90                   	nop
}
   181d8:	5d                   	pop    %ebp
   181d9:	c3                   	ret    

000181da <kernel_strncpy>:

void kernel_strncpy(char * dest, const char * src, int size) {
   181da:	55                   	push   %ebp
   181db:	89 e5                	mov    %esp,%ebp
   181dd:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   181e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   181e4:	74 61                	je     18247 <kernel_strncpy+0x6d>
   181e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   181ea:	74 5b                	je     18247 <kernel_strncpy+0x6d>
   181ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   181f0:	74 55                	je     18247 <kernel_strncpy+0x6d>
        return;
    }

    char * d = dest;
   181f2:	8b 45 08             	mov    0x8(%ebp),%eax
   181f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   181f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   181fb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   181fe:	eb 17                	jmp    18217 <kernel_strncpy+0x3d>
        *d++ = *s++;
   18200:	8b 55 f8             	mov    -0x8(%ebp),%edx
   18203:	8d 42 01             	lea    0x1(%edx),%eax
   18206:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18209:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1820c:	8d 48 01             	lea    0x1(%eax),%ecx
   1820f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   18212:	0f b6 12             	movzbl (%edx),%edx
   18215:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   18217:	8b 45 10             	mov    0x10(%ebp),%eax
   1821a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1821d:	89 55 10             	mov    %edx,0x10(%ebp)
   18220:	85 c0                	test   %eax,%eax
   18222:	7e 0a                	jle    1822e <kernel_strncpy+0x54>
   18224:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18227:	0f b6 00             	movzbl (%eax),%eax
   1822a:	84 c0                	test   %al,%al
   1822c:	75 d2                	jne    18200 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   1822e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18232:	75 0b                	jne    1823f <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   18234:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18237:	83 e8 01             	sub    $0x1,%eax
   1823a:	c6 00 00             	movb   $0x0,(%eax)
   1823d:	eb 09                	jmp    18248 <kernel_strncpy+0x6e>
    } else {
        *d = '\0';
   1823f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18242:	c6 00 00             	movb   $0x0,(%eax)
   18245:	eb 01                	jmp    18248 <kernel_strncpy+0x6e>
        return;
   18247:	90                   	nop
    }
}
   18248:	c9                   	leave  
   18249:	c3                   	ret    

0001824a <kernel_strlen>:

int kernel_strlen(const char * str) {
   1824a:	55                   	push   %ebp
   1824b:	89 e5                	mov    %esp,%ebp
   1824d:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   18250:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18254:	75 07                	jne    1825d <kernel_strlen+0x13>
        return 0;
   18256:	b8 00 00 00 00       	mov    $0x0,%eax
   1825b:	eb 26                	jmp    18283 <kernel_strlen+0x39>
    }

	const char * c = str;
   1825d:	8b 45 08             	mov    0x8(%ebp),%eax
   18260:	89 45 fc             	mov    %eax,-0x4(%ebp)

	int len = 0;
   18263:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   1826a:	eb 04                	jmp    18270 <kernel_strlen+0x26>
		len++;
   1826c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   18270:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18273:	8d 50 01             	lea    0x1(%eax),%edx
   18276:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18279:	0f b6 00             	movzbl (%eax),%eax
   1827c:	84 c0                	test   %al,%al
   1827e:	75 ec                	jne    1826c <kernel_strlen+0x22>
	}

	return len;
   18280:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   18283:	c9                   	leave  
   18284:	c3                   	ret    

00018285 <kernel_strncmp>:

/**
 * 比较两个字符串，最多比较size个字符
 * 如果某一字符串提前比较完成，也算相同
 */
int kernel_strncmp (const char * s1, const char * s2, int size) {
   18285:	55                   	push   %ebp
   18286:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   18288:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1828c:	74 06                	je     18294 <kernel_strncmp+0xf>
   1828e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18292:	75 13                	jne    182a7 <kernel_strncmp+0x22>
        return -1;
   18294:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18299:	eb 66                	jmp    18301 <kernel_strncmp+0x7c>
    }

    // 2023-3-18 这里size没有用到
    while (*s1 && *s2 && (*s1 == *s2) && size) {
    	s1++;
   1829b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   1829f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    	size--;
   182a3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   182a7:	8b 45 08             	mov    0x8(%ebp),%eax
   182aa:	0f b6 00             	movzbl (%eax),%eax
   182ad:	84 c0                	test   %al,%al
   182af:	74 20                	je     182d1 <kernel_strncmp+0x4c>
   182b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   182b4:	0f b6 00             	movzbl (%eax),%eax
   182b7:	84 c0                	test   %al,%al
   182b9:	74 16                	je     182d1 <kernel_strncmp+0x4c>
   182bb:	8b 45 08             	mov    0x8(%ebp),%eax
   182be:	0f b6 10             	movzbl (%eax),%edx
   182c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   182c4:	0f b6 00             	movzbl (%eax),%eax
   182c7:	38 c2                	cmp    %al,%dl
   182c9:	75 06                	jne    182d1 <kernel_strncmp+0x4c>
   182cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   182cf:	75 ca                	jne    1829b <kernel_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   182d1:	8b 45 08             	mov    0x8(%ebp),%eax
   182d4:	0f b6 00             	movzbl (%eax),%eax
   182d7:	84 c0                	test   %al,%al
   182d9:	74 21                	je     182fc <kernel_strncmp+0x77>
   182db:	8b 45 0c             	mov    0xc(%ebp),%eax
   182de:	0f b6 00             	movzbl (%eax),%eax
   182e1:	84 c0                	test   %al,%al
   182e3:	74 17                	je     182fc <kernel_strncmp+0x77>
   182e5:	8b 45 08             	mov    0x8(%ebp),%eax
   182e8:	0f b6 10             	movzbl (%eax),%edx
   182eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   182ee:	0f b6 00             	movzbl (%eax),%eax
   182f1:	38 c2                	cmp    %al,%dl
   182f3:	74 07                	je     182fc <kernel_strncmp+0x77>
   182f5:	b8 01 00 00 00       	mov    $0x1,%eax
   182fa:	eb 05                	jmp    18301 <kernel_strncmp+0x7c>
   182fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18301:	5d                   	pop    %ebp
   18302:	c3                   	ret    

00018303 <kernel_memcpy>:

void kernel_memcpy (void * dest, void * src, int size) {
   18303:	55                   	push   %ebp
   18304:	89 e5                	mov    %esp,%ebp
   18306:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   18309:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1830d:	74 40                	je     1834f <kernel_memcpy+0x4c>
   1830f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18313:	74 3a                	je     1834f <kernel_memcpy+0x4c>
   18315:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18319:	74 34                	je     1834f <kernel_memcpy+0x4c>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   1831b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1831e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   18321:	8b 45 08             	mov    0x8(%ebp),%eax
   18324:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   18327:	eb 17                	jmp    18340 <kernel_memcpy+0x3d>
        *d++ = *s++;
   18329:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1832c:	8d 42 01             	lea    0x1(%edx),%eax
   1832f:	89 45 fc             	mov    %eax,-0x4(%ebp)
   18332:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18335:	8d 48 01             	lea    0x1(%eax),%ecx
   18338:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1833b:	0f b6 12             	movzbl (%edx),%edx
   1833e:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18340:	8b 45 10             	mov    0x10(%ebp),%eax
   18343:	8d 50 ff             	lea    -0x1(%eax),%edx
   18346:	89 55 10             	mov    %edx,0x10(%ebp)
   18349:	85 c0                	test   %eax,%eax
   1834b:	75 dc                	jne    18329 <kernel_memcpy+0x26>
   1834d:	eb 01                	jmp    18350 <kernel_memcpy+0x4d>
        return;
   1834f:	90                   	nop
    }
}
   18350:	c9                   	leave  
   18351:	c3                   	ret    

00018352 <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   18352:	55                   	push   %ebp
   18353:	89 e5                	mov    %esp,%ebp
   18355:	83 ec 14             	sub    $0x14,%esp
   18358:	8b 45 0c             	mov    0xc(%ebp),%eax
   1835b:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   1835e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18362:	74 2c                	je     18390 <kernel_memset+0x3e>
   18364:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18368:	74 26                	je     18390 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1836a:	8b 45 08             	mov    0x8(%ebp),%eax
   1836d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   18370:	eb 0f                	jmp    18381 <kernel_memset+0x2f>
        *d++ = v;
   18372:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18375:	8d 50 01             	lea    0x1(%eax),%edx
   18378:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1837b:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1837f:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18381:	8b 45 10             	mov    0x10(%ebp),%eax
   18384:	8d 50 ff             	lea    -0x1(%eax),%edx
   18387:	89 55 10             	mov    %edx,0x10(%ebp)
   1838a:	85 c0                	test   %eax,%eax
   1838c:	75 e4                	jne    18372 <kernel_memset+0x20>
   1838e:	eb 01                	jmp    18391 <kernel_memset+0x3f>
        return;
   18390:	90                   	nop
    }
}
   18391:	c9                   	leave  
   18392:	c3                   	ret    

00018393 <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   18393:	55                   	push   %ebp
   18394:	89 e5                	mov    %esp,%ebp
   18396:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   18399:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1839d:	74 06                	je     183a5 <kernel_memcmp+0x12>
   1839f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   183a3:	75 07                	jne    183ac <kernel_memcmp+0x19>
        return 1;
   183a5:	b8 01 00 00 00       	mov    $0x1,%eax
   183aa:	eb 43                	jmp    183ef <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   183ac:	8b 45 08             	mov    0x8(%ebp),%eax
   183af:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   183b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   183b5:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   183b8:	eb 23                	jmp    183dd <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   183ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183bd:	8d 50 01             	lea    0x1(%eax),%edx
   183c0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   183c3:	0f b6 08             	movzbl (%eax),%ecx
   183c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   183c9:	8d 50 01             	lea    0x1(%eax),%edx
   183cc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   183cf:	0f b6 00             	movzbl (%eax),%eax
   183d2:	38 c1                	cmp    %al,%cl
   183d4:	74 07                	je     183dd <kernel_memcmp+0x4a>
			return 1;
   183d6:	b8 01 00 00 00       	mov    $0x1,%eax
   183db:	eb 12                	jmp    183ef <kernel_memcmp+0x5c>
	while (size--) {
   183dd:	8b 45 10             	mov    0x10(%ebp),%eax
   183e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   183e3:	89 55 10             	mov    %edx,0x10(%ebp)
   183e6:	85 c0                	test   %eax,%eax
   183e8:	75 d0                	jne    183ba <kernel_memcmp+0x27>
		}
	}

	return 0;
   183ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
   183ef:	c9                   	leave  
   183f0:	c3                   	ret    

000183f1 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   183f1:	55                   	push   %ebp
   183f2:	89 e5                	mov    %esp,%ebp
   183f4:	53                   	push   %ebx
   183f5:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   183f8:	8b 45 08             	mov    0x8(%ebp),%eax
   183fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   183fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   18401:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   18404:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   18408:	74 1d                	je     18427 <kernel_itoa+0x36>
   1840a:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1840e:	74 17                	je     18427 <kernel_itoa+0x36>
   18410:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18414:	74 11                	je     18427 <kernel_itoa+0x36>
   18416:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1841a:	74 0b                	je     18427 <kernel_itoa+0x36>
        *p = '\0';
   1841c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1841f:	c6 00 00             	movb   $0x0,(%eax)
        return;
   18422:	e9 03 01 00 00       	jmp    1852a <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   18427:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   1842e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18432:	79 19                	jns    1844d <kernel_itoa+0x5c>
   18434:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18438:	75 13                	jne    1844d <kernel_itoa+0x5c>
        *p++ = '-';
   1843a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1843d:	8d 50 01             	lea    0x1(%eax),%edx
   18440:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18443:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   18446:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   1844d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18451:	74 3b                	je     1848e <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   18453:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   18459:	8b 45 0c             	mov    0xc(%ebp),%eax
   1845c:	99                   	cltd   
   1845d:	f7 7d 10             	idivl  0x10(%ebp)
   18460:	89 d0                	mov    %edx,%eax
   18462:	83 c0 0f             	add    $0xf,%eax
   18465:	01 c8                	add    %ecx,%eax
   18467:	0f b6 00             	movzbl (%eax),%eax
   1846a:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1846d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18470:	8d 50 01             	lea    0x1(%eax),%edx
   18473:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18476:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1847a:	88 10                	mov    %dl,(%eax)
            num /= base;
   1847c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1847f:	99                   	cltd   
   18480:	f7 7d 10             	idivl  0x10(%ebp)
   18483:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   18486:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1848a:	75 c7                	jne    18453 <kernel_itoa+0x62>
   1848c:	eb 4b                	jmp    184d9 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   1848e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18491:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   18494:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   1849a:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1849d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   184a0:	ba 00 00 00 00       	mov    $0x0,%edx
   184a5:	f7 f3                	div    %ebx
   184a7:	89 d0                	mov    %edx,%eax
   184a9:	83 c0 0f             	add    $0xf,%eax
   184ac:	01 c8                	add    %ecx,%eax
   184ae:	0f b6 00             	movzbl (%eax),%eax
   184b1:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   184b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184b7:	8d 50 01             	lea    0x1(%eax),%edx
   184ba:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184bd:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   184c1:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   184c3:	8b 5d 10             	mov    0x10(%ebp),%ebx
   184c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   184c9:	ba 00 00 00 00       	mov    $0x0,%edx
   184ce:	f7 f3                	div    %ebx
   184d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   184d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   184d7:	75 bb                	jne    18494 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   184d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184dc:	8d 50 ff             	lea    -0x1(%eax),%edx
   184df:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184e2:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   184e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   184e9:	74 08                	je     184f3 <kernel_itoa+0x102>
   184eb:	8b 45 08             	mov    0x8(%ebp),%eax
   184ee:	83 c0 01             	add    $0x1,%eax
   184f1:	eb 03                	jmp    184f6 <kernel_itoa+0x105>
   184f3:	8b 45 08             	mov    0x8(%ebp),%eax
   184f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   184f9:	eb 27                	jmp    18522 <kernel_itoa+0x131>
        char ch = *start;
   184fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   184fe:	0f b6 00             	movzbl (%eax),%eax
   18501:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   18504:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18507:	0f b6 10             	movzbl (%eax),%edx
   1850a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1850d:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   1850f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18512:	8d 50 ff             	lea    -0x1(%eax),%edx
   18515:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18518:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1851c:	88 10                	mov    %dl,(%eax)
        start++;
   1851e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   18522:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18525:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   18528:	72 d1                	jb     184fb <kernel_itoa+0x10a>
    }
}
   1852a:	83 c4 20             	add    $0x20,%esp
   1852d:	5b                   	pop    %ebx
   1852e:	5d                   	pop    %ebp
   1852f:	c3                   	ret    

00018530 <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   18530:	55                   	push   %ebp
   18531:	89 e5                	mov    %esp,%ebp
   18533:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   18536:	8d 45 10             	lea    0x10(%ebp),%eax
   18539:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   1853c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1853f:	83 ec 04             	sub    $0x4,%esp
   18542:	50                   	push   %eax
   18543:	ff 75 0c             	pushl  0xc(%ebp)
   18546:	ff 75 08             	pushl  0x8(%ebp)
   18549:	e8 06 00 00 00       	call   18554 <kernel_vsprintf>
   1854e:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   18551:	90                   	nop
   18552:	c9                   	leave  
   18553:	c3                   	ret    

00018554 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   18554:	55                   	push   %ebp
   18555:	89 e5                	mov    %esp,%ebp
   18557:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1855a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   18561:	8b 45 08             	mov    0x8(%ebp),%eax
   18564:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   18567:	e9 17 01 00 00       	jmp    18683 <kernel_vsprintf+0x12f>
        switch (state) {
   1856c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1856f:	85 c0                	test   %eax,%eax
   18571:	74 0a                	je     1857d <kernel_vsprintf+0x29>
   18573:	83 f8 01             	cmp    $0x1,%eax
   18576:	74 2b                	je     185a3 <kernel_vsprintf+0x4f>
   18578:	e9 06 01 00 00       	jmp    18683 <kernel_vsprintf+0x12f>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   1857d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   18581:	75 0c                	jne    1858f <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   18583:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1858a:	e9 f4 00 00 00       	jmp    18683 <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   1858f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18592:	8d 50 01             	lea    0x1(%eax),%edx
   18595:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18598:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1859c:	88 10                	mov    %dl,(%eax)
                }
                break;
   1859e:	e9 e0 00 00 00       	jmp    18683 <kernel_vsprintf+0x12f>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   185a3:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   185a7:	75 31                	jne    185da <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   185a9:	8b 45 10             	mov    0x10(%ebp),%eax
   185ac:	8d 50 04             	lea    0x4(%eax),%edx
   185af:	89 55 10             	mov    %edx,0x10(%ebp)
   185b2:	8b 00                	mov    (%eax),%eax
   185b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   185b7:	6a 0a                	push   $0xa
   185b9:	ff 75 e4             	pushl  -0x1c(%ebp)
   185bc:	ff 75 f8             	pushl  -0x8(%ebp)
   185bf:	e8 2d fe ff ff       	call   183f1 <kernel_itoa>
   185c4:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   185c7:	ff 75 f8             	pushl  -0x8(%ebp)
   185ca:	e8 7b fc ff ff       	call   1824a <kernel_strlen>
   185cf:	83 c4 04             	add    $0x4,%esp
   185d2:	01 45 f8             	add    %eax,-0x8(%ebp)
   185d5:	e9 a1 00 00 00       	jmp    1867b <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   185da:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   185de:	75 2e                	jne    1860e <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   185e0:	8b 45 10             	mov    0x10(%ebp),%eax
   185e3:	8d 50 04             	lea    0x4(%eax),%edx
   185e6:	89 55 10             	mov    %edx,0x10(%ebp)
   185e9:	8b 00                	mov    (%eax),%eax
   185eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   185ee:	6a 10                	push   $0x10
   185f0:	ff 75 e8             	pushl  -0x18(%ebp)
   185f3:	ff 75 f8             	pushl  -0x8(%ebp)
   185f6:	e8 f6 fd ff ff       	call   183f1 <kernel_itoa>
   185fb:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   185fe:	ff 75 f8             	pushl  -0x8(%ebp)
   18601:	e8 44 fc ff ff       	call   1824a <kernel_strlen>
   18606:	83 c4 04             	add    $0x4,%esp
   18609:	01 45 f8             	add    %eax,-0x8(%ebp)
   1860c:	eb 6d                	jmp    1867b <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   1860e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   18612:	75 1f                	jne    18633 <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   18614:	8b 45 10             	mov    0x10(%ebp),%eax
   18617:	8d 50 04             	lea    0x4(%eax),%edx
   1861a:	89 55 10             	mov    %edx,0x10(%ebp)
   1861d:	8b 00                	mov    (%eax),%eax
   1861f:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   18622:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18625:	8d 50 01             	lea    0x1(%eax),%edx
   18628:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1862b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   1862f:	88 10                	mov    %dl,(%eax)
   18631:	eb 48                	jmp    1867b <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   18633:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   18637:	75 42                	jne    1867b <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   18639:	8b 45 10             	mov    0x10(%ebp),%eax
   1863c:	8d 50 04             	lea    0x4(%eax),%edx
   1863f:	89 55 10             	mov    %edx,0x10(%ebp)
   18642:	8b 00                	mov    (%eax),%eax
   18644:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   18647:	ff 75 f4             	pushl  -0xc(%ebp)
   1864a:	e8 fb fb ff ff       	call   1824a <kernel_strlen>
   1864f:	83 c4 04             	add    $0x4,%esp
   18652:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   18655:	eb 17                	jmp    1866e <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   18657:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1865a:	8d 42 01             	lea    0x1(%edx),%eax
   1865d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18660:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18663:	8d 48 01             	lea    0x1(%eax),%ecx
   18666:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   18669:	0f b6 12             	movzbl (%edx),%edx
   1866c:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   1866e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18671:	8d 50 ff             	lea    -0x1(%eax),%edx
   18674:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18677:	85 c0                	test   %eax,%eax
   18679:	75 dc                	jne    18657 <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   1867b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   18682:	90                   	nop
    while ((ch = *fmt++)) {
   18683:	8b 45 0c             	mov    0xc(%ebp),%eax
   18686:	8d 50 01             	lea    0x1(%eax),%edx
   18689:	89 55 0c             	mov    %edx,0xc(%ebp)
   1868c:	0f b6 00             	movzbl (%eax),%eax
   1868f:	88 45 ef             	mov    %al,-0x11(%ebp)
   18692:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   18696:	0f 85 d0 fe ff ff    	jne    1856c <kernel_vsprintf+0x18>
        }
    }
}
   1869c:	90                   	nop
   1869d:	c9                   	leave  
   1869e:	c3                   	ret    

0001869f <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   1869f:	55                   	push   %ebp
   186a0:	89 e5                	mov    %esp,%ebp
   186a2:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   186a5:	83 ec 08             	sub    $0x8,%esp
   186a8:	ff 75 14             	pushl  0x14(%ebp)
   186ab:	68 74 9d 01 00       	push   $0x19d74
   186b0:	e8 47 02 00 00       	call   188fc <log_printf>
   186b5:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   186b8:	ff 75 10             	pushl  0x10(%ebp)
   186bb:	ff 75 0c             	pushl  0xc(%ebp)
   186be:	ff 75 08             	pushl  0x8(%ebp)
   186c1:	68 86 9d 01 00       	push   $0x19d86
   186c6:	e8 31 02 00 00       	call   188fc <log_printf>
   186cb:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   186ce:	e8 46 fa ff ff       	call   18119 <hlt>
   186d3:	eb f9                	jmp    186ce <panic+0x2f>

000186d5 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   186d5:	55                   	push   %ebp
   186d6:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   186d8:	8b 45 08             	mov    0x8(%ebp),%eax
   186db:	8b 40 08             	mov    0x8(%eax),%eax
   186de:	85 c0                	test   %eax,%eax
   186e0:	0f 94 c0             	sete   %al
   186e3:	0f b6 c0             	movzbl %al,%eax
}
   186e6:	5d                   	pop    %ebp
   186e7:	c3                   	ret    

000186e8 <list_init>:

/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   186e8:	55                   	push   %ebp
   186e9:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   186eb:	8b 45 08             	mov    0x8(%ebp),%eax
   186ee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   186f5:	8b 45 08             	mov    0x8(%ebp),%eax
   186f8:	8b 50 04             	mov    0x4(%eax),%edx
   186fb:	8b 45 08             	mov    0x8(%ebp),%eax
   186fe:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   18700:	8b 45 08             	mov    0x8(%ebp),%eax
   18703:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1870a:	90                   	nop
   1870b:	5d                   	pop    %ebp
   1870c:	c3                   	ret    

0001870d <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   1870d:	55                   	push   %ebp
   1870e:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   18710:	8b 45 08             	mov    0x8(%ebp),%eax
   18713:	8b 10                	mov    (%eax),%edx
   18715:	8b 45 0c             	mov    0xc(%ebp),%eax
   18718:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1871b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1871e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   18724:	ff 75 08             	pushl  0x8(%ebp)
   18727:	e8 a9 ff ff ff       	call   186d5 <list_is_empty>
   1872c:	83 c4 04             	add    $0x4,%esp
   1872f:	85 c0                	test   %eax,%eax
   18731:	74 15                	je     18748 <list_insert_first+0x3b>
        list->last = list->first = node;
   18733:	8b 45 08             	mov    0x8(%ebp),%eax
   18736:	8b 55 0c             	mov    0xc(%ebp),%edx
   18739:	89 10                	mov    %edx,(%eax)
   1873b:	8b 45 08             	mov    0x8(%ebp),%eax
   1873e:	8b 10                	mov    (%eax),%edx
   18740:	8b 45 08             	mov    0x8(%ebp),%eax
   18743:	89 50 04             	mov    %edx,0x4(%eax)
   18746:	eb 12                	jmp    1875a <list_insert_first+0x4d>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   18748:	8b 45 08             	mov    0x8(%ebp),%eax
   1874b:	8b 00                	mov    (%eax),%eax
   1874d:	8b 55 0c             	mov    0xc(%ebp),%edx
   18750:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   18752:	8b 45 08             	mov    0x8(%ebp),%eax
   18755:	8b 55 0c             	mov    0xc(%ebp),%edx
   18758:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1875a:	8b 45 08             	mov    0x8(%ebp),%eax
   1875d:	8b 40 08             	mov    0x8(%eax),%eax
   18760:	8d 50 01             	lea    0x1(%eax),%edx
   18763:	8b 45 08             	mov    0x8(%ebp),%eax
   18766:	89 50 08             	mov    %edx,0x8(%eax)
}
   18769:	90                   	nop
   1876a:	c9                   	leave  
   1876b:	c3                   	ret    

0001876c <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   1876c:	55                   	push   %ebp
   1876d:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   1876f:	8b 45 08             	mov    0x8(%ebp),%eax
   18772:	8b 50 04             	mov    0x4(%eax),%edx
   18775:	8b 45 0c             	mov    0xc(%ebp),%eax
   18778:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1877a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1877d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   18784:	ff 75 08             	pushl  0x8(%ebp)
   18787:	e8 49 ff ff ff       	call   186d5 <list_is_empty>
   1878c:	83 c4 04             	add    $0x4,%esp
   1878f:	85 c0                	test   %eax,%eax
   18791:	74 16                	je     187a9 <list_insert_last+0x3d>
        list->first = list->last = node;
   18793:	8b 45 08             	mov    0x8(%ebp),%eax
   18796:	8b 55 0c             	mov    0xc(%ebp),%edx
   18799:	89 50 04             	mov    %edx,0x4(%eax)
   1879c:	8b 45 08             	mov    0x8(%ebp),%eax
   1879f:	8b 50 04             	mov    0x4(%eax),%edx
   187a2:	8b 45 08             	mov    0x8(%ebp),%eax
   187a5:	89 10                	mov    %edx,(%eax)
   187a7:	eb 15                	jmp    187be <list_insert_last+0x52>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   187a9:	8b 45 08             	mov    0x8(%ebp),%eax
   187ac:	8b 40 04             	mov    0x4(%eax),%eax
   187af:	8b 55 0c             	mov    0xc(%ebp),%edx
   187b2:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   187b5:	8b 45 08             	mov    0x8(%ebp),%eax
   187b8:	8b 55 0c             	mov    0xc(%ebp),%edx
   187bb:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   187be:	8b 45 08             	mov    0x8(%ebp),%eax
   187c1:	8b 40 08             	mov    0x8(%eax),%eax
   187c4:	8d 50 01             	lea    0x1(%eax),%edx
   187c7:	8b 45 08             	mov    0x8(%ebp),%eax
   187ca:	89 50 08             	mov    %edx,0x8(%eax)
}
   187cd:	90                   	nop
   187ce:	c9                   	leave  
   187cf:	c3                   	ret    

000187d0 <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   187d0:	55                   	push   %ebp
   187d1:	89 e5                	mov    %esp,%ebp
   187d3:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   187d6:	ff 75 08             	pushl  0x8(%ebp)
   187d9:	e8 f7 fe ff ff       	call   186d5 <list_is_empty>
   187de:	83 c4 04             	add    $0x4,%esp
   187e1:	85 c0                	test   %eax,%eax
   187e3:	74 07                	je     187ec <list_remove_first+0x1c>
        return (list_node_t*)0;
   187e5:	b8 00 00 00 00       	mov    $0x0,%eax
   187ea:	eb 5a                	jmp    18846 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   187ec:	8b 45 08             	mov    0x8(%ebp),%eax
   187ef:	8b 00                	mov    (%eax),%eax
   187f1:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   187f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   187f7:	8b 50 04             	mov    0x4(%eax),%edx
   187fa:	8b 45 08             	mov    0x8(%ebp),%eax
   187fd:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   187ff:	8b 45 08             	mov    0x8(%ebp),%eax
   18802:	8b 00                	mov    (%eax),%eax
   18804:	85 c0                	test   %eax,%eax
   18806:	75 0c                	jne    18814 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   18808:	8b 45 08             	mov    0x8(%ebp),%eax
   1880b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18812:	eb 0c                	jmp    18820 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   18814:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18817:	8b 40 04             	mov    0x4(%eax),%eax
   1881a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   18820:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18823:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   18829:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1882c:	8b 10                	mov    (%eax),%edx
   1882e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18831:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   18834:	8b 45 08             	mov    0x8(%ebp),%eax
   18837:	8b 40 08             	mov    0x8(%eax),%eax
   1883a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1883d:	8b 45 08             	mov    0x8(%ebp),%eax
   18840:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   18843:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18846:	c9                   	leave  
   18847:	c3                   	ret    

00018848 <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   18848:	55                   	push   %ebp
   18849:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   1884b:	8b 45 08             	mov    0x8(%ebp),%eax
   1884e:	8b 00                	mov    (%eax),%eax
   18850:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18853:	75 0b                	jne    18860 <list_remove+0x18>
        list->first = remove_node->next;
   18855:	8b 45 0c             	mov    0xc(%ebp),%eax
   18858:	8b 50 04             	mov    0x4(%eax),%edx
   1885b:	8b 45 08             	mov    0x8(%ebp),%eax
   1885e:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   18860:	8b 45 08             	mov    0x8(%ebp),%eax
   18863:	8b 40 04             	mov    0x4(%eax),%eax
   18866:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18869:	75 0b                	jne    18876 <list_remove+0x2e>
        list->last = remove_node->pre;
   1886b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1886e:	8b 10                	mov    (%eax),%edx
   18870:	8b 45 08             	mov    0x8(%ebp),%eax
   18873:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   18876:	8b 45 0c             	mov    0xc(%ebp),%eax
   18879:	8b 00                	mov    (%eax),%eax
   1887b:	85 c0                	test   %eax,%eax
   1887d:	74 0e                	je     1888d <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   1887f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18882:	8b 00                	mov    (%eax),%eax
   18884:	8b 55 0c             	mov    0xc(%ebp),%edx
   18887:	8b 52 04             	mov    0x4(%edx),%edx
   1888a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   1888d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18890:	8b 40 04             	mov    0x4(%eax),%eax
   18893:	85 c0                	test   %eax,%eax
   18895:	74 0d                	je     188a4 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   18897:	8b 45 0c             	mov    0xc(%ebp),%eax
   1889a:	8b 40 04             	mov    0x4(%eax),%eax
   1889d:	8b 55 0c             	mov    0xc(%ebp),%edx
   188a0:	8b 12                	mov    (%edx),%edx
   188a2:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   188a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   188a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   188ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   188b1:	8b 50 04             	mov    0x4(%eax),%edx
   188b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   188b7:	89 10                	mov    %edx,(%eax)
    --list->count;
   188b9:	8b 45 08             	mov    0x8(%ebp),%eax
   188bc:	8b 40 08             	mov    0x8(%eax),%eax
   188bf:	8d 50 ff             	lea    -0x1(%eax),%edx
   188c2:	8b 45 08             	mov    0x8(%ebp),%eax
   188c5:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   188c8:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   188cb:	5d                   	pop    %ebp
   188cc:	c3                   	ret    

000188cd <log_init>:
static int log_dev_id;

/**
 * @brief 初始化日志输出
 */
void log_init (void) {
   188cd:	55                   	push   %ebp
   188ce:	89 e5                	mov    %esp,%ebp
   188d0:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   188d3:	83 ec 0c             	sub    $0xc,%esp
   188d6:	68 a8 e0 05 00       	push   $0x5e0a8
   188db:	e8 27 f3 ff ff       	call   17c07 <mutex_init>
   188e0:	83 c4 10             	add    $0x10,%esp

    log_dev_id = dev_open(DEV_TTY, 0, 0);
   188e3:	83 ec 04             	sub    $0x4,%esp
   188e6:	6a 00                	push   $0x0
   188e8:	6a 00                	push   $0x0
   188ea:	6a 01                	push   $0x1
   188ec:	e8 c6 b4 ff ff       	call   13db7 <dev_open>
   188f1:	83 c4 10             	add    $0x10,%esp
   188f4:	a3 bc e0 05 00       	mov    %eax,0x5e0bc
  
    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
#endif
}
   188f9:	90                   	nop
   188fa:	c9                   	leave  
   188fb:	c3                   	ret    

000188fc <log_printf>:

/**
 * @brief 日志打印
 */
void log_printf(const char * fmt, ...) {
   188fc:	55                   	push   %ebp
   188fd:	89 e5                	mov    %esp,%ebp
   188ff:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   18905:	83 ec 04             	sub    $0x4,%esp
   18908:	68 80 00 00 00       	push   $0x80
   1890d:	6a 00                	push   $0x0
   1890f:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18915:	50                   	push   %eax
   18916:	e8 37 fa ff ff       	call   18352 <kernel_memset>
   1891b:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   1891e:	8d 45 0c             	lea    0xc(%ebp),%eax
   18921:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   18927:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   1892d:	83 ec 04             	sub    $0x4,%esp
   18930:	50                   	push   %eax
   18931:	ff 75 08             	pushl  0x8(%ebp)
   18934:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   1893a:	50                   	push   %eax
   1893b:	e8 14 fc ff ff       	call   18554 <kernel_vsprintf>
   18940:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    mutex_lock(&mutex);
   18943:	83 ec 0c             	sub    $0xc,%esp
   18946:	68 a8 e0 05 00       	push   $0x5e0a8
   1894b:	e8 e5 f2 ff ff       	call   17c35 <mutex_lock>
   18950:	83 c4 10             	add    $0x10,%esp

    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');
#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "log:", 4);
   18953:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18958:	6a 04                	push   $0x4
   1895a:	68 c4 9d 01 00       	push   $0x19dc4
   1895f:	6a 00                	push   $0x0
   18961:	50                   	push   %eax
   18962:	e8 e8 b5 ff ff       	call   13f4f <dev_write>
   18967:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   1896a:	83 ec 0c             	sub    $0xc,%esp
   1896d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18973:	50                   	push   %eax
   18974:	e8 d1 f8 ff ff       	call   1824a <kernel_strlen>
   18979:	83 c4 10             	add    $0x10,%esp
   1897c:	89 c2                	mov    %eax,%edx
   1897e:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18983:	52                   	push   %edx
   18984:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   1898a:	52                   	push   %edx
   1898b:	6a 00                	push   $0x0
   1898d:	50                   	push   %eax
   1898e:	e8 bc b5 ff ff       	call   13f4f <dev_write>
   18993:	83 c4 10             	add    $0x10,%esp

    char c = '\n';
   18996:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    //console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   1899d:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   189a2:	6a 01                	push   $0x1
   189a4:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   189aa:	52                   	push   %edx
   189ab:	6a 00                	push   $0x0
   189ad:	50                   	push   %eax
   189ae:	e8 9c b5 ff ff       	call   13f4f <dev_write>
   189b3:	83 c4 10             	add    $0x10,%esp

#endif
    mutex_unlock(&mutex);
   189b6:	83 ec 0c             	sub    $0xc,%esp
   189b9:	68 a8 e0 05 00       	push   $0x5e0a8
   189be:	e8 09 f3 ff ff       	call   17ccc <mutex_unlock>
   189c3:	83 c4 10             	add    $0x10,%esp
}
   189c6:	90                   	nop
   189c7:	c9                   	leave  
   189c8:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * 联系邮箱: 527676163@qq.com
 */
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main (void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
        print_msg("task id = %d", pid);
        msleep(1000);
    }
#endif

    for (int i = 0; i < TTY_NR; i++) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
        int pid = fork();
80000022:	e8 62 01 00 00       	call   80000189 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 c9 9d 01 00       	push   $0x19dc9
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        } else if (pid == 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 e2 9d 01 00       	push   $0x19de2
80000082:	e8 1d 01 00 00       	call   800001a4 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 c9 9d 01 00       	push   $0x19dc9
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1) {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++) {
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
    }

    while (1) {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 24 01 00 00       	call   800001ec <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:
#include "malloc.h"

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep (int ms) {
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid() {
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

int print_msg(char * fmt, int arg) {
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	c9                   	leave  
80000188:	c3                   	ret    

80000189 <fork>:

int fork() {
80000189:	55                   	push   %ebp
8000018a:	89 e5                	mov    %esp,%ebp
8000018c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000196:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000199:	50                   	push   %eax
8000019a:	e8 2e ff ff ff       	call   800000cd <sys_call>
8000019f:	83 c4 04             	add    $0x4,%esp
}
800001a2:	c9                   	leave  
800001a3:	c3                   	ret    

800001a4 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
800001a4:	55                   	push   %ebp
800001a5:	89 e5                	mov    %esp,%ebp
800001a7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001aa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b1:	8b 45 08             	mov    0x8(%ebp),%eax
800001b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b7:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bd:	8b 45 10             	mov    0x10(%ebp),%eax
800001c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c6:	50                   	push   %eax
800001c7:	e8 01 ff ff ff       	call   800000cd <sys_call>
800001cc:	83 c4 04             	add    $0x4,%esp
}
800001cf:	c9                   	leave  
800001d0:	c3                   	ret    

800001d1 <yield>:

int yield (void) {
800001d1:	55                   	push   %ebp
800001d2:	89 e5                	mov    %esp,%ebp
800001d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001de:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e1:	50                   	push   %eax
800001e2:	e8 e6 fe ff ff       	call   800000cd <sys_call>
800001e7:	83 c4 04             	add    $0x4,%esp
}
800001ea:	c9                   	leave  
800001eb:	c3                   	ret    

800001ec <wait>:

int wait(int* status) {
800001ec:	55                   	push   %ebp
800001ed:	89 e5                	mov    %esp,%ebp
800001ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f2:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001f9:	8b 45 08             	mov    0x8(%ebp),%eax
800001fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800001ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000202:	50                   	push   %eax
80000203:	e8 c5 fe ff ff       	call   800000cd <sys_call>
80000208:	83 c4 04             	add    $0x4,%esp
}
8000020b:	c9                   	leave  
8000020c:	c3                   	ret    

8000020d <_exit>:

void _exit(int status) {
8000020d:	55                   	push   %ebp
8000020e:	89 e5                	mov    %esp,%ebp
80000210:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000213:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021a:	8b 45 08             	mov    0x8(%ebp),%eax
8000021d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000220:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000223:	50                   	push   %eax
80000224:	e8 a4 fe ff ff       	call   800000cd <sys_call>
80000229:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
8000022c:	eb fe                	jmp    8000022c <_exit+0x1f>

8000022e <open>:
}

int open(const char *name, int flags, ...) {
8000022e:	55                   	push   %ebp
8000022f:	89 e5                	mov    %esp,%ebp
80000231:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000234:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023b:	8b 45 08             	mov    0x8(%ebp),%eax
8000023e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000241:	8b 45 0c             	mov    0xc(%ebp),%eax
80000244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000247:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024a:	50                   	push   %eax
8000024b:	e8 7d fe ff ff       	call   800000cd <sys_call>
80000250:	83 c4 04             	add    $0x4,%esp
}
80000253:	c9                   	leave  
80000254:	c3                   	ret    

80000255 <read>:

int read(int file, char *ptr, int len) {
80000255:	55                   	push   %ebp
80000256:	89 e5                	mov    %esp,%ebp
80000258:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000262:	8b 45 08             	mov    0x8(%ebp),%eax
80000265:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000268:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026e:	8b 45 10             	mov    0x10(%ebp),%eax
80000271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000274:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000277:	50                   	push   %eax
80000278:	e8 50 fe ff ff       	call   800000cd <sys_call>
8000027d:	83 c4 04             	add    $0x4,%esp
}
80000280:	c9                   	leave  
80000281:	c3                   	ret    

80000282 <write>:

int write(int file, char *ptr, int len) {
80000282:	55                   	push   %ebp
80000283:	89 e5                	mov    %esp,%ebp
80000285:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000288:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000028f:	8b 45 08             	mov    0x8(%ebp),%eax
80000292:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000295:	8b 45 0c             	mov    0xc(%ebp),%eax
80000298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029b:	8b 45 10             	mov    0x10(%ebp),%eax
8000029e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a4:	50                   	push   %eax
800002a5:	e8 23 fe ff ff       	call   800000cd <sys_call>
800002aa:	83 c4 04             	add    $0x4,%esp
}
800002ad:	c9                   	leave  
800002ae:	c3                   	ret    

800002af <close>:

int close(int file) {
800002af:	55                   	push   %ebp
800002b0:	89 e5                	mov    %esp,%ebp
800002b2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b5:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bc:	8b 45 08             	mov    0x8(%ebp),%eax
800002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c5:	50                   	push   %eax
800002c6:	e8 02 fe ff ff       	call   800000cd <sys_call>
800002cb:	83 c4 04             	add    $0x4,%esp
}
800002ce:	c9                   	leave  
800002cf:	c3                   	ret    

800002d0 <lseek>:

int lseek(int file, int ptr, int dir) {
800002d0:	55                   	push   %ebp
800002d1:	89 e5                	mov    %esp,%ebp
800002d3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002dd:	8b 45 08             	mov    0x8(%ebp),%eax
800002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002e9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f2:	50                   	push   %eax
800002f3:	e8 d5 fd ff ff       	call   800000cd <sys_call>
800002f8:	83 c4 04             	add    $0x4,%esp
}
800002fb:	c9                   	leave  
800002fc:	c3                   	ret    

800002fd <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
800002fd:	55                   	push   %ebp
800002fe:	89 e5                	mov    %esp,%ebp
80000300:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000303:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030a:	8b 45 08             	mov    0x8(%ebp),%eax
8000030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000310:	8b 45 0c             	mov    0xc(%ebp),%eax
80000313:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000316:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000319:	50                   	push   %eax
8000031a:	e8 ae fd ff ff       	call   800000cd <sys_call>
8000031f:	83 c4 04             	add    $0x4,%esp
}
80000322:	c9                   	leave  
80000323:	c3                   	ret    

80000324 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
80000324:	55                   	push   %ebp
80000325:	89 e5                	mov    %esp,%ebp
80000327:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000331:	8b 45 08             	mov    0x8(%ebp),%eax
80000334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000337:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033a:	50                   	push   %eax
8000033b:	e8 8d fd ff ff       	call   800000cd <sys_call>
80000340:	83 c4 04             	add    $0x4,%esp
}
80000343:	c9                   	leave  
80000344:	c3                   	ret    

80000345 <sbrk>:

void * sbrk(ptrdiff_t incr) {
80000345:	55                   	push   %ebp
80000346:	89 e5                	mov    %esp,%ebp
80000348:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000352:	8b 45 08             	mov    0x8(%ebp),%eax
80000355:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000358:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035b:	50                   	push   %eax
8000035c:	e8 6c fd ff ff       	call   800000cd <sys_call>
80000361:	83 c4 04             	add    $0x4,%esp
}
80000364:	c9                   	leave  
80000365:	c3                   	ret    

80000366 <dup>:

int dup (int file) {
80000366:	55                   	push   %ebp
80000367:	89 e5                	mov    %esp,%ebp
80000369:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000373:	8b 45 08             	mov    0x8(%ebp),%eax
80000376:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000379:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037c:	50                   	push   %eax
8000037d:	e8 4b fd ff ff       	call   800000cd <sys_call>
80000382:	83 c4 04             	add    $0x4,%esp
}
80000385:	c9                   	leave  
80000386:	c3                   	ret    
